/*** SoundObject: sound control framework for ActionScript3.* @author Greg MacWilliam* @version 1.0*//*** Licensed under the MIT License* * Copyright (c) 2009 Greg MacWilliam* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://code.google.com/p/sound-skin/* http://www.opensource.org/licenses/mit-license.php */package com.gmac.sound{	import flash.media.Sound;	import flash.events.EventDispatcher;	import flash.events.Event;		/**	* The SoundObjectContainer class is the base class for all objects that can serve as a container for sounds.	*/	public class SoundObjectContainer extends SoundObject	{		/** @private */		protected var _itable:Object;				/** @private */		protected var _garbageCollectionMode:Boolean = true;				/**		* Creates a new SoundObjectContainer class abstract.		*/		public function SoundObjectContainer():void		{			super();			_itable = new Object();		}				/** @private */		override protected function _destroy():void		{			clear(garbageCollectionMode);			_itable = null;		}			//-------------------------------------------------	// Child permissions	//-------------------------------------------------			/**		* Specifies if automatic garbage collection is enabled.		* If <code>true</code>, all children of the container will be destroyed when <code>destroy()</code> is called on the container.		* This property may serve additional purposes for extentions of the SoundObjectContainer class.		* @see #destroy()		*/		public function get garbageCollectionMode():Boolean {			return _garbageCollectionMode;		}		public function set garbageCollectionMode($enable:Boolean):void {			_garbageCollectionMode = $enable;		}			//-------------------------------------------------	// Volume controls	//-------------------------------------------------			/**		* @private		*/		override public function get volume():Number {			return _volume;		}		override public function set volume($percent:Number):void {			_volume = $percent;						// apply volume to all children			for (var $j:String in _itable) {				SoundChild(_itable[$j]).volume = _volume;			}		}				/**		* @private		*/		override public function get mute():Boolean {			return _mute;		}		override public function set mute($mute:Boolean):void {			_mute = $mute;						// apply mute to all children			for (var $j:String in _itable) {				SoundChild(_itable[$j]).mute = _mute;			}		}				/**		* @private		*/		override public function toggleMute():Boolean {			mute = !_mute;			return mute;		}	//-------------------------------------------------	// Playback controls	//-------------------------------------------------				/**		* TODO: check if any sounds are playing.		*/		public function hasPlayingSound():Boolean {			return _playing;		}				/**		* Enables the container's playback setting (or <code>playing</code> property). If <code>groupPlayback</code> control is enabled, all sounds are played.		* Sounds will play based on their respective playback / loop configurations,		* and may end up stopping despite the fact the container is set to play.		* New sounds added into a playing container will automatically be played if <code>groupPlayback</code> is enabled.		* @see #groupPlayback		* @see #playing		*/		override public function play():void		{			_playing = true;						for (var $j:String in _itable) {				SoundChild(_itable[$j]).play();			}		}				/**		* Disables the container's playback setting (or <code>playing</code> property). If <code>groupPlayback</code> control is enabled, all sounds are stopped.		* New sounds added into a stopped container will automatically be stopped if <code>groupPlayback</code> is enabled.		* @see #groupPlayback		* @see #playing		* @see #stopAllSounds()		*/		override public function stop():void		{			_playing = false;						for (var $j:String in _itable) {				SoundChild(_itable[$j]).stop();			}		}				/**		* Toggles the current playback status of the container, as expressed by the <code>playing</code> property.		* Child sounds of the container will be stopped or played respectively if <code>groupPlayback</code> is enabled.		* @see #groupPlayback		* @see #playing		*/		override public function togglePlayback():Boolean		{			_playing = !_playing;			_playing ? play() : stop();			return _playing;		}			//-------------------------------------------------	// Container methods	//-------------------------------------------------				/**		* Tests if a SoundChild instance is a member of the group.		* @param instanceName  The SoundChild instance name to check for.		* @return Returns <code>true</code> if the specified instance name was found within the group.		*/		public function contains($child:SoundChild):Boolean {			return _itable.hasOwnProperty($child._$instance);		}				/**		* Gets a SoundChild by name.		* Returns <code>null</code> if the group does not contain the instance.		* @param instanceName  The sound instance to fetch.		* @return Returns a SoundChild object, or <code>null</code> if the specified instance was not found.		*/		public function getChildByName($name:String):SoundChild		{			for (var $j:String in _itable) {				var $child:SoundChild = _itable[$j] as SoundChild;				if ($child.name == $name) return $child;			}			return null;		}				/**		* Gets a list of all sound child.		*/		public function getChildList($name:String):Array		{			var $list:Array = new Array();			for (var $j:String in _itable) $list.push(_itable[$j]);			return $list;		}				/**		* Creates a skin from a raw Sound object, then adds it to the group.		* @param rawSound  A pre-loaded Sound object to add into the group.		* @param autoPlay  Specifies if the sound should start immediate playback upon being added.		* @return Returns a reference to the added skin object.		*/		public function addRawSound($rawSound:Sound, $loop:int=1, $secondsOffset:Number=0):SoundChild		{			var $sound:SoundChild = new SoundChild($rawSound, $loop, $secondsOffset);			return addChild($sound);		}				/**		* Adds a SoundChild object to the group.		* @param sound  The SoundChild instance to add.		* @param autoPlay  Specifies if the sound should start immediate playback upon being added.		* @return Returns a reference to the added SoundChild object.		*/		public function addChild($child:SoundChild):SoundChild		{			if (!$child is SoundChild)			{				// invalid SoundChild				throw(new SoundObjectError("Invalid SoundChild reference."));				return null;			}			else if ($child.destroyed)			{				// SoundChild has been destroyed.				throw(new SoundObjectError("Cannot add a destroyed child. Confirm garbageCollectionMode is configured properly."));				return null;			}			else if (!contains($child))			{				// ADD: object is not already a child of the container.				$child._$setParent(this);				_itable[$child._$instance] = $child;				return $child;			}			return $child;		}		/**		* Removes a sound from the group and returns its skin reference.		* While the removed skin is no longer part of the group, it is still a functional object.		* @see #clearSound()		*/		public function removeChild($child:SoundChild):SoundChild		{			if (!$child is SoundChild)			{				// invalid SoundChild				throw(new SoundObjectError("Invalid SoundChild reference."));				return null;			}			else if (!contains($child))			{				// object is not a child of the container.				throw(new SoundObjectError("Target sound must be a child of the container."));				return null;			}			else			{				// REMOVE: object is a valid child of the container.				$child._$setParent(null);				delete _itable[$child._$instance];				return $child;			}			return null;		}				/**		* Removes all sounds from the group.		* @param garbageCollect Specifies if the removed children should be stoped and destroyed, optimizing them for garbage collection.		*/		public function clear($garbageCollect:Boolean=false):void		{			for (var $j:String in _itable) {				// remove all children.				var $child:SoundChild = _itable[$j] as SoundChild;				removeChild($child);								// destroy children if in garbage collection mode.				if ($garbageCollect) $child.destroy();			}		}	}}
/*** SoundObject: sound control framework for ActionScript3.* @author Greg MacWilliam* @version 1.0*//*** Licensed under the MIT License* * Copyright (c) 2009 Greg MacWilliam* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://code.google.com/p/sound-skin/* http://www.opensource.org/licenses/mit-license.php */package com.gmac.sound{	import flash.media.Sound;		/**	* SoundChild extends basic plaback controls by adding integration with SoundObjectContainer.	* A SoundChild can be added to a container, allowing it to share group controls with other sounds in the container.	*/	public class SoundChild extends SoundClip	{		/** @private : counter for spawning unique instance names */		static private var _instanceCount:int = 0;				/**		* Specifies a name for the child.		* You can access a SoundChild by name from within a SoundObjectContainer.		*/		public var name:String = "";				/** @private */		private var _instance:String = "";		private var _parent:SoundObjectContainer;				/**		* Creates a new SoundChild object.		* A SoundChild can be constructed with a preloaded sound to manage; otherwise, an external sound will need to be loaded.		* @param sound  A preloaded sound object to play. If no sound is provided, an external sound will need to be loaded.		* @param loop  Specifies the number of times the track will play sequentially. Use 0 to make the sound loop indefinitely.		* @param startTime  Specifies the time (in milliseconds) at which the sound should start playing.		* @see #load()		*/		public function SoundChild($sound:Sound=null, $loops:int=1, $startTime:Number=0):void		{			super($sound, $loops, $startTime);			_instance = "i"+ SoundChild._instanceCount++;		}				/**		* @private		* Cleans up the SoundChild object to optimize for garbage collection.		* Sound playback is stopped, any loading connection is closed, and all object references are nullified.		* This method should always be called after you are finishing with a SoundChild.		*/		override protected function _destroy():void		{			// remove sound from any parent container			if (parent != null) parent.removeChild(this);			super.destroy();		}			//-------------------------------------------------	// Ancestor relationship	//-------------------------------------------------			/** 		* Gets the parent SoundObjectContainer of the sound child.		*/		public function get parent():SoundObjectContainer {			return _parent;		}			/**			* @private			* sets the parent container reference			*/			internal function _$setParent($parent:SoundObjectContainer):void			{				// clear any existing parent relationship.				// Note: ignore this operation if the new parent setting is null,				// because null will only come from the sound's parent during "removeChild".				if (_parent != null && $parent != null) _parent.removeChild(this);				// set new relationship.				_parent = $parent;			}					/**		* @private		* gets the child instance key.		*/		internal function get _$instance():String {			return _instance;		}			//-------------------------------------------------	// Playback controls	//-------------------------------------------------			/**		* @private		* Restrict <code>autoRewind</code> setting on sprites inside of a container.		* Sprites inside of a container should not automatically reset themselves,		* so that group play/stop with varying length audio will all line up.		*/		override public function get autoReset():Boolean {			return (parent != null) ? false : super.autoReset;		}	}}
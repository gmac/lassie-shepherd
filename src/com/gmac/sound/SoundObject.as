/*** SoundObject: sound control framework for ActionScript3.* @author Greg MacWilliam* @version 1.0*//*** Licensed under the MIT License* * Copyright (c) 2009 Greg MacWilliam* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://code.google.com/p/sound-skin/* http://www.opensource.org/licenses/mit-license.php */package com.gmac.sound{	import flash.events.EventDispatcher;		/**	* SoundObject is the base class for all objects within the SoundObject framework.	* SoundObject is an abstract base class, so should not be directly instantiated.	*/	public class SoundObject extends EventDispatcher implements ISoundObject	{		/** @private */		protected var _volume:Number = 1;				/** @private */		protected var _mute:Boolean = false;				/** @private */		protected var _playing:Boolean = false;				/** @private */		private var _destroyed:Boolean = false;		/** @private		* Constructs a new SoundObject		*/		public function SoundObject():void {			super();		}		/**		* Specifies whether the SoundObject has been destroyed.		* A SoundObject becomes unusable after it has been destroyed.		* @see #destroy()		*/		public function get destroyed():Boolean {			return _destroyed;		}				/**		* Deconstructs a SoundObject to optimize its elements for garbage collection.		* A SoundObject becomes unusable after it has been destroyed.		* For optimal performance, remove all listeners from a SoundObject, destroy it, and then nullify all references to it.		* @see #destroyed		*/		final public function destroy():void		{			if (!destroyed) {				_destroyed = true;				_destroy();			}		}				/** @private		* destroyer operation method.		*/		protected function _destroy():void {			// override		}				/**		* Specifies a SoundObject's volume level, expressed by a number between 0 and 1.		* @see #mute		*/		public function get volume():Number {			return 0;		}		public function set volume($percent:Number):void {			// override		}				/**		* Specifies a SoundObject's mute status.		* SoundObjects will retain their current volume setting, even while muted.		* @see #volume		* @see #toggleMute()		*/		public function get mute():Boolean {			return false;		}		public function set mute($mute:Boolean):void {			// override		}				/**		* Toggles the SoundObject's current mute setting.		* Mute sounds will be made audible, and audible sounds will be silenced.		* @see #mute		*/		public function toggleMute():Boolean {			return false;		}				/**		* Specifies if playback is currently enabled on the SoundObject.		* This status is determined by the last call made to either the <code>play()</code> or <code>stop()</code> commands.		* The usage of this property varies between child and container objects.		* @see #play()		* @see #stop()		*/		public function get playing():Boolean { 			return _playing;		}				/**		* Plays the SoundObject, setting <code>playing</code> status to <code>true</code>.		* @see #playing		*/		public function play():void {			_playing = true;			// override		}				/**		* Stops the SoundObject, setting <code>playing</code> status to <code>false</code>.		* @see #playing		*/		public function stop():void {			_playing = false;			// override		}				/**		* Toggles the SoundObject's playback to the inverse of the current <code>playing</code> status.		* @see #playing		*/		public function togglePlayback():Boolean {			return false;		}	}}
/*** SoundObject: sound control framework for ActionScript3.* @author Greg MacWilliam* @version 1.0*//*** Licensed under the MIT License* * Copyright (c) 2009 Greg MacWilliam* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://code.google.com/p/sound-skin/* http://www.opensource.org/licenses/mit-license.php */package com.gmac.sound{	import flash.events.IEventDispatcher;		/**	* SoundObject is the base class for all objects within the SoundObject framework.	* SoundObject is an abstract base class, so should not be directly instantiated.	*/	public interface ISoundObject extends IEventDispatcher	{		/**		* Specifies a SoundObject's volume level, expressed by a number between 0 and 1.		* @see #mute		*/		function get volume():Number;		function set volume($percent:Number):void;				/**		* Specifies a SoundObject's mute status.		* SoundObjects will retain their current volume setting, even while muted.		* @see #volume		* @see #toggleMute()		*/		function get mute():Boolean;		function set mute($mute:Boolean):void;				/**		* Toggles the SoundObject's current mute setting.		* Mute sounds will be made audible, and audible sounds will be silenced.		* @see #mute		*/		function toggleMute():Boolean;				/**		* Specifies if playback is currently enabled on the SoundObject.		* This status is determined by the last call made to either the <code>play()</code> or <code>stop()</code> commands.		* The usage of this property varies between child and container objects.		* @see #play()		* @see #stop()		*/		function get playing():Boolean;				/**		* Plays the SoundObject, setting <code>playing</code> status to <code>true</code>.		* @see #playing		*/		function play():void;				/**		* Stops the SoundObject, setting <code>playing</code> status to <code>false</code>.		* @see #playing		*/		function stop():void;				/**		* Toggles the SoundObject's playback to the inverse of the current <code>playing</code> status.		* @see #playing		*/		function togglePlayback():Boolean;	}}
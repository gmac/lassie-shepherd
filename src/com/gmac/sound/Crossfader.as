/*** SoundObject: sound control framework for ActionScript3.* @author Greg MacWilliam* @version 1.0*//*** Licensed under the MIT License* * Copyright (c) 2009 Greg MacWilliam* * Permission is hereby granted, free of charge, to any person obtaining a copy of* this software and associated documentation files (the "Software"), to deal in* the Software without restriction, including without limitation the rights to* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of* the Software, and to permit persons to whom the Software is furnished to do so,* subject to the following conditions:* * The above copyright notice and this permission notice shall be included in all* copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS* FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR* COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER* IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.* * http://code.google.com/p/sound-skin/* http://www.opensource.org/licenses/mit-license.php */package com.gmac.sound{	import flash.media.Sound;		/**	* Crossfader is a SoundObjectContainer used for managing transitions between multiple sound clips.	* A Crossfader object is unique because it restricts its child capacily to only one active child at a time.	* Whenever a new child is added to the crossfader, any existing children are faded out while the new child is faded in.	*	* <p>Enable <code>garbageCollectionMode</code> to configure the Crossfader for automatic garbage collection.	* When <code>garbageCollectionMode</code> is <code>true</code>, child sounds will automatically be destroyed after they have been faded out.	* This feature comes in handy if you indend to create and drop sounds into the Crossfader without storing local references to them.</p>	*/	public class Crossfader extends SoundObjectContainer	{		/**		* Specifies the time in seconds (not milliseconds) of all new sound transitions managed by the container.		* Any existing transitions in effect when <code>transitionSeconds</code> is changed will continue playing at their current rate.		*/		public var transitionSeconds:Number = 3;				// private		private var _active:SoundChild;				/**		* Constructs a new SoundCrossfader object.		*/		public function Crossfader():void		{			super();		}			//-------------------------------------------------	// Container methods	//-------------------------------------------------				/**		* Gets the currently active sound clip.		* A sound crossfader can only have one active clip at a time;		* when a new clip is added to the crossfader, the existing active clip is faded out.		*/		public function get activeSound():SoundChild {			return _active;		}				/**		* @private		* Adds a new sound clip to the crossfader which replaces the currently active sound.		* The newly added clip is faded in while the former clip is faded out.		*/		override public function addChild($child:SoundChild):SoundChild		{			if ($child != null && $child.parent != null) {				// forcibly remove child from any existing parent,				// particularily important in the even that this object IS the parent.				$child.parent.removeChild($child);			}						// Add child to this container			$child = super.addChild($child);						if ($child != null) {				// Fade out the active sound.				fadeOut();								// fade in the new sound.				_active = $child;				_active.stop();				_active.reset();				_active.fadeIn(volume, transitionSeconds);				return $child;			}			return null;		}				/**		* @private		* Clear fade-out listeners and active references before proceeding with removals		*/		override public function removeChild($child:SoundChild):SoundChild		{			// clear any fade out listeners applied to the child.			$child.removeEventListener(SoundObjectEvent.SOUND_FADE, this._onFadeOutComplete);						// nullify active reference, if applicable.			if ($child == _active) {				_active = null;			}			return super.removeChild($child);		}				/**		* Fades out the currently active sound.		* If in <code>garbageCollectionMode</code>, the sound will be destroyed upon completion of fading out.		* @see #garbageCollectionMode		*/		public function fadeOut():void		{			if (_active != null) {				_active.addEventListener(SoundObjectEvent.SOUND_FADE, this._onFadeOutComplete);				_active.fadeOut(transitionSeconds);				_active = null;			}		}	//-------------------------------------------------	// Event handlers	//-------------------------------------------------				/**		* @private		* handler called after a sound has finished fading out.		*/		private function _onFadeOutComplete($event:SoundObjectEvent):void		{			// deactivate the faded out sound clip.			var $clip:SoundChild = $event.target as SoundChild;			removeChild($clip);			$clip.stop();						// destroy the completed sound clip if garbageCollectionMode is enabled.			if (garbageCollectionMode) $clip.destroy();		}	}}
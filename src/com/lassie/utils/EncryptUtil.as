package com.lassie.utils{	import com.hurlant.util.Base64;	import com.hurlant.crypto.symmetric.PKCS5;	import com.hurlant.crypto.symmetric.ECBMode;	import com.hurlant.crypto.symmetric.BlowFishKey;	import com.hurlant.crypto.symmetric.ICipher;	import com.hurlant.crypto.symmetric.IPad;	import flash.utils.ByteArray;		/**	* Utility for encrypting text using the Blowfish algorithm.	*/	final public class EncryptUtil	{		static public const LASSIE_KEY:String = "L@ss13Sh3ph3rd";				/**		* Encrypts a string.		* @param text  The text string to encrypt.		* @param key  A cipher key to encrypt the text with.		* @return The ecrypted text string, or null if an ecryption error occured.		*/		static public function encrypt($text:String, $key:String=LASSIE_KEY, $compression:Boolean=false):String		{			try			{				var $cipher:ICipher = _getCipher( $key );				var $output:ByteArray = new ByteArray();				$output.writeUTF($text);				if ($compression) $output.compress();								$cipher.encrypt( $output );				$cipher.dispose();				return Base64.encodeByteArray( $output );			}			catch ($error:Error)			{				trace("An encryption error occured.");			}			return null;		}				/**		* Decrypts an encrypted string.		* @param text  The text string to decrypt.		* @param key  The key used while originally encrypting the text.		* @return The decrypted text string, or null if a decryption error occured.		*/		static public function decrypt($text:String, $key:String=LASSIE_KEY, $compression:Boolean=false):String		{			try			{				var $cipher:ICipher = _getCipher( $key );				var $input:ByteArray = Base64.decodeToByteArray( $text );				$cipher.decrypt( $input );				$cipher.dispose();								if ($compression) $input.uncompress();				$input.position = 0;				return $input.readUTF();			}			catch ($error:Error)			{				trace("A decryption error occured.");			}			return null;		}				/** @private builds a Blowfish cipher algorithm. */		private static function _getCipher( $key:String ):ICipher {			var $pad:IPad = new PKCS5();			var $cipher:ICipher = new ECBMode( new BlowFishKey(Base64.decodeToByteArray( $key )), $pad );			$pad.setBlockSize( $cipher.getBlockSize() );			return $cipher;		}	}}
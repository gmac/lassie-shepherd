package com.lassie.utils{	import com.adobe.crypto.MD5;		final public class KeyUtil	{		/**		* Secures an XML structure with an branded data key.		*/		static public function secure($xml:XML):XML		{			$xml.@key = xmlKey($xml);			return $xml;		}				/**		* Validates the key of a branded XML structure.		*/		static public function validate($xml:XML):Boolean		{			return String($xml.@key) === xmlKey($xml.copy());		}				/**		* Gets the key of an XML strcuture.		*/		static public function xmlKey($xml:XML):String		{			$xml.@key = "";			var $hash:String = MD5.hash($xml.toXMLString());			var $tumble:Array = new Array();			var $sum:Number = 0;						for (var $j:int = 0; $j < $hash.length; $j++) {				var $char:String = $hash.slice($j, $j+1);				var $num:Number = parseInt($char);								if ($j % 2 == 0) $tumble.unshift($char);				else $tumble.push($char);								if (!isNaN($num)) $sum += $num;			}						$hash = $tumble.join("") + Math.floor($sum * Math.PI);			return MD5.hash($hash.toLowerCase()).toUpperCase();		}				/**		* Gets the key of an author name.		*/		static public function authorKey($value:String):String		{			// Create base hash			var $base:String = MD5.hash($value);			var $chars:Array = new Array();						// tumble hash order			for (var $j:int = 0; $j < $base.length; $j+=4) {				$chars.push($base.slice($j+1, $j+2));				$chars.push($base.slice($j+3, $j+4));				$chars.push($base.slice($j, $j+1));				$chars.push($base.slice($j+2, $j+3));			}						// rehash and reset			$base = MD5.hash($chars.join(""));			$chars = new Array();						// collecting alternating letter values			for ($j = 0; $j < $base.length; $j++) {				if ($j % 2 == 0) {					if ($j % 4 == 0) $chars.push($base.slice($j, $j+1));					else $chars.unshift($base.slice($j, $j+1));				}			}						// condense and capitalize			$base = $chars.join("").toUpperCase();			$chars = new Array();						// create dashed segment			for ($j = 0; $j < $base.length; $j+=4) {				$chars.push($base.slice($j, $j+4));			}						return $chars.join("-");		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Script;	import com.lassie.player.model.Room;	import com.lassie.player.events.DisplayEvent;	import com.lassie.utils.XmlUtil;	final internal class GameControl extends ProcessCommand	{		private var _positionId:String = "";		/**		* <game room="roomId:positionId" language="" actor="" response="" inventory="" fxVolume="" musicVolume="" voiceVolume="" voiceEnabled="" subtitleEnabled="" fullScreen=""/>		*/		public function GameControl():void {			super();		}		override public function toString():String {			return "[GameControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			// check if this setup will change the current room.			var $changeRoom:Boolean = (_sourceXML.@room != undefined);			// also check if this script has already been initialized by the player.			var $scriptInit:Boolean = XmlUtil.parseBoolean(_sourceXML.@_scriptInit);			if ($changeRoom && !$scriptInit)			{				// SCENARIO 1:				// Room is changing and script has not been initialized.				_sourceXML.@_scriptInit = "1";				_initRoomChange();			}			else			{				// SCENARIO 2:				// Room is not changing or else the script has been initialized.				_runGameSetup($changeRoom);			}		}		override public function skip():void {			_run();		}	//-------------------------------------------------	// Scenario 1 : initialize room change	//-------------------------------------------------		/**		* Method runs when the room is changing and the transition has not yet been configured.		* this method stacks a call to the current room's exit script and then re-runs this setup script.		*/		private function _initRoomChange():void		{			// Room will be changed and script has not yet been initialized...			// 1) Clear context, any item cursor, all queued scripts, and purge all other processes.			uiContext.clear();			uiCursor.clearItem();			uiSkip.enabled = false;			parentProcess.purgeQueue();			//SkipControl.reset();			Process.clear(parentProcess);			// 2) re-queue this script for a second run after room exit script has played.			parentProcess.addScript(_sourceXML, true);			// 3) check if current room's exit script should be skipped.			var $skipRoomExit:Boolean = XmlUtil.parseBoolean(_sourceXML.@skipRoomExit);			if (gameRoom != null && !$skipRoomExit) {				// 4) stack the current room's exit script at the front of the queue				var $room:Room = gameModel.currentRoomModel;				var $exit:Script = $room.getScript($room.exitScript);				if (!!$exit) parentProcess.addScript($exit.script, true);			}			// complete this script cycle.			_complete();		}	//-------------------------------------------------	// Scenario 2 : proceed with room change	//-------------------------------------------------		/**		* 2) Runs the actual setup process of all game settings.		* 2a) if the room is changing, the current room is cleared and script waits for the next room to load.		*/		private function _runGameSetup($changeRoom:Boolean):void		{			if ($changeRoom) {				// clear all process branches				// clear current room display				gameDisplay.clearRoom();			}			// set all game configuration attributes			if (_sourceXML.@language != undefined) gameController.language = _sourceXML.@language;			if (_sourceXML.@actor != undefined) gameModel.currentActor = _sourceXML.@actor;			if (_sourceXML.@response != undefined) gameModel.currentResponse = _sourceXML.@response;			if (_sourceXML.@inventory != undefined) gameModel.currentInventory = _sourceXML.@inventory;			if (!isNaN( parseInt(_sourceXML.@fxVolume) )) gameController.soundfxVolume = parseInt(_sourceXML.@fxVolume);			if (!isNaN( parseInt(_sourceXML.@soundtrackVolume) )) gameController.soundtrackVolume = parseInt(_sourceXML.@soundtrackVolume);			if (!isNaN( parseInt(_sourceXML.@voiceVolume) )) gameController.voiceVolume = parseInt(_sourceXML.@voiceVolume);			if (_sourceXML.@voiceEnabled != undefined) gameController.voiceEnabled = XmlUtil.parseBoolean(_sourceXML.@voiceEnabled);			if (_sourceXML.@subtitleEnabled != undefined) gameController.subtitleEnabled = XmlUtil.parseBoolean(_sourceXML.@subtitleEnabled);			if (_sourceXML.@fullScreenMode != undefined) gameController.fullScreenMode = _sourceXML.@fullScreenMode;			if ($changeRoom) {				// break out list of targets for roomId and positionId				var $targets:Array = (_sourceXML.@room.toString()+":").split(":");				var $roomId:String = $targets[0];				_positionId = $targets[1];				// set new room display				gameDisplay.addEventListener(DisplayEvent.ROOM_DISPLAY_READY, this._onRoomLoaded);				gameDisplay.setRoom($roomId, _positionId);			}			else {				_complete();			}		}		/**		* 2b) once a new room has finished loading, run its enter script.		*/		private function _onRoomLoaded($event:DisplayEvent):void		{			// cancel load listener for room completion.			gameDisplay.removeEventListener(DisplayEvent.ROOM_DISPLAY_READY, this._onRoomLoaded);			// run enter script			var $room:Room = gameModel.currentRoomModel;			var $enter:Script = $room.getScript($room.enterScript);			if (!!$enter) parentProcess.addScript($enter.script, true);			// complete command process			gameCache.autoSave( _positionId );			_complete();		}	}}
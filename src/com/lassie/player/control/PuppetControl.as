/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.core.IPuppetDisplay;	import com.lassie.utils.XmlUtil;	final internal class PuppetControl extends ProcessCommand	{		/**		* <puppet target="layerId" callAction="1" callItem="itemId" visualState="rest" turnView="1"/>		*/		public function PuppetControl():void {			super();		}		override public function toString():String {			return "[PuppetControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			if (!!gameRoom)			{				var $puppet:IPuppetDisplay = getRoomPuppet(_sourceXML.@target);				if (!!$puppet)				{					// Call a puppet interaction index.					if (XmlUtil.hasAttribute(_sourceXML, "callAction")) {						var $action:Number = parseInt(_sourceXML.@callAction);						if (!isNaN($action)) $puppet.callAction($action);					}					// Call a puppet item interaction.					if (XmlUtil.hasAttribute(_sourceXML, "callItemAction")) {						$puppet.callAction(-1, _sourceXML.@callItemAction);					}					// Sets a visual state.					if (XmlUtil.hasAttribute(_sourceXML, "visualState")) {						var $state:String = _sourceXML.@visualState.toString();						var $turnView:Number = _sourceXML.@turnView;						if (isNaN($turnView)) $turnView = -1;						switch($state) {							case KeyValues.REST: $puppet.setRestState( $turnView ); break;							case KeyValues.MOVE: $puppet.setMoveState( $turnView ); break;							case KeyValues.SPEAK: $puppet.setSpeakState( "", $turnView ); break;						}					}				}			}			_complete();		}	}}
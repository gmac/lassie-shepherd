/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Room;	import com.lassie.player.model.RoomLayer;	import com.lassie.utils.XmlUtil;	/**	* The LayerControl manages room layer settings.	* INSTANT.	*/	final internal class LayerControl extends ProcessCommand	{		static private var _editableFields:Object = { visible:true, omit:true, render:true };		/**		* <layer target="roomId:layerId" [param, param, param]/>		*/		public function LayerControl():void {			super();		}		override public function toString():String {			return "[LayerControl]";		}		override protected function _run():void		{			var $targets:Array = Targeting.parseTargetList(_sourceXML.@target, ":", 2);			var $room:Room = Targeting.getRoom( $targets[0] );			var $layer:RoomLayer = Targeting.getLayer( $targets[1], $room );			if (!!$layer)			{				// suspend layer redraw calls while processing attributes.				var $redraw:Boolean = $layer.redrawEnabled;				$layer.redrawEnabled = false;				// VALID LAYER				// apply "state" attribute				if (_sourceXML.@state != undefined)				{					// collect and remove state attribute.					var $state:String = _sourceXML.@state;					delete _sourceXML.@state;					// set next/prev/custom layer state					switch ($state) {						case KeyValues.NEXT: $layer.nextState(); break;						case KeyValues.PREV: $layer.prevState(); break;						default: $layer.state = $state; break;					}				}				// Apply all remaining attributes as properties of the layer model.				try {					// attempt to parse all allowed XML attributes into the model.					XmlUtil.parseAttributes($layer, _sourceXML.@*, LayerControl._editableFields);				}				catch($error:Error) {					// invalid layer attribute.					trace(this +" one or more attributes could not be applied to the target layer.");				}				// restore redraw status and update the model (if enabled).				$layer.redrawEnabled = $redraw;				if (XmlUtil.parseBoolean(_sourceXML.@update, true)) $layer.update();			}			else			{				// invalid layer.				trace(this +" layer target could not be resolved.");			}			// finish unless waiting for a complete event.			_complete();		}		//override public function stop():void {			// none.		//}		//override public function resume():void {			// none.		//}		override public function skip():void {			_run();		}	}}
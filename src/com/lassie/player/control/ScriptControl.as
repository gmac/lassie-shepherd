/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Script;	import com.lassie.player.model.Room;	import com.lassie.utils.XmlUtil;	final internal class ScriptControl extends ProcessCommand	{		/**		* <script global="scriptId" room="scriptId"/>		*/		public function ScriptControl():void		{			super();		}	//-------------------------------------------------	// Process methods	//-------------------------------------------------		override public function toString():String {			return "[ScriptControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			var $script:Script;			if (!!_sourceXML)			{				if (_sourceXML.@global != undefined)				{					// Global script					$script = gameModel.getScript(_sourceXML.@global);					_stackScript($script);				}				if (_sourceXML.@room != undefined)				{					// Room script					if (gameModel.currentRoomModel != null) {						// pull script from room model.						$script = gameModel.currentRoomModel.getScript(_sourceXML.@room);						_stackScript($script);					}					else {						// no room model was loaded to pull scripts from.						trace(this +" room scripts cannot be called without a room loaded first.");					}				}			}			_complete();		}		/**		* Stacks valid scripts into the parent Process queue.		*/		private function _stackScript($script:Script):void		{			// validate that a script record was resolved.			if (!!$script) {				// parameterize the script from the source XML input.				var $scriptXML:XML = $script.getParamScript(_sourceXML.@*);				// stack script into the parent process queue.				parentProcess.addScript($scriptXML, true);			}			else {				// no script was successfully resolved.				trace(this +" invalid script reference.");			}		}		override public function stop():void {			// no stop.		}		override public function resume():void {			// no resume.		}		override public function skip():void {			_run();		}	}}
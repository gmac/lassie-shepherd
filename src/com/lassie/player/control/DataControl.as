/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Cache;		/**	* DataControl manages game data loaded into the engine.	* This control can be used to unload models and purge saved-game data that is no longer needed.	* INSTANT.	*/	final internal class DataControl extends ProcessCommand	{		/**		* <data deleteRooms="docks" deleteVars="webb_mad" deleteVarPrefix="act2_"/>		*/		public function DataControl():void {			super();		}		override public function toString():String {			return "[DataControl]";		}			//-------------------------------------------------	// Control methods	//-------------------------------------------------			override protected function _run():void		{			// Unloads the models of the specified room Ids.			if (_sourceXML.@unloadRooms != undefined) {				_unloadRooms( _sourceXML.@unloadRooms.toString() );			}						// Unloads the models AND deletes all saved data for the specified room IDs.			if (_sourceXML.@deleteRooms != undefined) {				_unloadRooms( _sourceXML.@deleteRooms.toString(), true );			}						// Deletes all saved data for a specified list of cache vars.			if (_sourceXML.@deleteVars != undefined) {				_deleteSessionVars( _sourceXML.@deleteVars.toString() );			}						// Deletes all saved data for cache vars with the specified prefix.			if (_sourceXML.@deleteVarPrefix != undefined) {				_deleteSessionVarPrefix( _sourceXML.@deleteVarPrefix.toString() );			}						_complete();		}				/**		* Unloads a list of rooms from the game model.		* This will optionally clear all associated room data from the current save game.		*/		private function _unloadRooms($csv:String, $uncache:Boolean=false):void		{			var $list:Array = $csv.split(",");			var $cache:Cache = gameCache.getSession().getNamespace("rooms");			for each (var $id:String in $list) {				var $success:Boolean = gameModel.unloadRoom($id);				if ($uncache) $cache.deleteNamespace($id);			}		}				/**		* Deletes variables from the current save game data.		*/		private function _deleteSessionVars($csv:String):void		{			var $list:Array = $csv.split(",");			var $cache:Cache = gameCache.getSessionVars();			for each (var $field:String in $list) {				if ($cache.data.hasOwnProperty($field)) delete $cache.data[ $field ];			}		}				/**		* Deletes all variables prefixed by the provided string from the current save game data.		*/		private function _deleteSessionVarPrefix($prefix:String):void		{			var $cache:Cache = gameCache.getSessionVars();						for (var $field:String in $cache.data) {				if ($field.indexOf($prefix) == 0) delete $cache.data[ $field ];			}		}				override public function stop():void {			// none.		}				override public function resume():void {			// none.		}				override public function skip():void {			_run();		}	}}
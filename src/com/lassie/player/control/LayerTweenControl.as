/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.tween.TweenCore;	import com.lassie.player.tween.TweenPlayer;	import com.lassie.player.core.IRoomLayerDisplay;	import com.lassie.utils.XmlUtil;	import flash.geom.Rectangle;	import flash.geom.Point;	final internal class LayerTweenControl extends ProcessCommand	{		// private		private var _engine:TweenPlayer;		private var _tweens:Array;		private var _tweenPercent:Number = 0;		private var _orphan:Boolean = false;		/**		* <layerTween targets="_avatar,lift" to="0,0" by="0,0" waitForComplete="1"/>		*/		public function LayerTweenControl():void		{			super();			_tweens = new Array();		}		override public function destroy():void		{			if (!_orphan) {				// clear tween group component.				if (!!_engine) {					_engine.destroy();					_engine = null;				}				// clear all layer tweens				while (_tweens.length > 0) {					LayerTween(_tweens.shift()).destroy();				}				TweenCore.killTweensOf(this);			}			super.destroy();		}		override public function toString():String {			return "[LayerTweenControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			var $tweening:Boolean = false;			if (!!gameRoom)			{				// If a main room display has ben loaded:				var $layers:Array = new Array();				var $layer:IRoomLayerDisplay;				var $bounding:Rectangle;				if (_sourceXML.@targets != undefined) {					// resolve layer targets.					var $targets:Array = (_sourceXML.@targets).split(",");					// collect all layer references.					for each (var $id:String in $targets) {						$layer = getRoomLayer($id);						if (!!$layer) $layers.push($layer);					}					// find master bounding rectangle.					for each ($layer in $layers) {						var $rect:Rectangle = $layer.getRect(stage);						$bounding = (!!$bounding) ? $bounding.union($rect) : $rect;					}				}				// If a bounding rectangle was defined.				if (!!$bounding)				{					var $x:Number;					var $y:Number;					// move all layers TO a given location.					if (_sourceXML.@to != undefined)					{						var $to:Array = (_sourceXML.@to + ",").split(",");						var $scrollX:Number = gameRoom.scroll.scrollX;						var $scrollY:Number = gameRoom.scroll.scrollY;						$x = parseInt($to[0]);						$y = parseInt($to[1]);						if (isNaN($x)) $x = $bounding.x;						if (isNaN($y)) $y = $bounding.y;						var $target:Point = new Point($x - $scrollX, $y - $scrollY);						for each ($layer in $layers) {							// get layer's offset from the full bounding area.							var $offset:Point = $layer.position.subtract($bounding.topLeft);							$offset.x -= $scrollX;							$offset.y -= $scrollY;							// queue tween from layer's current position to the target adjusted by the offset.							_tweens.push( new LayerTween($layer, $layer.position.clone(), $target.add($offset)) );						}					}					// shift all layers BY a given offset.					if (_sourceXML.@by != undefined)					{						// define offset values						var $by:Array = (_sourceXML.@by + ",").split(",");						$x = parseInt($by[0]);						$y = parseInt($by[1]);						if (isNaN($x)) $x = 0;						if (isNaN($y)) $y = 0;						for each ($layer in $layers) {							// set target coordinates relative to layer's current position.							var $targetX:Number = $layer.position.x + $x;							var $targetY:Number = $layer.position.y + $y;							// queue layer tweens.							_tweens.push( new LayerTween($layer, $layer.position, new Point($targetX, $targetY)) );						}					}					// start animating tweens.					if (_tweens.length > 0)					{						var $params:Object = {tweenPercent:1, onComplete:this._onTweenComplete};						// get number of seconds for the tween.						var $seconds:Number = _sourceXML.@seconds;						if (isNaN($seconds)) $seconds = 2;						// set easing						var $ease:Function = TweenCore.parseEase(_sourceXML.@ease);						if ($ease != null) $params.ease = $ease; // << explicitly use "!= null" syntax for functions!						// create new tween to shift layers.						_engine = TweenCore.getTween(this, $seconds, $params);						$tweening = true;						// Abort process before calling complete,						// unless a parameter specifically tells not to wait for complete.						if (XmlUtil.parseBoolean(_sourceXML.@waitForComplete, true)) return;					}				}			}			_orphan = $tweening;			_complete();		}		/**		* Tweening property for TweenLite. Specifies the percentage of the tween completed.		*/		public function get tweenPercent():Number {			return _tweenPercent;		}		public function set tweenPercent($percent:Number):void {			_tweenPercent = $percent;			// update all tweens.			for each (var $tween:LayerTween in _tweens) {				$tween.setPercent( $percent );			}		}		/**		* Stops the tween.		*/		override public function stop():void {			if (!!_engine) _engine.pause();		}		/**		* Resumes the tween's playback.		*/		override public function resume():void {			if (!!_engine) _engine.resume();		}		/**		* Skips over the tween before it has been formally called.		*/		override protected function _skipBeforeCall():void {			_run();			_skipAfterCall();		}		/**		* Skips over the tween after it has been formally called.		*/		override protected function _skipAfterCall():void {			if (!!_engine) _engine.pause();			tweenPercent = 1;		}		/**		* Resolves the command after the tween completes.		*/		private function _onTweenComplete():void {			if (_orphan) {				_orphan = false;				destroy();			} else {				_complete();			}		}	}}import com.lassie.player.core.IRoomLayerDisplay;import flash.geom.Point;/*** LayerTween is a manager object used to store information on how to move a layer between two points.*/final internal class LayerTween{	private var _layer:IRoomLayerDisplay;	private var _start:Point;	private var _goal:Point;	/**	* Creates a new layer tween component.	*/	public function LayerTween($layer:IRoomLayerDisplay, $start:Point, $goal:Point):void {		_layer = $layer;		_start = $start;		_goal = $goal;	}	/**	* Destroys the LayerTween component by breaking all active memory references.	*/	public function destroy():void {		_layer = null;		_start = null;		_goal = null;	}	/**	* Interpolates a new position for the layer between its start and end goals.	*/	public function setPercent($percent:Number):void {		_layer.position = Point.interpolate(_goal, _start, $percent);	}}
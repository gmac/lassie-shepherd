/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.events.LassieEvent;	import com.lassie.utils.XmlUtil;	import com.lassie.player.LassiePlayer;	import flash.events.KeyboardEvent;		/**	* SkipControl registers a script which will run upon press of the TAB key.	* Upon pressing the TAB key, all processes will be stopped and the registered script will be processed.	* This control will be reset automatically every time the game room is changed.	*/	final internal class SequenceControl extends ProcessCommand	{		static private var _lockedUI:Boolean = false;				/**		* <sequence skip="1">		*	<!-- do stuff -->		* </sequence>		*/		public function SequenceControl():void {			super();		}	//-------------------------------------------------	// Process methods	//-------------------------------------------------			override public function toString():String {			return "[SequenceControl]";		}			//-------------------------------------------------	// Control methods	//-------------------------------------------------			/**		* Specifies if this skip node concludes a skipable sequence. 		*/		public function get breakPoint():Boolean {			return (_sourceXML.@_end != undefined);		}				override protected function _run():void		{			if (_sourceXML.children().length() > 0)			{				// START skipable sequence.				var $script:XML = new XML('<'+CommandName.GENERIC+'/>');				$script.appendChild( _sourceXML.children().copy() );				$script.appendChild( new XML('<'+CommandName.SEQUENCE+' _end="1"/>') );				parentProcess.addScript( $script, true );				_setSequence(true, XmlUtil.parseBoolean(_sourceXML.@skip, false));			}			else if (this.breakPoint)			{				// END skipable sequence.				_setSequence(false);			}						_complete();		}				override public function skip():void {			_run();		}				/**		* Toggles the locked status of the game during animation sequences.		*/		private function _setSequence($lock:Boolean, $skipable:Boolean=false):void		{			if (!SequenceControl._lockedUI && $lock)			{				// Enable lock				gameDisplay.mouseChildren = false;				uiCursor.setWaitStatus('seq', true);								if ($skipable) {					uiSkip.enabled = true;					stage.dispatchEvent(new LassieEvent(LassieEvent.SEQUENCE_START));				}			}			else if (SequenceControl._lockedUI && !$lock)			{				// Disable lock				gameDisplay.mouseChildren = true;				uiCursor.setWaitStatus('seq', false);				uiSkip.enabled = false;				stage.dispatchEvent(new LassieEvent(LassieEvent.SEQUENCE_END));			}						// store locked status as static member of the class.			SequenceControl._lockedUI = $lock;		}	}}
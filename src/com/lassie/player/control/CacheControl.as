/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Cache;		/**	* The CacheControl manages data stored within the game cache.	* INSTANT.	*/	final internal class CacheControl extends ProcessCommand	{		/**		* <cache field="fieldName" value="value" math="+1" append=",item" remove="item" normalizeBy=","/>		*/		public function CacheControl():void		{			super();		}		override public function toString():String {			return "[CacheControl]";		}			//-------------------------------------------------	// Control methods	//-------------------------------------------------			override protected function _run():void		{			var $cache:Cache = gameCache.getSessionVars();			var $fieldName:String = _sourceXML.@field;						// proceed if a valid field name was provided.			if ($fieldName != "")			{				// Sets or clears the field's value.				if (_sourceXML.@value != undefined)				{					var $value:String = _sourceXML.@value;										// test if value is empty.					if ($value != "") {						// set value within cache if value is not empty.						$cache.setValue($fieldName, $value);					}					else if ($cache.hasValue($fieldName)) {						// clear field from cache if value is empty.						$cache.clearValue($fieldName);					}				}								// get the source field value before proceeding with mutator operations.				var $source:String = $cache.getValue($fieldName) as String;				if (!$source) $source = "";				// Runs a math function on a numeric value				if (_sourceXML.@math != undefined) {					$cache.setValue($fieldName, _math($source, _sourceXML.@math));				}								// Appends text onto the current value.				if (_sourceXML.@append != undefined) {					$cache.setValue($fieldName, _append($source, _sourceXML.@append));				}								// Inserts an element into a comma-seperated list				if (_sourceXML.@add != undefined) {					$cache.setValue($fieldName, _add($source, _sourceXML.@add));				}								// Inserts an element into a comma-seperated list				if (_sourceXML.@sort != undefined) {					$cache.setValue($fieldName, _sort($source, _sourceXML.@sort));				}								// Removes first instance of the specified element from a comma-seperated list				if (_sourceXML.@remove != undefined) {					$cache.setValue($fieldName, _remove($source, _sourceXML.@remove));				}			}						_complete();		}				override public function stop():void {			// none.		}				override public function resume():void {			// none.		}				override public function skip():void {			_run();		}			//-------------------------------------------------	// Operations	//-------------------------------------------------				/**		* Performs a math operation on the values.		*/		private function _math($source:String, $mathOp:String):String		{			// parse factors and operator			var $base:Number = parseInt($source);			if (isNaN($base) || !isFinite($base)) $base = 0; 			var $modifier:Number = parseInt($mathOp.substr(1));			var $operator:String = $mathOp.substr(0, 1);			// if both base and modifier values are valid numbers,			// run the specified math operation on values.			if (!isNaN($base) && !isNaN($modifier))			{				switch($operator) {					case "+": $source = ($base + $modifier).toString(); break;					case "-": $source = ($base - $modifier).toString(); break;					case "*": $source = ($base * $modifier).toString(); break;					case "/": $source = ($base / $modifier).toString(); break;				}			}			return $source;		}				/**		* Appends new value onto the existing value.		*/		private function _append($source:String, $append:String):String {			return $source + $append;		}				/**		* Inserts the new value as an element of a comma-seperated list.		*/		private function _add($source:String, $add:String):String {			return ($source == "") ? $add : $source +","+ $add;		}				/**		* Inserts a new value as an element of a comma-seperated list, then sorts the list.		*/		private function _sort($source:String, $sort:String):String {			if ($source == "") $source = $sort;			else if ($sort != "") $source += ("," + $sort);			return $source.split(",").sort().join(",");		}				/**		* Removes a value from a comma-seperated list.		*/		private function _remove($source:String, $remove:String):String		{			var $list:Array = $source.split(",");			var $valid:Array = new Array();						// collect all non-empty, non-removal values from the raw list.			for each (var $item:String in $list) {				if ($item != "" && $item != $remove) $valid.push($item);			}						return $valid.join(",");		}	}}
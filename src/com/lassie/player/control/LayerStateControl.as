/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.model.Room;	import com.lassie.player.model.RoomLayer;	import com.lassie.player.model.RoomLayerState;	import com.lassie.utils.XmlUtil;	final internal class LayerStateControl extends ProcessCommand	{		static private var _editableFields:Object = {			x:true,			y:true,			mapX:true,			mapY:true,			imageEnabled:true,			imageX:true,			imageY:true,			imageScaleX:true,			imageScaleY:true,			frameLabel:true,			hoverState:true,			restState:true,			moveState:true,			speakState:true,			blendMode:true,			alpha:true,			cacheAsBitmap:true,			hitEnabled:true,			hitX:true,			hitY:true,			hitWidth:true,			hitHeight:true,			hitShape:true,			rotation:true,			floatEnabled:true,			mouseEnabled:true,			hoverCursor:true,			subtitleColor:true,			tweenRate:true,			clickAction:true,			turnView:true,			scaleFilter:true,			colorFilter:true,			rateFilter:true,			blurFilter:true,			scrollEnabled:true,			parallaxAxis:true,			scrollMarginLeft:true,			scrollMarginRight:true,			scrollMarginTop:true,			scrollMarginBottom:true		}		/**		* <layerState target="roomId:layerId:stateId" [param, param, param]/>		*/		public function LayerStateControl():void {			super();		}		override public function toString():String {			return "[LayerStateControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			var $targets:Array = Targeting.parseTargetList(_sourceXML.@target, ":", 3);			var $room:Room = Targeting.getRoom( $targets[0] );			var $layer:RoomLayer = Targeting.getLayer( $targets[1], $room );			var $state:RoomLayerState = Targeting.getLayerState( $targets[2], $layer );			if (!!$state) {				var $redraw:Boolean = $layer.redrawEnabled;				$layer.redrawEnabled = false;				try {					// attempt to parse all allowed XML attributes into the model.					XmlUtil.parseAttributes($state, _sourceXML.@*, LayerStateControl._editableFields);				}				catch ($error:Error) {					// invalid state attribute encountered.					trace(this +" one or more attributes could not be applied to the target layer state.");				}				// Update state title using language-specific child nodes.				if (_sourceXML.@title != undefined) {					var $title:XML = <title/>;					$title.appendChild(_sourceXML.children());					$state.title = $title.toXMLString();				}				$layer.redrawEnabled = $redraw;				// call update on the layer state unless specifically disabled.				if (XmlUtil.parseBoolean(_sourceXML.@update, true)) {					$layer.update();				}			}			// finish unless waiting for a complete event.			_complete();		}		//override public function stop():void {			// no stop.		//}		//override public function resume():void {			// no resume.		//}		override public function skip():void {			_run();		}	}}
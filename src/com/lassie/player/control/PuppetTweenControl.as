/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.player.room.PuppetTween;	import com.lassie.player.core.IPuppetDisplay;	import com.lassie.player.events.PuppetEvent;	import com.lassie.utils.XmlUtil;	final internal class PuppetTweenControl extends ProcessCommand	{		// private		private var _tween:PuppetTween;		private var _puppet:IPuppetDisplay;		private var _tweenListener:Boolean = false;		public function PuppetTweenControl():void		{			super();		}	//-------------------------------------------------	// Process methods	//-------------------------------------------------		override public function destroy():void		{			_enableTweenListener(false);			_tween = null;			_puppet = null;		}		/**		* <puppetTween target="_avatar" type="moveThenTurn" to="point:0,0 / position:id / layer:id" toView="4" followGrid="0/1" waitForComplete="0/1"/>		*/		override internal function parse($xml:XML):void		{			super.parse($xml);			_tween = PuppetTween.parseXML($xml);			_puppet = getRoomPuppet($xml.@target);		}		override public function toString():String {			return "[PuppetTweenControl]";		}	//-------------------------------------------------	// Control methods	//-------------------------------------------------		override protected function _run():void		{			if (_tween.valid && !!_puppet)			{				var $wait:Boolean = XmlUtil.parseBoolean( _sourceXML.@waitForComplete, true );				if ($wait) _enableTweenListener(true);				_puppet.tween(_tween);				if ($wait) return;			}			_complete();		}		override public function stop():void {			if (!!_puppet) _puppet.stopTween();		}		override public function resume():void {			if (!!_puppet) _puppet.resumeTween();		}		override protected function _skipBeforeCall():void		{			if (_tween.valid && !!_puppet) {				// queue tween and then skip.				_puppet.tween(_tween);				_puppet.skipTween();			}		}		override protected function _skipAfterCall():void		{			if (!!_puppet) {				// skip existing tween.				_puppet.skipTween();			}		}	//-------------------------------------------------	// Command methods	//-------------------------------------------------		/**		* Enables / disables the puppet tween listener.		*/		private function _enableTweenListener($enable:Boolean):void		{			if (!!_puppet)			{				if ($enable && !_tweenListener) {					_puppet.addEventListener(PuppetEvent.TWEEN_COMPLETE, this._onTweenComplete);				}				else if (!$enable && _tweenListener) {					_puppet.removeEventListener(PuppetEvent.TWEEN_COMPLETE, this._onTweenComplete);				}			}			_tweenListener = $enable;		}		/**		* Tween is complete.		*/		private function _onTweenComplete($event:PuppetEvent):void		{			_enableTweenListener(false);			_complete();		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.utils.XmlUtil;		/**	* The KeyboardControl the enabled status and script triggers assigned to keystrokes.	* INSTANT.	*/	final internal class KeyboardControl extends ProcessCommand	{		/**		* <keyboard disableKey="x" enableKey="x" addKeyScript="x" removeKeyScript="x">		*   <childScript/>		* </setKeyboard>		*/		public function KeyboardControl():void		{			super();		}				override public function toString():String {			return "[KeyboardControl]";		}				override protected function _run():void		{			// sets the enabled status of the keyboard as a whole.			if (_sourceXML.@enabled != undefined) {				uiKeyboard.enabled = XmlUtil.parseBoolean( _sourceXML.@enabled, true );			}						// add key scripts			if (_sourceXML.@addKeyScript != undefined && _sourceXML.children()[0] != undefined) {				var $xml:XML = new XML('<'+ CommandName.GENERIC +'/>');				$xml.appendChild(_sourceXML.children().copy());				var $branch:Boolean = XmlUtil.parseBoolean( _sourceXML.@branch, false );				uiKeyboard.addKeyScript(_sourceXML.@addKeyScript, $xml, $branch);			}						// remove key scripts			if (_sourceXML.@removeKeyScript != undefined) {				uiKeyboard.removeKeyScript(_sourceXML.@removeKeyScript);			}						// disable keys			if (_sourceXML.@disableKey != undefined) {				uiKeyboard.setKeyEnabled(_sourceXML.@disableKey, false);			}						// enable keys			if (_sourceXML.@enableKey != undefined) {				uiKeyboard.setKeyEnabled(_sourceXML.@enableKey, true);			}						// signal completion.			_complete();		}				override public function stop():void {			// none.		}				override public function resume():void {			// none.		}				override public function skip():void {			_run();		}	}}
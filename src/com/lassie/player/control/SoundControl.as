/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.control{	import com.lassie.utils.XmlUtil;	import flash.events.IEventDispatcher;	import flash.events.Event;	import flash.media.SoundMixer;		final internal class SoundControl extends ProcessCommand	{		/**		* <sound effect="lib/package.swf:MySoundClass" waitForComplete="1"/>		*/		public function SoundControl():void		{			super();		}	//-------------------------------------------------	// Process methods	//-------------------------------------------------			override public function toString():String {			return "[SoundControl]";		}			//-------------------------------------------------	// Control methods	//-------------------------------------------------			override protected function _run():void		{			// set new soundtrack channels.			_setSoundtrack();						// play instance sound effect.			if (_sourceXML.@effect != undefined)			{				// get sound player				var $player:IEventDispatcher = gameSound.playSound(_sourceXML.@effect);								// if waiting for complete, and player was created...				if (XmlUtil.parseBoolean(_sourceXML.@waitForComplete) && !!$player) {					// listen for complete and return.					$player.addEventListener(Event.COMPLETE, this._onSoundComplete, false, 0, true);					return;				}			}						// set audio playback status.			_setPlayback();			_complete();		}		override public function skip():void {			_setSoundtrack();			_setPlayback();			_complete();		}				/**		* Sets new audio into soundtrack channels.		*/		private function _setSoundtrack():void		{			if (_sourceXML.@soundtrack1 != undefined) gameSound.channel1 = _sourceXML.@soundtrack1;			if (_sourceXML.@soundtrack2 != undefined) gameSound.channel2 = _sourceXML.@soundtrack2;		}				/**		* Sets audio playback status.		*/		private function _setPlayback():void		{			if (_sourceXML.@playback != undefined) {				switch ( String(_sourceXML.@playback) ) {					case KeyValues.PLAY: gameSound.play(); break;					case KeyValues.STOP: gameSound.stop(); break;					case KeyValues.TOGGLE: gameSound.toggle(); break;					case KeyValues.STOP_ALL: SoundMixer.stopAll(); break;				}			}		}				private function _onSoundComplete($event:Event):void		{			$event.target.removeEventListener(Event.COMPLETE, this._onSoundComplete);			_complete();		}	}}
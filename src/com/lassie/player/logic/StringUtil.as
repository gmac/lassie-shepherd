/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.logic{	public class StringUtil	{		/**		* Removes all whitespace from a string.		* @param source Full text from which to remove whitespace.		* @param enclosureToken String delimiter token.		* @return Source string with all spaces removed.		*/		static public function removeWhitespace($src:String, $enclosureToken:String="'"):String		{			var $pointer:int = 0;			var $enclosed:Boolean = false;			var $scrub:String = "";						while ($pointer < $src.length)			{				var $char:String = $src.substr($pointer, 1);								if (!($char == " " && !$enclosed)) {					$scrub += $char;				}								if ($char == $enclosureToken) $enclosed = !$enclosed;				$pointer++;			}			return $scrub;		}						/**		* Gets the first instance of a text enclosure as defined by an open and close value.		* Nested enclosures are returned with the token.		* @param haystack Full text in which to search for a token.		* @param opener Open delimiter.		* @param closer Close delimiter.		* @param sindex Starting index from which to search for token.		* @return Token string including opener and closers, or null if no token was found.		*/		static public function getEnclosureToken($haystack:String, $opener:String, $closer:String, $sindex:int=0):String		{			var o:int = $opener.length;			var c:int = $closer.length;			var no:int = $haystack.indexOf($opener, $sindex); // next open			var nc:int = $haystack.indexOf($closer, no+o); // next close			var so:int = no; // starting open						if (!(no < 0 || nc <= no))			{				// skip over nested chunk delimiters				var $nested:Boolean = true;								while ($nested)				{					no = $haystack.indexOf($opener, no+o); // next open										if (no > -1 && no < nc) {						nc = $haystack.indexOf($closer, nc+c); // next close					} else {						$nested = false;					}				}				return $haystack.slice(so, nc+c);			}			return null;		}				/**		* Trims token values from the left and right sides of a string.		* @param src Source string to trim text from.		* @param left The token to trim from the left, if present.		* @param right The token to trim from the right, if present.		* @return Modified string value with left and right tokens removed.		*/		static public function trim($src:String, $left:String="", $right:String=""):String		{			if ($src.substr(0, $left.length) == $left) $src = $src.slice($left.length);			if ($src.substr(-$right.length, $right.length) == $right) $src = $src.slice(0, -$right.length);			return $src;		}	}}
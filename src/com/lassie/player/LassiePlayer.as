/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player{	import com.lassie.player.core.*;	import com.lassie.player.model.GameModel;	import com.lassie.player.model.GameCache;	import com.lassie.player.control.GameController;	import com.lassie.player.display.GameDisplay;	import com.lassie.player.display.GameDebugger;	import com.lassie.player.display.BaseSprite;	import com.lassie.player.media.GameLibrary;	import com.lassie.player.media.GameSound;	import com.lassie.player.system.GameSystem;	import com.lassie.player.ui.KeyboardInput;	import com.lassie.player.events.SystemEvent;	import com.lassie.player.events.ModelEvent;	import com.lassie.player.events.DisplayEvent;	import flash.display.Stage;	import flash.display.StageQuality;	import flash.display.StageAlign;	import flash.display.StageScaleMode;		public class LassiePlayer extends BaseSprite	{		// Component references		static public var stage:Stage;		static public var root:LassiePlayer;		static public var system:GameSystem = GameSystem.getInstance();		static public var cache:GameCache = GameCache.getInstance();		static public var model:GameModel = GameModel.getInstance();		static public var display:GameDisplay = GameDisplay.getInstance();		static public var library:GameLibrary = GameLibrary.getInstance();		static public var controller:GameController = GameController.getInstance();		static public var sound:GameSound = GameSound.getInstance();		static public var debug:GameDebugger = GameDebugger.getInstance();				// ui references		static public var actionSelector:IActionSelector;		static public var context:IContext;		static public var cursor:ICursor;		static public var curtain:ICurtain;		static public var gameMenu:IGameMenu;		static public var inventory:IInventory;		static public var keyboard:KeyboardInput;		static public var layouts:ILayoutManager;		static public var skip:ISkipButton;		static public var subtitle:ISubtitle;		static public var treeMenu:ITreeMenu;		static public var room:IRoomDisplay;				/**		* Creates the LassiePlayer application.		*/		public function LassiePlayer():void {			super();		}				/**		* @private		* First initalization after being added to the stage.		*/		protected override function _finit():void		{			// configure stage display			//stage.scaleMode = StageScaleMode.NO_SCALE;			//stage.align = StageAlign.TOP_LEFT;			stage.quality = StageQuality.BEST;			stage.stageFocusRect = false;			// load system			LassiePlayer.root = this;			LassiePlayer.stage = stage;			LassiePlayer.keyboard = new KeyboardInput(stage);			LassiePlayer.system.addEventListener(SystemEvent.SYSTEM_READY, this._onSystemReady, false, 0, true);			LassiePlayer.system.load( loaderInfo, parent.loaderInfo );		}				/**		* @private		* Called after the system finishes loading.		* >> Ready to move on to loading the model.		*/		private function _onSystemReady($event:SystemEvent):void		{			// load model			LassiePlayer.system.removeEventListener(SystemEvent.SYSTEM_READY, this._onSystemReady);			LassiePlayer.model.addEventListener(ModelEvent.MODEL_READY, this._onModelReady, false, 0, true);			LassiePlayer.model.load();		}				/**		* @private		* Called after the model finishes loading.		* >> Ready to move on to loading the display.		*/		private function _onModelReady($event:ModelEvent):void		{			_initWindow();						// load display			LassiePlayer.model.removeEventListener(ModelEvent.MODEL_READY, this._onModelReady);			LassiePlayer.display.addEventListener(DisplayEvent.DISPLAY_READY, this._onDisplayReady, false, 0, true);			LassiePlayer.display.load();		}				/**		* @private		* Called after the display finishes loading.		* >> Ready to move on to launching the controller.		*/		private function _onDisplayReady($event:DisplayEvent):void		{			addChild(LassiePlayer.display);			LassiePlayer.display.removeEventListener(DisplayEvent.DISPLAY_READY, this._onDisplayReady);			LassiePlayer.sound.load();			LassiePlayer.controller.load();		}				/**		* @private		* Configures the game window once the application is loaded and ready.		* This method is only used by AIR implementations.		*/		protected function _initWindow():void {			// override in subclass.		}	}}
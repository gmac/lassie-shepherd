/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.system{	import com.lassie.player.core.IGameSystem;	import com.lassie.player.core.LPDispatcher;	import com.lassie.player.events.SystemEvent;	import com.lassie.player.media.GameLibrary;	import com.lassie.player.model.XMLLoader;	import com.lassie.player.fileio.FileIO;	import com.lassie.player.tween.TweenCore;	import com.lassie.player.ui.*;	import flash.ui.Keyboard;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.StageDisplayState;	import flash.display.LoaderInfo;	import flash.system.Capabilities;	import flash.events.IOErrorEvent;	import flash.events.Event;	final public class GameSystem extends LPDispatcher implements IGameSystem	{	//-------------------------------------	// Static configuration (for AIR)	//-------------------------------------		static private var _quit:Quit;		static private var _fullScreenDisplayState:String = StageDisplayState.FULL_SCREEN;		/**		* Calls the system's quit methodology.		*/		static public function quit():void {			if (_quit == null) _quit = new Quit();			_quit.call();		}		/**		* Provides a back door for an AIR application to set a custom quit method.		*/		static public function setQuit($method:Quit):void {			_quit = $method;		}		/**		* Provides a back door for an AIR application to set a custom fullscreen key.		*/		static public function setFullScreenDisplayState($state:String):void {			_fullScreenDisplayState = $state;		}	//-------------------------------------	// Instance configuration	//-------------------------------------		private const LASSIE_VERSION:String = "v2.0";		private var _loaderInfo:LoaderInfo;		private var _systemParams:Object;		private var _skipKey:uint = Keyboard.TAB;		private var _diaSkipKey:uint = Keyboard.SPACE;		private var _diaMouseSkip:Boolean = false;		private var _staticWindow:Boolean = false;		private var _legalText:String = "";		/** @private singleton class constructor */		public function GameSystem($enforcer:GameSystemEnforcer):void {			super();		}		/** @private singleton instance reference */		static private var _instance:GameSystem;		/**		* Gets the singleton instance reference.		*/		static public function getInstance():GameSystem {			if (_instance == null) _instance = new GameSystem(new GameSystemEnforcer());			return _instance;		}		/**		* Loads the system object.		* @param $info The loaderInfo object of the main LassiePlayer root.		* @param $parentInfo The loaderInfo object from the LassiePlayer parent (shell or stage).		*/		public function load( $info:LoaderInfo, $parentInfo:LoaderInfo ):void		{			_loaderInfo = $info;			_systemParams = new Object();			var $param:String;			// copy all loaderInfo params over to the system params object.			for ($param in _loaderInfo.parameters) {				_systemParams[ $param ] = _loaderInfo.parameters[ $param ];			}			if (!!$parentInfo) {				for ($param in $parentInfo.parameters) {					_systemParams[ $param ] = $parentInfo.parameters[ $param ];				}			}			// load system configuration XML.			var $xml:String = getParam("systemXML", "xml/system.xml");			var $loader:URLLoader = new URLLoader();			$loader.addEventListener(Event.COMPLETE, this._onLoadParams);			$loader.addEventListener(IOErrorEvent.IO_ERROR, this._onLoadParams);			$loader.load( new URLRequest($xml) );		}			/** @private called upon completing the load of system params XML. */			private function _onLoadParams($event:Event):void			{				// clean up load operation.				var $loader:URLLoader = $event.target as URLLoader;				$loader.removeEventListener(Event.COMPLETE, this._onLoadParams);				$loader.removeEventListener(IOErrorEvent.IO_ERROR, this._onLoadParams);				if (!!$loader.data) {					// if the loader has data, parse it as XML.					var $params:XML = new XML( $loader.data );					// copy all loaded XML params over to system parameters.					for each (var $param:XML in $params.children()) {						if (!_systemParams.hasOwnProperty( $param.name() ))							_systemParams[ $param.name() ] = $param.toString();					}				}				// configure the system with loaded parameters.				_configureSystem();			}		/**		* Configures the system with all loaded parameters.		*/		private function _configureSystem():void		{			FileIO.method = getParam( SystemParams.FILE_IO_TYPE );			FileIO.servicePath = getParam( SystemParams.FILE_IO_SERVICE );			TweenCore.engine = getParam( SystemParams.TWEEN_ENGINE );			ActionSelect.mode = getParam( SystemParams.ACTION_MODE );			// window size / language settings.			_staticWindow = (getParam( SystemParams.STATIC_WINDOW ) == "1");			_legalText = getParam( SystemParams.LEGAL_TEXT );			SystemParams.languageKey = getParam( SystemParams.LANGUAGE );			// ASSET LOAD PATHS			var $mediaBaseURL:String = getParam( SystemParams.MEDIA_BASE_URL );			var $xmlBaseURL:String = getParam( SystemParams.XML_BASE_URL );			// sanitize media load path.			if ($mediaBaseURL != "") {				// trim off any remaining "/lib/" references.				if ($mediaBaseURL.substr(-3, 3) == "lib") $mediaBaseURL = $mediaBaseURL.substring(0, -3);				else if ($mediaBaseURL.substr(-4, 4) == "lib/") $mediaBaseURL = $mediaBaseURL.substring(0, -4);				// confirm trailing "/" on the end of the base path.				if ($mediaBaseURL.substr(-1, 1) != "/") $mediaBaseURL += "/";				GameLibrary.baseURL = $mediaBaseURL;			}			// sanitize xml load path.			if ($xmlBaseURL != "") {				// trim off any remaining "/xml/" references.				if ($xmlBaseURL.substr(-3, 3) == "xml") $xmlBaseURL = $xmlBaseURL.substring(0, -3);				else if ($xmlBaseURL.substr(-4, 4) == "xml/") $xmlBaseURL = $xmlBaseURL.substring(0, -4);				// confirm trailing "/" on the end of the base path.				if ($xmlBaseURL.substr(-1, 1) != "/") $xmlBaseURL += "/";				XMLLoader.baseURL = $xmlBaseURL;			}			// specify if the engine should allow XML requests to cache.			XMLLoader.allowCaching = (getParam( SystemParams.ALLOW_XML_CACHE ) == "1");			// ACTION SELECTOR			var $actionShow:Number = parseFloat( getParam( SystemParams.ACTION_SHOW_TIME ) );			var $actionHide:Number = parseFloat( getParam( SystemParams.ACTION_HIDE_TIME ) );			if (!isNaN($actionShow)) SystemParams.actionShowSeconds = $actionShow;			if (!isNaN($actionHide)) SystemParams.actionHideSeconds = $actionHide;			// CONTEXT			var $contextOff:Number = parseInt( getParam( SystemParams.CONTEXT_OFF_COLOR ) );			var $contextOn:Number = parseInt( getParam( SystemParams.CONTEXT_ON_COLOR ) );			if (!isNaN($contextOff)) SystemParams.contextOffColor = $contextOff;			if (!isNaN($contextOn)) SystemParams.contextOnColor = $contextOn;			// CURTAIN			var $curtainColor:Number = parseInt( getParam( SystemParams.CURTAIN_COLOR ) );			if (!isNaN($curtainColor)) SystemParams.curtainColor = $curtainColor;			// INVENTORY			var $invenShow:Number = parseFloat( getParam( SystemParams.INVENTORY_SHOW_TIME ) );			var $invenHide:Number = parseFloat( getParam( SystemParams.INVENTORY_HIDE_TIME ) );			if (!isNaN($invenShow)) SystemParams.inventoryShowSeconds = $invenShow;			if (!isNaN($invenHide)) SystemParams.inventoryHideSeconds = $invenHide;			SystemParams.inventoryDisplayMode = getParam( SystemParams.INVENTORY_MODE );			SystemParams.inventoryTouchEnabled = (getParam( SystemParams.INVENTORY_TOUCH ) == "1");			// SUBTITLE			var $subtitleShow:Number = parseFloat( getParam( SystemParams.SUBTITLE_SHOW_TIME ) );			var $subtitleHide:Number = parseFloat( getParam( SystemParams.SUBTITLE_HIDE_TIME ) );			var $subtitlePadding:Number = parseInt( getParam( SystemParams.SUBTITLE_PADDING ) );			var $subtitleOverhead:Number = parseInt( getParam( SystemParams.SUBTITLE_OVERHEAD ) );			if (!isNaN($subtitleShow)) SystemParams.subtitleShowSeconds = $subtitleShow;			if (!isNaN($subtitleHide)) SystemParams.subtitleHideSeconds = $subtitleHide;			if (!isNaN($subtitlePadding)) SystemParams.subtitlePadding = $subtitlePadding;			if (!isNaN($subtitleOverhead)) SystemParams.subtitleOverhead = $subtitleOverhead;			// TREE MENU			var $treeOff:Number = parseInt( getParam( SystemParams.TREE_OFF_COLOR ) );			var $treeOn:Number = parseInt( getParam( SystemParams.TREE_ON_COLOR ) );			if (!isNaN($treeOff)) SystemParams.treeOffColor = $treeOff;			if (!isNaN($treeOn)) SystemParams.treeOnColor = $treeOn;			// GAME MENU			SystemParams.menuSubtitleOption = (getParam( SystemParams.MENU_SUBTITLE ) == "1");			SystemParams.menuSubtitleSpeedOption = (getParam( SystemParams.MENU_SUBTITLE_SPEED ) == "1");			SystemParams.menuVoiceOption = (getParam( SystemParams.MENU_VOICE ) == "1");			SystemParams.menuFullScreenOption = (getParam( SystemParams.MENU_FULLSCREEN ) == "1");			SystemParams.menuGraphicsQualityOption = (getParam( SystemParams.MENU_GRAPHICS_QUALITY ) == "1");			SystemParams.menuHelpEnabled = (getParam( SystemParams.MENU_HELP ) == "1");			SystemParams.menuQuitEnabled = (getParam( SystemParams.MENU_QUIT ) == "1");			SystemParams.menuHelpText = getParam( SystemParams.MENU_HELP_TEXT );			// KEYBOARD			var $skip:String = getParam( SystemParams.SKIP_CONTROL );			var $diaSkip:String = getParam( SystemParams.SKIP_DIALOGUE_CONTROL );			// configure the skip control key.			if ( KeyboardInput.hasKeyValue($skip) ) {				_skipKey = KeyboardInput.getKeyCode($skip);			}			// configure the dialogue skip control.			if ( $diaSkip == "mouse" ) {				_diaSkipKey = _skipKey;				_diaMouseSkip = true;			}			else if ( KeyboardInput.hasKeyValue($diaSkip) ) {				_diaSkipKey = KeyboardInput.getKeyCode($diaSkip);				_diaMouseSkip = false;			}			// notify that the system is configured and ready for use.			dispatchEvent(new SystemEvent( SystemEvent.SYSTEM_READY ));		}		/**		* Specifies if the player is running locally or on a web server.		*/		public function get localHost():Boolean {			return (_loaderInfo.loaderURL.indexOf("file:") == 0);		}		/**		* Specifies the Lassie Player version.		*/		public function get lassieVersion():String {			return LASSIE_VERSION;		}		/**		* Tests if a SWF embed parameter by the given name exists.		*/		public function hasParam($param:String):Boolean {			return _systemParams.hasOwnProperty($param);		}		/**		* Gets a SWF embed parameter.		*/		public function getParam($param:String, $defaultValue:String=""):String {			if (hasParam($param)) return _systemParams[ $param ];			return $defaultValue;		}		/**		* Specifies if the content window is allowed to automatically resize to game dimensions.		* When set to TRUE, the window will remain fixed (static) and will NOT dynamically resize to match content dimensions.		* Also when TRUE, the stage will display with SHOW_ALL scale mode so that content is fitted to the window.		* When set to FALSE, the Flash window will dynamically resize its parent HTML container to its game dimensions.		* Also when FLASE, the stage will display in NO_SCALE display mode so that content displays at default size within the window.		*/		public function get staticWindow():Boolean {			return _staticWindow;		}		/**		* Specifies if the game environment allows full screen display (based on Flash player type).		*/		public function get fullScreenEnabled():Boolean {			switch (Capabilities.playerType) {				case PlayerType.STAND_ALONE: return true;				case PlayerType.DESKTOP: return true;				case PlayerType.EXTERNAL: return false;				case PlayerType.PLUG_IN: return true;				case PlayerType.ACTIVE_X: return true;			}			return false;		}		/**		* Specifies if the game environment allows "SHOW_ALL" stage scale mode when displaying full screen (based on Flash player type).		*/		public function get showAllEnabled():Boolean {			switch (Capabilities.playerType) {				case PlayerType.STAND_ALONE: return true;				case PlayerType.DESKTOP: return true;				case PlayerType.EXTERNAL: return false;				case PlayerType.PLUG_IN: return _staticWindow;				case PlayerType.ACTIVE_X: return false;			}			return false;		}		/**		* Specifies the display state setting to use for full-screen mode.		* This value is set to a custom value when publishing for Adobe AIR.		*/		public function get fullScreenDisplayState():String {			return GameSystem._fullScreenDisplayState;		}		/**		* Specifies if the game application is quitable (based on Flash player type).		*/		public function get quitEnabled():Boolean {			switch (Capabilities.playerType) {				case PlayerType.STAND_ALONE: return true;				case PlayerType.DESKTOP: return true;				case PlayerType.EXTERNAL: return false;				case PlayerType.PLUG_IN: return false;				case PlayerType.ACTIVE_X: return false;			}			return false;		}		/**		* Quits the game application if running within a quitable environment.		*/		public function quit():void {			if (quitEnabled) GameSystem.quit();		}		/**		* Specifies the key code used to trigger sequence skipping.		*/		public function get skipKeyCode():uint {			return _skipKey;		}		/**		* Specifies the key code used to trigger individual dialogue skipping.		*/		public function get diaSkipKeyCode():uint {			return _diaSkipKey;		}		/**		* Specifies if mouse clicks be used to skip individual dialogue lines.		*/		public function get diaMouseSkip():Boolean {			return _diaMouseSkip;		}		/**		* Specifies a block of legal text to display before the first application launch.		*/		public function get legalText():String {			return _legalText;		}	}}final internal class GameSystemEnforcer {}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	final public class DialogueTree extends DataModel	{		// private		private var _tiersByKey:Object;		private var _tiersById:Object;		private var _topicsByKey:Object;		private var _topicsById:Object;		private var _parentRoom:Room;				/**		* DialogueTree is the master container object for a dialogue tree. A DialogueTree has two sub-structures:		*  - Topics (DialogueTreeTopic). A topic is a public structure containing script, a list of dialogue elements, and tree navigation pointers.		*  - Tiers (DialogueTreeTier). A tier in an internal structure used to manage a collection of topics.		*		* A DialogueTree's primary purpose is to manage access to individual topics and/or groups of topics (tiers) within the tree.		* The main Lassie Player tree system will query a DialogueTree object to access topic objects as needed.		*/		public function DialogueTree($id:String, $room:Room):void		{			super($id);			_parentRoom = $room;			_tiersByKey = new Object();			_tiersById = new Object();			_topicsByKey = new Object();			_topicsById = new Object();		}			//-------------------------------------------------	// Overrides	//-------------------------------------------------				override public function destroy():void		{			// clear tier key references			for (var j:String in _tiersByKey) {				DialogueTreeTier(_tiersByKey[j]).destroy();				delete _tiersByKey[j];			}			// clear tier id references			for (j in _tiersById) {				delete _tiersById[j];			}			// clear topic key references			for (j in _topicsByKey) {				DialogueTreeTopic(_topicsByKey[j]).destroy();				delete _topicsByKey[j];			}			// clear topic id references			for (j in _topicsById) {				delete _topicsById[j];			}			// destroy libs			_tiersByKey = null;			_tiersById = null;			_topicsByKey = null;			_topicsById = null;			_parentRoom = null;		}				override internal function parse($xml:XML):void		{			// loop through and build all tiers			for each (var $tierXml:XML in $xml.tier)			{				var $tier:DialogueTreeTier = new DialogueTreeTier($tierXml.@key, $tierXml.@id);								// for each tier, loop through and build all topics				for each (var $topicXml:XML in $tierXml.topic)				{					// get topic: will pull from any existing models.					var $topic:DialogueTreeTopic = getTopicById($topicXml.@id);					$topic.parse($topicXml);					$tier.topics.push($topic);					_topicsByKey[$tier.key +"_"+ $topic.key] = $topic;				}								_tiersByKey[$tier.key] = $tier;				if ($tier.id != "") _tiersById[$tier.id] = $tier;			}		}				override public function toString():String {			return "[DialogueTree] id: "+ id;		}			//-------------------------------------------------	// Read-only properties	//-------------------------------------------------			public function get parentRoom():Room {			return _parentRoom;		}			//-------------------------------------------------	// Model methods	//-------------------------------------------------			/**		* Specifies if the specified topic key exists within the tree.		*/		public function containsTopicKey($key:String):Boolean {			return _topicsByKey.hasOwnProperty($key);		}				/**		* Gets a topic by its address key.		*/		public function getTopicByKey($key:String):DialogueTreeTopic {			if (containsTopicKey($key)) return _topicsByKey[$key];			return null;		}				/**		* Specifies if the specified topic Id exists within the tree.		*/		public function containsTopicId($id:String):Boolean {			return _topicsById.hasOwnProperty($id);		}				/**		* Gets a conversation topic by Id, or creates a topic with the specified Id if it does not exist.		*/		public function getTopicById($id:String, $create:Boolean=true):DialogueTreeTopic		{			if (containsTopicId($id))			{				return _topicsById[$id] as DialogueTreeTopic;			}			else if ($create)			{				var $topic:DialogueTreeTopic = new DialogueTreeTopic($id, this);				// only store valid Ids in the topic look-up table.				if ($topic.id != "") _topicsById[$topic.id] = $topic;				return $topic;			}			return null;		}				/**		* Specifies if the specified tier key exists within the tree.		*/		public function containsTierKey($key:String):Boolean {			return _tiersByKey.hasOwnProperty($key);		}				/**		* Looks up a tier's address key.		* @param tierId The ID of the tier to look up.		* @param defaultKey The default value to return if the specified tier ID does not exist (uses "r" by default, which is always the root key).		* @return Returns the specified tier's address key, if the ID was found. Otherwise, the default key is returned.		*/		public function getTierKey($tierId:String, $defaultKey:String="r"):String		{			if (_tiersById.hasOwnProperty($tierId)) {				return DialogueTreeTier(_tiersById[$tierId]).key;			}			return $defaultKey;		}				/**		* Gets a list of topics in the specified tier.		*/		public function getTier($tierKey:String):Array		{			if (_tiersByKey.hasOwnProperty($tierKey)) {				return DialogueTreeTier(_tiersByKey[$tierKey]).topics;			}			return new Array();		}	}}/*** @private* DialogueTreeTier organizes DialogueTreeTopic objects into menu groupings.* This container is for internal use only, used to key and Id topic lists.* External objects will just work with arrays of DialogueTreeTopic objects.*/final internal class DialogueTreeTier{	// public	public var topics:Array;		// private	private var _key:String="";	private var _id:String="";		public function DialogueTreeTier($key:String, $id:String):void	{		_key = $key;		_id = $id;		topics = new Array();	}		public function destroy():void {		topics = null;	}		public function get key():String {		return _key;	}		public function get id():String {		return _id;	}}
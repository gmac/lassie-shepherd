/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import flash.geom.Point;	import com.lassie.player.geom.FilterPole;		final public class Position extends DataModel	{		private var _x:int=0;		private var _y:int=0;		private var _turn:int=4;		private var _script:XML = <script/>;		private var _filter:FilterPole;				public function Position($id:String):void {			super($id);		}			//-------------------------------------------------	// Overrides	//-------------------------------------------------		override internal function parse($xml:XML):void		{			_x = $xml.@x;			_y = $xml.@y;			_turn = $xml.@turn;			_filter = new FilterPole(x, y, $xml);						if ($xml.script != undefined) {				_script = XML($xml.script);			}		}				override public function toString():String {			return "[Position] id: "+id+", x: "+x+", y: "+y;		}			//-------------------------------------------------	// Read-only properties	//-------------------------------------------------			/**		* Specifies the X-coordinate of the position.		*/		public function get x():int {			return _x;		}				/**		* Specifies the Y-coordinate of the position.		*/		public function get y():int {			return _y;		}				/**		* Specifies a turn view (1-8) at which to display an actor starting at this position.		*/		public function get turnView():int {			return _turn;		}				/**		* Specifies the position's associated XML script.		*/		public function get script():XML {			return _script;		}				/**		* Specifies if the position's script has commands to run.		*/		public function get hasScript():Boolean {			return _script.children().length() > 0;		}				/**		* Specifies the filter data associated with this position.		*/		public function get filter():FilterPole {			return _filter;		}				/**		* Specifies the position as a Flash-native Point object.		*/		public function get point():Point {			return new Point(_x, _y);		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import flash.geom.Point;	final public class Dialogue extends DataModel	{		/**		* Static method for creating dialogue objects from a foreign XML source.		* This method is used on XML coming from outside the Lassie-naive data model.		* XML will be validated before allowing new dialouge to be created.		*/		static public function create($xml:XML):Dialogue		{			if ($xml.name() == "dia" && $xml.children().length() > 0) {				var $dia:Dialogue = new Dialogue();				$dia.parse($xml);				return $dia;			}			return null;		}		/**		* Specifies a custom point at which to place the subtitle.		* If this value is null, the subtitle will be placed relative to the target layer display.		*/		public var position:Point;		// public		private var _puppet:String = "";		private var _frame:String = "";		private var _sound:String = "";		private var _subtitle:XML;		private var _position:Point;		private var _color:uint = 0xFFFFFF;		public function Dialogue($puppet:String="", $frame:String="", $sound:String="", $subtitle:XML=null, $color:uint=0xFFFFFF, $position:Point=null):void		{			super("");			_puppet = $puppet;			_frame = $frame;			_sound = $sound;			_subtitle = $subtitle;			_color = $color;			position = $position;		}		override internal function parse($xml:XML):void		{			_puppet = $xml.@puppet;			_frame = $xml.@frame;			_sound = $xml.@sound;			_color = $xml.@color;			_subtitle = new XML('<dia>' + $xml.children().toXMLString() + '</dia>');			parsePosition( $xml.@plot.toString() );		}		override public function toString():String {			return "[Dialogue] puppet: "+ puppet +", text: "+ subtitle;		}		/**		* Parses a string into subtitle XML.		*/		public function parseSubtitle($text:String):void		{			if ($text.indexOf('<') != 0) $text = '<'+ DataModel.languageKey +'>' + $text + '</'+ DataModel.languageKey +'>';			if ($text.indexOf('<dia>') != 0) $text = '<dia>' + $text + '</dia>';			_subtitle = new XML( $text );		}		/**		* Parses a coordinate string ("150,100") into a point.		*/		public function parsePosition($point:*):void		{			if ($point is Point) {				// recieved a point object.				position = $point;			}			else if ($point is String) {				// recieved a string description.				var $coords:Array = ($point + ",").split(",");				var $x:Number = parseInt( $coords[0] );				var $y:Number = parseInt( $coords[1] );				if (!isNaN($x) && !isNaN($y)) position = new Point($x, $y);			}		}	//-------------------------------------------------	// Read-only properties	//-------------------------------------------------		/**		* Returns the puppet layer to target with this dialogue.		*/		public function get puppet():String {			return _puppet;		}		/**		* Returns the puppet animation frame to use during this dialogue.		*/		public function get frame():String {			return _frame;		}		/**		* Returns the sound asset address of the dialogue's voice recording.		*/		public function get sound():String {			return _sound;		}		/**		* Gets the language-specific subtitle text.		*/		public function get subtitle():String {			return _selectLanguage(_subtitle);		}		/**		* Specifies the color of the subtitle display.		*/		public function get color():uint {			return _color;		}	//-------------------------------------------------	// Model methods	//-------------------------------------------------		/**		* Creates a new Dialogue object with current properties		*/		public function clone():Dialogue {			return new Dialogue(puppet, frame, sound, _subtitle.copy(), _color, position);		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import com.lassie.utils.XmlUtil;	final public class InventoryCollection extends DataModel	{		private const CONTENTS:String = "contents";		private const HISTORY:String = "history";		// private		private var _hoverStyle:String = "";		private var _hoverColor:uint = 0x000000;		private var _dialogueOverItem:Boolean = true;		private var _defaultContents:Array;		private var _defaultHistory:Object;		private var _contents:Array;		private var _history:Object;		public function InventoryCollection($id:String):void {			super($id);		}	//-------------------------------------------------	// Overrides	//-------------------------------------------------		override public function destroy():void {			cacheEnabled = false;		}		override public function refresh():void		{			_cache = gameCache.getSession().getNamespace("inventory").getNamespace(id);			_contents = _cache.pull(CONTENTS, defaultContents);			_history = _cache.pull(HISTORY, defaultHistory);		}		override internal function parse($xml:XML):void		{			_hoverStyle = $xml.@hoverStyle;			_hoverColor = $xml.@hoverColor;			_dialogueOverItem = XmlUtil.parseBoolean($xml.@diaOverItem, true);			_defaultContents = ($xml.@items != "") ? ($xml.@items).split(",") : new Array();			_defaultHistory = new Object();			// build default content history table.			for each (var $itemId:String in _defaultContents)			{				if (!_defaultHistory.hasOwnProperty($itemId)) {					_defaultHistory[ $itemId ] = 1;				} else {					_defaultHistory[ $itemId ]++;				}			}			// enable cache to trigger refresh.			cacheEnabled = true;		}		override public function toString():String {			return "[InventoryCollection] id: "+ id +", items: ("+ defaultContents +")";		}	//-------------------------------------------------	// Read-only properties	//-------------------------------------------------		/**		* Specifies if dialogue subtitles pertainting to inventory items should display over the inventory item in question.		*/		public function get dialogueOverItem():Boolean {			return _dialogueOverItem;		}		/**		* Specifies the hover style of the inventory item (outline versus color tint).		*/		public function get hoverStyle():String {			return _hoverStyle;		}		/**		* Specifies the color of the item hover style.		*/		public function get hoverColor():uint {			return _hoverColor;		}		/**		* Specifies an array of default item Id's for this collection.		*/		public function get defaultContents():Array {			return _defaultContents;		}		/**		* Specifies the default history configuration.		*/		public function get defaultHistory():Object {			return _defaultHistory;		}		/**		* Specifies an array of item Id's currently contained within this collection.		*/		public function get contents():Array {			return _contents;		}		/**		* Specifies an object with keys for all item Id's that have been placed into this inventory.		* An item key persists within the history even if it has been removed from the inventory.		* The value assigned to each item key is the number of instances of that items that have been added.		*/		public function get history():Object {			return _history;		}	//-------------------------------------------------	// Model methods	//-------------------------------------------------		/**		* Tests if an item Id is contained within the current contents.		*/		public function contains($itemId:String):Boolean {			return _contents.indexOf($itemId) > -1;		}		/**		* Tests if an item Id is contained within the content history.		*/		public function containsInHistory($itemId:String):Boolean {			return _history.hasOwnProperty( $itemId );		}		/**		* Counts the number of instances of a specific item within the contents array.		*/		public function numInstances($itemId:String):int {			var $count:int = 0;			for each (var $id:String in _contents) if ($id == $itemId) $count++;			return $count;		}		/**		* Adds a comma-sperated list of item Id's to the inventory.		* [adds items at an optional index position]		*/		public function addItems($items:String, $index:int=-1, $contentLimit:int=-1, $historyLimit:int=-1):void		{			// parse items into an array			$items = $items.split(" ").join("");			var $list:Array = $items.split(",");			var $add:Array = new Array();			// weed out bad item references and existing items (when preventing repitition).			while ($list.length > 0) {				var $itemId:String = $list.shift();				var $allow:Boolean = gameModel.hasItem($itemId);				// limit based on number of content instances.				if ($allow && $contentLimit > 0) {					$allow = (numInstances( $itemId ) < $contentLimit);				}				// limit based on number of history instances.				if ($allow && $historyLimit > 0) {					if ( containsInHistory($itemId) ) $allow = (_history[ $itemId ] < $historyLimit);				}				// register addition if passed all item validation.				if ($allow) {					$add.push( $itemId );					// log item instance count within the collection history.					if (!_history.hasOwnProperty( $itemId )) _history[ $itemId ] = 1;					else _history[ $itemId ]++;				}			}			if ($index >= 0 && $index < _contents.length) {				// add items at specified index if within range of the list.				_contents = contents.slice(0, $index).concat($add, contents.slice($index));			}			else {				// otherwise, add items on to the end of the list.				_contents = _contents.concat($add);			}			// update cache and display			_cache.setValue(CONTENTS, contents);			_cache.setValue(HISTORY, history);			update();		}		/**		* Removes each element within a comma-seperated list of item Id's.		*/		public function removeItems($items:String):void		{			// parse items into an array			$items = $items.split(" ").join("");			var $list:Array = $items.split(",");			// attempt to remove each item from the contents list			for each (var $j:String in $list)			{				var $index:int = _contents.indexOf($j);				if ($index >= 0) _contents.splice($index, 1);			}			// update cache and display			_cache.setValue(id, contents);			update();		}		/**		* Removes all instances of each of the comma-seperated item Id's.		*/		public function removeEachOfItems($items:String):void		{			// parse items into an array			$items = $items.split(" ").join("");			var $list:Array = $items.split(",");			// attempt to remove all of each item from contents			for each (var $itemId:String in $list)			{				// get index of first item instance				var $index:int = _contents.indexOf($itemId);				// loop while inventory contains item				while ($index > -1) {					_contents.splice($index, 1);					$index = _contents.indexOf($itemId);				}			}			// update cache and display			_cache.setValue(id, contents);			update();		}		/**		* Removes all item Id's from the content list.		*/		public function removeAllItems():void		{			while (_contents.length > 0) _contents.shift();			_cache.setValue(id, contents);			update();		}		/**		* Replaces the first instance of a specific item Id with a comma-seperated list of replacements.		*/		public function replaceItemWith($removeId:String, $replacements:String, $addRegardless:Boolean=true):void		{			var $index:int = _contents.indexOf($removeId);			var $hasItem:Boolean = ($index > -1);			if ($hasItem) _contents.splice($index, 1);			if ($hasItem || $addRegardless) addItems($replacements, $index);		}		/**		* Builds the list of items contained within this inventory.		*/		public function getItemsList():Array		{			var $currentItems:Array = new Array();			for (var $j:int=_contents.length-1; $j >= 0; $j--)			{				var $id:String = _contents[$j];				var $item:InventoryItem = gameModel.getItem($id);				if ($item != null) {					// item exists: add it to the items list.					$currentItems.push($item);				}				else {					// item does not exist: clear its reference.					_contents.splice($j, 1);				}			}			// reverse items array becasue they were added backwards.			$currentItems.reverse();			return $currentItems;		}	}}
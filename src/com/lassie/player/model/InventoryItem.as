/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import com.lassie.utils.XmlUtil;		final public class InventoryItem extends DataModel	{		// private		private var _title:XML;		private var _asset:String="";		private var _frame:String="";		private var _hover:String="";		private var _cacheAsBitmap:Boolean = true;		private var _autoHit:Boolean = true;		private var _actions:ActionList;				public function InventoryItem($id:String):void		{			super($id);			_actions = new ActionList();		}			//-------------------------------------------------	// Overrides	//-------------------------------------------------			override public function destroy():void		{			_actions.destroy();			_actions = null;			_title = null;		}				override internal function parse($xml:XML):void		{			_title = XML($xml.title);			_asset = $xml.@asset;			_frame = $xml.@frame;			_hover = $xml.@hover;			_cacheAsBitmap = XmlUtil.parseBoolean($xml.@bitmap, true);			_autoHit = XmlUtil.parseBoolean($xml.@hit, true);			_actions.parse($xml);		}				override public function toString():String {			return "[InventoryItem] id: "+ id;		}			//-------------------------------------------------	// Read-only properties	//-------------------------------------------------			/**		* Specifies the language-specific display title of the inventory item.		*/		public function get title():String {			return _selectLanguage(_title);		}				/**		* Specifies the library address of the item's image asset.		*/		public function get asset():String {			return _asset;		}				/**		* Specifies the image's default frame label.		*/		public function get frameLabel():String {			return _frame;		}				/**		* Specifies the image's hover frame label.		* If this value is empty, then a default hover treatment (outline/tint) will be applied to the item on rollover.		*/		public function get hoverFrameLabel():String {			return _hover;		}				/**		* Specifies if the item display should be cached as a bitmap.		* This setting should be enabled for all non-animating item displays.		*/		public function get cacheAsBitmap():Boolean {			return _cacheAsBitmap;		}				/**		* Specifies if a hit area should automatically be generated for the item using the bounding rectangle of the image display.		*/		public function get autoHitArea():Boolean {			return _autoHit;		}				/**		* Provides reference to the item's interaction list.		*/		public function get actions():ActionList {			return _actions;		}				/**		* Provides reference to the item's default interaction.		*/		public function get defaultAction():Action {			return _actions.getAction( "_default" );		}				/**		* Gets the actionable properties applied to the item.		* TODO: wire this up to data!		*/		public function get actionProps():XML {			return null;		}	}}
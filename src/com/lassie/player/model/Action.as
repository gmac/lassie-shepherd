/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import com.lassie.player.control.CommandName;	import com.lassie.utils.XmlUtil;	import flash.geom.Point;		/**	* An <code>Action</code> object maintains collections of dialogue and script that can be called in response to game interactions.	* @author Greg MacWilliam	*/	public class Action extends DataModel	{		/** @private */		private var _index:int=0;		private var _title:XML;		private var _script:XML;		private var _sourceXML:XML;		private var _dialogue:Array;		private var _params:XML;		/**		* Creates a new Action model		* @param id The identifier name of this action		* @param index The index of this action within its parent <code>ActionList</code>		*/		public function Action($id:String="", $index:int=0):void		{			super($id);			_index = $index;			_dialogue = new Array();		}			//-------------------------------------------------	// Overrides	//-------------------------------------------------				override public function destroy():void		{			_title = null;			_script = null;			_dialogue = null;		}				override internal function parse($xml:XML):void		{			_title = XML($xml.title);			_script = XML($xml.script).copy();			_sourceXML = $xml;						// collect and clear any included params node.			if (_script.hasOwnProperty("params")) {				_params = XML(_script.params);				delete _script.params;			}						for each (var $diaXml:XML in $xml.dialog.dia)			{				var $dia:Dialogue = new Dialogue();				$dia.parse($diaXml);				addDialogue($dia);			}		}				override public function toString():String {			return "[Action] id: "+ id +", title: "+ title +", dia: "+ numDialogue;		}			//-------------------------------------------------	// Read-only properties	//-------------------------------------------------				/**		* Gets the language-specific title of the action.		*/		public function get title():String {			return _selectLanguage(_title);		}				/**		* Gets the action's XML script.		*/		public function get script():XML {			return (_script != null) ? _script : <script/>;		}				/**		* Gets the action's index within its parent <code>ActionList</code>		*/		public function get index():int {			return _index;		}			//-------------------------------------------------	// Model methods	//-------------------------------------------------				/**		* Clones this action as a new <code>Action</code> object.		*/		public function clone():Action		{			var $action:Action = new Action(id, index);						if (_sourceXML != null)			{				// if source XML exists,				// parse a new copy of the action.				$action.parse(_sourceXML.copy());			}			else			{				// otherwise, manually transfer over dialogue and script.				for each (var $dia:Dialogue in _dialogue) {					$action.addDialogue($dia);				}				$action.addScript(_script.copy());			}			return $action;		}				/**		* Adds a <code>Dialogue</code> object to the action's dialogue queue.		* @param dialogue A <code>Dialogue</code> object to add to the queue.		*/		public function addDialogue($dia:Dialogue):void {			_dialogue.push($dia);		}				/**		* Specifies the number of items in the dialouge queue.		*/		public function get numDialogue():int {			return _dialogue.length;		}				/**		* Gets a duplicate of the action's dialogue queue.		*/		public function getDialogueQueue():Array {			return _dialogue.slice();		}				/**		* Gets a random item from the dialogue queue.		*/		public function getRandomDialogue():Dialogue		{			if (_dialogue.length > 0) {				return _dialogue[ Math.round((_dialogue.length-1) * Math.random()) ] as Dialogue;			}			return null;		}				/**		* Sets a screen position on all dialogue items within the queue.		*/		public function setDialoguePosition($point:Point):void {			for each (var $dia:Dialogue in _dialogue) $dia.position = $point;		}				/**		* Populates the action with a dialogue item from the active default response set.		* @param responseId The ID of a custom response set use. By default, the action will populate from its corresponding response set.		* @param forcePlayback If <code>true</code>, a <code>playDialogue</code> command will be inserted into the action's script.		*/		public function populateDefaultResponse($responseSetId:String=null, $forcePlayback:Boolean=false):void		{			// If there is no dialogue within the action			if (numDialogue < 1)			{				// ADD DEFAULT DIALOGUE								if ($responseSetId == null) {					// if no default response was provided, use action Id.					$responseSetId = id;				}								var $provider:ActionList = gameModel.currentResponseModel;				var $response:Action;				var $dialogue:Dialogue;								if (!!$provider) {					// get corresponding response action.					$response = $provider.getAction($responseSetId);				}				if (!!$response) {					// pull a random line of dialogue.					$dialogue = $response.getRandomDialogue();				}								if (!!$dialogue) {					// clone random dialogue into this action.					addDialogue($dialogue.clone());				}								// ADD DIALOGUE XML SCRIPT								if (numDialogue > 0 && $forcePlayback && !hasScript(CommandName.DIALOGUE)) {					// create a script container if no script currently exists.					if (_script == null) _script = <script/>;					// add the script to the front of the current script.					addScript(new XML('<'+ CommandName.DIALOGUE +' play="*"/>'), true);				}			}		}		/**		* Adds an XML snippit into the action's XML script.		* @param script The XML snippit to add into the action's script.		* @param stack If <code>true</code>, the XML snippit is prepended onto any existing script. Otherwise, the snippit is appended to the end.		*/		public function addScript($scriptXml:XML, $stack:Boolean=false):void		{			if (_script == null) _script = $scriptXml;			else if ($stack) _script.prependChild($scriptXml);			else _script.appendChild($scriptXml);		}				/**		* Tests if there is at least one instance of the specified command node present in the actions's script XML.		* @param commandName The name of the command node to check for.		* @return <code>true</code> if at least one instance of the specified command node is present.		*/		public function hasScript($commandName:String):Boolean		{			if (_script == null) return false;			else if (_script.name() == $commandName) return true;			else if (_script[$commandName] != undefined) return true;			return false;		}				/**		* Applies a walk-to action that moves the avatar into position before running the script.		* @param walkToXml The "walk-to" XML script to add.		* @param isRepeatCall Specifies if this is the second sequential call of the action (double-click triggered).		*/		public function setWalkTo($walkToXml:XML, $isRepeatCall:Boolean=false):void		{			var $allowWalk:Boolean = true;			var $allowExit:Boolean = true;			if (!!_params) {				// ASSESS SCRIPT PARAMS				// Script params may override default walk-to behaviors.				$allowWalk = (_params.@walkTo != "none");				$allowExit = XmlUtil.parseBoolean( _params.@quickExit, true );			}						// CONFIGURE QUICK EXIT			// if exit is allowed by params,			// and this is the second action call,			// and the script is defined			if ($allowExit && $isRepeatCall && !!_script)			{				var $exit:XML;								// look through all <game> nodes for an exit.				// logic-based room changes with multiple room forks should be avoided,				// or else "quickExit" should be disabled within the script params.				for each (var $command:XML in _script.game) {					if ($command.@room != undefined) $exit = $command;				}								// if an exit was found, set that as the new script and exit.				if (!!$exit) {					_script = $exit;					return;				}			}						// ADD WALK-TO SCRIPT.			if ($allowWalk) addScript( $walkToXml, true );		}	}}
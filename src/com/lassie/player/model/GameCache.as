/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.model{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.display.StageQuality;	import com.lassie.external.LPFullScreenMode;	import com.lassie.player.core.IGameCache;	import com.lassie.player.events.ModelEvent;	import com.lassie.player.events.FileIOEvent;	import com.lassie.player.fileio.FileIO;	import com.lassie.utils.ObjectUtil;	final public class GameCache extends EventDispatcher implements IGameCache	{		// constant values		private const DATA_SLOTS:int = 25;		private const AUTO_SAVE_INDEX:int = 25;		private const AUTO_SAVE_POSITION:String = "__position";		// application profile settings		private var _gameId:String;		private var _game:FileIO;		private var _saveRoot:String;		private var _gameData:Object;		private var _sessionIndex:int=-1;	//---------------------------------------	// Singleton instance	//---------------------------------------		/**		* @private		* Creates a new instance of the GameCache. Singlton enforcer pattern is utilized.		*/		public function GameCache($enforcer:CacheEnforcer):void		{			super();			_gameData = new Object();		}		/** @priate singleton class instance */		static private var _instance:GameCache;		/** gets the singleton class instance. */		static public function getInstance():GameCache {			if (_instance == null) _instance = new GameCache(new CacheEnforcer());			return _instance;		}	//---------------------------------------	// Application profile methods	//---------------------------------------		/**		* Loads an application profile.		* An application profile contains all global settings for a game,		* along with a list of all saved game names.		* @param app The identifier of the game application to load.		*/		public function load($appId:String):void		{			_gameId = $appId;			_game = FileIO.create( "lassie-"+ _gameId );			_game.addEventListener(FileIOEvent.LOAD_COMPLETE, this._onCacheReady);			_game.load();		}			/** @private called upon completion of the FileIO object loading game data. */			private function _onCacheReady($event:Event):void			{				_game.removeEventListener(FileIOEvent.LOAD_COMPLETE, this._onCacheReady);				_saveRoot = _game.uri + "-save";				// define settings for a newly created profile.				if (_game.data.id == undefined) {					_game.data.id = _gameId;					//_game.data.fs = false;					_game.data.fsmode = LPFullScreenMode.OFF;					_game.data.gq = StageQuality.BEST;					_game.data.games = new Array();					_game.save();				}				// fill the saved game array with blank slots.				while (_game.data.games.length < DATA_SLOTS) {					_game.data.games.push("");				}				// notify of cache load completion.				dispatchEvent(new ModelEvent(ModelEvent.CACHE_READY));			}		/**		* Clears the saved games list.		*/		public function reset():void {			_game.clear();		}		/**		* Returns the current session's slot index, or -1 if no session has been launched.		*/		public function get sessionIndex():int {			return _sessionIndex;		}		/**		* Gets a list of all saved games within the active application profile.		*/		public function get savedGamesList():Array {			return _game.data.games;		}		/**		* Specifies the stage quality used in the application display.		*/		public function get graphicsQuality():String {			var $quality:String = _game.data.gq;			if ($quality == StageQuality.BEST || $quality == StageQuality.MEDIUM) return $quality;			return StageQuality.BEST;		}		public function set graphicsQuality($quality:String):void {			_game.data.gq = $quality;			_game.save();		}		/**		* Specifies if the application should run as full screen.		*/		public function get fullScreenMode():String {			var $mode:String = _game.data.fsmode;			if (LPFullScreenMode.validate($mode)) return $mode;			return LPFullScreenMode.OFF;		}		public function set fullScreenMode($mode:String):void {			_game.data.fsmode = $mode;			_game.save();		}		/**		* Specifies the user's acceptance status of the provided legal copy.		*/		public function get hasAcceptedLegal():Boolean {			if (_game.data.legal) return true;			return false;		}		public function set hasAcceptedLegal($accept:Boolean):void {			_game.data.legal = $accept;			_game.save();		}		/**		* Specifies the user's last set language preference.		*/		public function get languagePref():String {			return _game.data.lang || "";		}		public function set languagePref($lang:String):void {		  if (_game.data.lang != $lang) {			  _game.data.lang = $lang;			  _game.save();		  }		}	//---------------------------------------	// New game	//---------------------------------------		/**		* Creates a new game session.		* @param index Specifies the data slot to load. By default, an application has 10 data slots.		* @param newName Specifies a name for the slot.		*/		public function newData():void		{			/*if ($index >= 0 && $index < DATA_SLOTS)			{				// reset data in the specified data slot.				var $io:FileIO = FileIO.create( _saveRoot + $index );				$io.addEventListener(FileIOEvent.SAVE_COMPLETE, this._onNewComplete);				$io.index = $index;				$io.name = $newName;				$io.save();			}*/			_gameData = new Object();			dispatchEvent(new ModelEvent(ModelEvent.CACHE_REFRESH));			dispatchEvent(new ModelEvent(ModelEvent.NEW_GAME_COMPLETE));		}			/** @private called upon completion of FileIO saving out new game data. */			/*private function _onNewComplete($event:Event):void			{				var $io:FileIO = $event.target as FileIO;				$io.removeEventListener(FileIOEvent.SAVE_COMPLETE, this._onNewComplete);				// reset current game data.				_gameData = new Object();				// set the new slot name and session index.				if ($io.name != "") savedGamesList[ $io.index ] = $io.name;				_sessionIndex = $io.index;				_game.save();				// notify all caching models of update and conclude file operation.				dispatchEvent(new ModelEvent(ModelEvent.CACHE_REFRESH));				dispatchEvent(new ModelEvent(ModelEvent.NEW_GAME_COMPLETE));				$io.destroy();			}*/	//---------------------------------------	// Load game	//---------------------------------------		/**		* Loads saved game data into the active session.		* @param index Specifies the data slot to load. By default, an application has 10 data slots.		* @param newName Specifies a name for the slot.		*/		public function loadData($index:uint):void		{			if ($index >= 0 && $index <= DATA_SLOTS)			{				// load data for the specified index.				var $io:FileIO = FileIO.create( _saveRoot + $index );				$io.addEventListener(FileIOEvent.LOAD_COMPLETE, this._onLoadComplete);				$io.index = $index;				//$io.name = $newName;				$io.load();			}		}			/** @private called upon completion of FileIO loading game data. */			private function _onLoadComplete($event:Event):void			{				var $io:FileIO = $event.target as FileIO;				$io.removeEventListener(FileIOEvent.LOAD_COMPLETE, this._onLoadComplete);				// sets a copy of loaded data as the active game data.				_gameData = $io.getCopy();				// set the new slot name and session index.				//if ($io.name != "") savedGamesList[ $io.index ] = $io.name;				_sessionIndex = $io.index;				_game.save();				// notify all caching models of update and conclude file operation.				dispatchEvent(new ModelEvent(ModelEvent.CACHE_REFRESH));				dispatchEvent(new ModelEvent(ModelEvent.LOAD_GAME_COMPLETE));				$io.destroy();			}		/**		* Loads the cache with data from a foreign source.		*/		public function importData($data:Object, $index:uint=0, $name:String=""):void		{			_gameData = $data;			_sessionIndex = $index;			if ($name != "") savedGamesList[ $index ] = $name;			// notify all caching models of update and conclude file operation.			dispatchEvent(new ModelEvent(ModelEvent.CACHE_REFRESH));			dispatchEvent(new ModelEvent(ModelEvent.LOAD_GAME_COMPLETE));		}	//---------------------------------------	// Save game	//---------------------------------------		/**		* Saves the current game data session.		* @param index Specifies the data slot to save into. By default, an application has 10 data slots.		* @param saveName Specifies a name for the data slot to save into.		*/		public function saveData($index:uint, $saveName:String=""):void		{			if ($index >= 0 && $index < DATA_SLOTS)			{				// Clear any stored start position prior to saving data.				getSessionVars().setValue(AUTO_SAVE_POSITION, "");				// load data for the specified index.				var $io:FileIO = FileIO.create( _saveRoot + $index );				$io.addEventListener(FileIOEvent.SAVE_COMPLETE, this._onSaveComplete);				$io.setCopy(_gameData);				$io.index = $index;				$io.name = $saveName;				$io.save();			}		}			/** @private called upon completion of FileIO saving game data. */			private function _onSaveComplete($event:Event):void {				var $io:FileIO = $event.target as FileIO;				$io.removeEventListener(FileIOEvent.SAVE_COMPLETE, this._onSaveComplete);				// set the new slot name and session index.				if ($io.name != "") savedGamesList[ $io.index ] = $io.name;				_sessionIndex = $io.index;				_game.save();				// conclude file operation.				dispatchEvent(new ModelEvent(ModelEvent.SAVE_GAME_COMPLETE));				$io.destroy();				// auto-save the game session.				autoSave();			}	//---------------------------------------	// Clear game	//---------------------------------------		/**		* Deletes saved data.		* @param index Specifies the data slot to clear.		*/		public function clearData($index:uint):void		{			if ($index >= 0 && $index < DATA_SLOTS)			{				// load and clear the specified slot index.				var $io:FileIO = FileIO.create( _saveRoot + $index );				$io.addEventListener(FileIOEvent.CLEAR_COMPLETE, this._onClearComplete);				$io.index = $index;				$io.clear();			}		}			/** @private called upon completion of FileIO clearing game data. */			private function _onClearComplete($event:Event):void {				var $io:FileIO = $event.target as FileIO;				$io.removeEventListener(FileIOEvent.CLEAR_COMPLETE, this._onClearComplete);				// clear the slot's entry within the saved name index.				savedGamesList[ $io.index ] = "";				_game.save();				// conclude file operation.				dispatchEvent(new ModelEvent(ModelEvent.CLEAR_GAME_COMPLETE));				$io.destroy();			}	//---------------------------------------	// Session profile methods	//---------------------------------------		/**		* Returns a copy of the current game session's data object.		*/		public function getSessionData():Object {			return ObjectUtil.clone( _gameData );		}		/**		* Gets a cache of the active game's data session.		*/		public function getSession():Cache {			return new Cache(_gameData);		}		/**		* Gets the game vars cache of the active game session.		*/		public function getSessionVars():Cache {			return getSession().getNamespace( "vars" );		}		/**		* Traces the current cache data as a JSON object dump.		*/		public function echo():void {			trace( JSON.stringify(_gameData) );		}	//---------------------------------------	// Automatically save/resume last game	//---------------------------------------		/**		* Specifies if there is a suspended session to resume.		*/		public function get hasAutoSave():Boolean {			if (_game.data.auto) return true;			return false;		}		/**		* Gets the last auto-saved starting room position.		* This value may only be read once. It will be cleared immediately upon retrieval...		* This will prevent outdated values from lingering in data after they've outlived their relevance.		*/		public function get savedRoomPosition():String {			var $position:String = getSessionVars().getValue(AUTO_SAVE_POSITION);			getSessionVars().setValue(AUTO_SAVE_POSITION, "");			return $position;		}		/**		* Saves the current game session to the auto-save slot.		*/		public function autoSave( $position:String="" ):void		{			// AutoSave is called in response to entering a new room...			// therefore, store room position used to access this room.			// room position may be important when reloading the room.			getSessionVars().setValue(AUTO_SAVE_POSITION, $position);			// create a FileIO handler for the auto-save index.			var $io:FileIO = FileIO.create( _saveRoot + AUTO_SAVE_INDEX );			$io.setCopy(_gameData);			$io.save();			// flag presence of the auto-save game.			if (!hasAutoSave) {				_game.data.auto = true;				_game.save();			}		}		/**		* Resumes the last game session from the auto-save slot.		*/		public function autoResume():void {			if (hasAutoSave) loadData( AUTO_SAVE_INDEX );		}	}}/** @private singleton class enforcer */final internal class CacheEnforcer {}
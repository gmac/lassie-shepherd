/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.room{	import com.lassie.player.control.CommandName;	import com.lassie.utils.XmlUtil;	import flash.geom.Point;	final public class PuppetTween extends Object	{		// tween types		static public const MOVE:String = "move";		static public const TURN:String = "turn";		static public const MOVE_THEN_TURN:String = "moveThenTurn";		// tween targets		static public const POINT_TARGET:String = "point";		static public const POSITION_TARGET:String = "position";		static public const LAYER_TARGET:String = "layer";		static public const VIEW_TARGET:String = "view";	//-------------------------------------------------	// XML builders	//-------------------------------------------------		static public function getPointXML($point:Point, $puppetId:String, $type:String, $grid:Boolean=true, $confine:Boolean=false):XML		{			var $xml:String = '<'+ CommandName.PUPPET_TWEEN +" ";			$xml += 'target="'+ $puppetId +'" ';			$xml += 'type="'+ $type +'" ';			$xml += 'to="'+ PuppetTween.POINT_TARGET +':'+ $point.x +','+ $point.y +'" ';			$xml += 'followGrid="'+ ($grid ? '1' : '0') +'" ';			$xml += 'confineToWalkarea="'+ ($confine ? '1' : '0') +'" ';			$xml += '/>';			return new XML($xml);		}		static public function getPositionXML($position:String, $puppetId:String, $type:String, $grid:Boolean=true, $confine:Boolean=false):XML		{			var $xml:String = '<'+ CommandName.PUPPET_TWEEN +" ";			$xml += 'target="'+ $puppetId +'" ';			$xml += 'type="'+ $type +'" ';			$xml += 'to="'+ PuppetTween.POSITION_TARGET +':'+ $position +'" ';			$xml += 'followGrid="'+ ($grid ? '1' : '0') +'" ';			$xml += 'confineToWalkarea="'+ ($confine ? '1' : '0') +'" ';			$xml += '/>';			return new XML($xml);		}		static public function getLayerXML($layerId:String, $puppetId:String, $type:String, $grid:Boolean=true, $confine:Boolean=false):XML		{			var $xml:String = '<'+ CommandName.PUPPET_TWEEN +" ";			$xml += 'target="'+ $puppetId +'" ';			$xml += 'type="'+ $type +'" ';			$xml += 'to="'+ PuppetTween.LAYER_TARGET +':'+ $layerId +'" ';			$xml += 'followGrid="'+ ($grid ? '1' : '0') +'" ';			$xml += 'confineToWalkarea="'+ ($confine ? '1' : '0') +'" ';			$xml += '/>';			return new XML($xml);		}	//-------------------------------------------------	// Instance	//-------------------------------------------------		// public		public var targetPoint:Point;		public var targetPosition:String;		public var targetLayer:String;		public var followGrid:Boolean = true;		public var animateMoves:Boolean = true;		public var confineToWalkarea:Boolean = false;		// internal		// [goal values are configured by the PuppetTweener]		internal var goalMovePoint:Point;		internal var goalTurnPoint:Point;		internal var goalTurnView:int = 0;		// private		private var _type:String = PuppetTween.MOVE;		public function PuppetTween($type:String, $point:Point=null, $positionId:String=null, $layerId:String=null, $followGrid:Boolean=true, $confineToWalkarea:Boolean=false):void		{			super();			_type = $type;			targetPoint = $point			targetPosition = $positionId;			targetLayer = $layerId;			followGrid = $followGrid;			confineToWalkarea = $confineToWalkarea;		}		/**		* <tweenPuppet type="moveThenTurn" targetPoint="0,0" targetPosition="id" targetLayer="id"/>		*/		static public function parseXML($xml:XML):PuppetTween		{			// create new instance			var $tween:PuppetTween = new PuppetTween($xml.@type);			var $target:Array = ($xml.@to).split(":");			var $turnView:Number = parseInt($xml.@toView);			// PARSE TWEEN TARGET			// Proceed if target was resolved with a type and definition component			if ($target.length >= 2)			{				var $targetType:String = $target[0];				var $targetDef:String = $target[1];				if ($targetType == PuppetTween.POINT_TARGET) {					// Use target point coordinates					var $coords:Array = $targetDef.split(",");					var $x:Number;					var $y:Number;					if ($coords.length >= 2) {						$x = parseInt($coords[0]);						$y = parseInt($coords[1]);					}					if (!isNaN($x) && !isNaN($y)) {						$tween.targetPoint = new Point($x, $y);					}					else {						$tween.targetPoint = new Point(0, 0);						trace('[PuppetTween] could not parse "targetPoint"');					}				}				else if ($targetType == PuppetTween.POSITION_TARGET) {					// Use target position Id					$tween.targetPosition = $targetDef;				}				else if ($targetType == PuppetTween.LAYER_TARGET) {					// Use target layer Id					$tween.targetLayer = $targetDef;				}				else if ($tween.type == PuppetTween.TURN && $targetType == PuppetTween.VIEW_TARGET) {					// give tween a dummy target point so that it validates,					// then assign the "view" value to the goal turn view setting.					$tween.targetPoint = new Point(0, 0);					$turnView = parseInt( $targetDef );				}			}			// PARSE TARGET TURN VIEW			// proceed to set target turn view if parsed view passes validation.			if (!isNaN($turnView) && $turnView >= 1 && $turnView <= 8) {				$tween.goalTurnView = $turnView;			}			// parse tween params			$tween.followGrid = XmlUtil.parseBoolean( $xml.@followGrid, true );			$tween.animateMoves = XmlUtil.parseBoolean( $xml.@animateMoves, true );			$tween.confineToWalkarea = XmlUtil.parseBoolean( $xml.@confineToWalkarea, false );			return $tween;		}		/**		* Gets the tween type		*/		public function get type():String {			return _type;		}		/**		* Tests if the tween is configured properly for use.		*/		public function get valid():Boolean		{			switch (_type) {				case PuppetTween.MOVE:				case PuppetTween.TURN:				case PuppetTween.MOVE_THEN_TURN:					break;				default:					return false;			}			return (!!targetPoint || !!targetPosition || !!targetLayer);		}	}}
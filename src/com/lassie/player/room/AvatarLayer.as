/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.room{	import com.lassie.player.LassiePlayer;	import com.lassie.player.model.RoomLayer;	import com.lassie.player.model.Actor;	import com.lassie.player.events.ModelEvent;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Point;	/**	* The AvatarLayer is the primary interactive room layer that response to point-and-click activity.	*/	final public class AvatarLayer extends PuppetLayer	{		/** @private */		private var _actorModel:Actor;		/**		* Creates a new Avatar layer object.		* The Avatar is controlled by a RoomLayer model AND by an Actor model.		*/		public function AvatarLayer($model:RoomLayer, $parent:RoomDisplay):void		{			super($model, $parent);			mouseEnabled = false;			mouseChildren = false;			// listen for changes to the current actor within global config.			gameModel.addEventListener(ModelEvent.CHANGE_ACTOR, this._onChangeActor);		}	//-------------------------------------------------	// Overrides	//-------------------------------------------------		override public function destroy():void		{			super.destroy();			// unsubscribe global configuration listeners and nullify model references.			gameModel.removeEventListener(ModelEvent.CHANGE_ACTOR, this._onChangeActor);			_actorModel = null;		}		override public function toString():String {			return "[AvatarLayer]";		}		override public function redraw():void		{			// update with properties from the current game actor.			var $actor:Actor = gameModel.currentActorModel;			// Set new Actor model if:			// - the new actor model has not already been set.			// - the new actor model is valid.			if ($actor != _actorModel && $actor != null) {				model.mergeActor( $actor );				_actorModel = $actor;			}			// call PuppetLayer redraw			super.redraw();		}	//-------------------------------------------------	// Read-only properties	//-------------------------------------------------		public function get actorModel():Actor {			return _actorModel;		}	//-------------------------------------------------	// Event handlers	//-------------------------------------------------		/**		* @private		* Called when the game's current Actor model is changed.		* Layer is redrawn with new Actor settings applied.		*/		private function _onChangeActor($event:ModelEvent):void {			redraw();		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.display{	import com.lassie.events.LassieEvent;	import com.lassie.player.display.BaseSprite;	import flash.display.Sprite;	import flash.display.Shape;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.geom.Point;	import flash.events.MouseEvent;	import DebuggerText;		final public class DebuggerConsole extends BaseSprite	{		private var _header:HeaderBar;		private var _close:CloseButton;		private var _stats:DebuggerStats;		private var _input:TextField;		private var _output:TextField;		private var _panel:Shape;		private var _offset:Point;		private var _pad:int = 5;		private var _run:ActionButton;		private var _clear:ActionButton;				public function DebuggerConsole():void		{			super();						// place in upper-left of screen.			x = y = 15;						var $fields:DebuggerText = new DebuggerText();						// header			_header = new HeaderBar( ($fields.outputText.x * 2) + $fields.outputText.width );			addChild(_header);						// close			_close = new CloseButton();			_close.x = _header.width - (_close.width / 2 + _pad);			_close.y = _header.y + (_header.height / 2);			addChild(_close);						// stats			_stats = new DebuggerStats();			_stats.x = _pad;			//_stats.visible = false;			addChild(_stats);			// input			_input = $fields.inputText;			_input.x = _pad;			addChild(_input);						// output			_output = $fields.outputText;			_output.autoSize = TextFieldAutoSize.LEFT;			_output.x = _pad;			//_output.width = _stats.width;			//_output.wordWrap = true;			//_output.multiline = true;			//_output.selectable = true;			addChild(_output);						// run and clear buttons.			_run = new ActionButton("run", _output.width/2 - 3);			_clear = new ActionButton("clear", _output.width/2 - 3);			_run.y = _clear.y = Math.round(_output.y + _output.height + _pad);			_run.x = _input.x;			_clear.x = _output.x + _output.width - _clear.width;			addChild(_run);			addChild(_clear);						// panel			_panel = new Shape();			_panel.y = _header.y + _header.height;			_update();			addChildAt(_panel, 0);						// subscribe events			_run.addEventListener(MouseEvent.MOUSE_DOWN, this._onRunPress, false, 0, true);			_clear.addEventListener(MouseEvent.MOUSE_DOWN, this._onClearPress, false, 0, true);			_header.addEventListener(MouseEvent.MOUSE_DOWN, this._onHeaderPress, false, 0, true);			_close.addEventListener(MouseEvent.CLICK, this._onClose, false, 0, true);		}				/**		* Destroys the console display.		*/		override public function destroy():void		{			super.destroy();			close();			while (numChildren > 0) removeChildAt(0);			_run.removeEventListener(MouseEvent.MOUSE_DOWN, this._onRunPress);			_clear.removeEventListener(MouseEvent.MOUSE_DOWN, this._onClearPress);			_header.removeEventListener(MouseEvent.MOUSE_DOWN, this._onHeaderPress);			_close.removeEventListener(MouseEvent.CLICK, this._onClose);			_header = null;			_stats = null;			_output = null;			_panel = null;		}				/**		* Updates the component status and window size.		*/		private function _update():void		{			_stats.y = _header.y + _header.height + _pad;			_input.y = _stats.visible ? _stats.y + 90 + _pad : _stats.y;			_output.y = _input.y + _input.height + 20;			var $last:TextField = (_output.text != "") ? _output : _input;			_run.y = _clear.y = $last.y + $last.height + 5;			_panel.graphics.clear();			_panel.graphics.lineStyle(1, 0xCCCCCC, 1);			_panel.graphics.beginFill(0xFFFFFF, 0.9);			_panel.graphics.drawRect(0, 0, (_output.x * 2) + _output.width, (_run.y + _run.height + 3) - _panel.y);		}				/**		* Enables/disables the Stats component display.		*/		public function stats($enable:Boolean):void {			_stats.visible = $enable;			_update();		}				/**		* Echos a message into the debugger window.		*/		public function echo($message:String):void {			var $text:String = _output.text;			$text = ($text != "") ? $text+"\n"+$message : $message;			_output.text = $text;			_update();		}				/**		* Clears all text from the debugger window.		*/		public function clear():void {			_output.text = "";			_update();		}				/**		* Closes the debugger window.		*/		public function close():void {			clear();			if (parent != null) {				parent.removeChild(this);			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------		/** @private called upon mouseDown on the run button */		private function _onRunPress($event:MouseEvent):void {			var $xml:XML = new XML( _input.text );			if (!!$xml) {				dispatchEvent(new LassieEvent(LassieEvent.SCRIPT, $xml, true));				_input.text = "";			}		}				/** @private called upon mouseDown on the clear button */		private function _onClearPress($event:MouseEvent):void {			_input.text = "";			_output.text = "";			_update();		}				/** @private called upon mouseDown on the header bar display */		private function _onHeaderPress($event:MouseEvent):void {			stage.addEventListener(MouseEvent.MOUSE_UP, this._onHeaderRelease);			stage.addEventListener(MouseEvent.MOUSE_MOVE, this._onDrag);			_offset = new Point(mouseX, mouseY);		}				/** @private called upon mouseUp following a click on the header bar display */		private function _onHeaderRelease($event:MouseEvent):void {			stage.removeEventListener(MouseEvent.MOUSE_UP, this._onHeaderRelease);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, this._onDrag);		}				/** @private called upon mouseMove while the header is being pressed. */		private function _onDrag($event:MouseEvent):void {			x = parent.mouseX - _offset.x;			y = parent.mouseY - _offset.y;		}				/** @private called upon click of the close button. */		private function _onClose($event:MouseEvent):void {			close();		}	}}import flash.display.Sprite;import flash.display.GradientType;import flash.geom.Matrix;// --------------------------------------------------//  Window Header// --------------------------------------------------/*** HeaderBar constructs the graphics for the draggable window header bar.*/final internal class HeaderBar extends Sprite{	public function HeaderBar($width:int):void	{		super();				var $colors:Array = new Array(0x476ba7, 0x274a85, 0x192e53, 0x192e53);		var $alphas:Array = new Array(1, 1, 1, 1);		var $ratios:Array = new Array(0, 140, 141, 255);		var $border:uint = 0x1E3171;		var $matrix:Matrix = new Matrix();				var $h:int = 18;		var $l:int = 0; // left		var $t:int = 0; // top		var $r:int = 6; // corner radius		var $w:int = $width - ($r * 2) + 2;		$matrix.createGradientBox($w, $h, Math.PI/2, $l, $t);			graphics.clear();		graphics.lineStyle(1, $border, 1, true);		graphics.beginGradientFill(GradientType.LINEAR, $colors, $alphas, $ratios, $matrix);		graphics.moveTo($l, $t+$h);		graphics.lineTo($l, $t+$r);		graphics.curveTo($l, $t, $l+$r, $t);		graphics.lineTo($l+$w-$r, $t);		graphics.curveTo($l+$w, $t, $l+$w, $t+$r);		graphics.lineTo($l+$w, $t+$h);		graphics.lineTo($l, $t+$h);		graphics.endFill();	}}// --------------------------------------------------//  Close Button// --------------------------------------------------	/*** CloseButton constructs the graphics for the window's close buttons display.*/final internal class CloseButton extends Sprite{	public function CloseButton():void	{		super();				var $r:int = 3;		graphics.beginFill(0xFFFFFF, 0.5);		graphics.drawCircle(0, 0, $r+3);		graphics.endFill();		graphics.lineStyle(1, 0xFFFFFF, 1);		graphics.moveTo(-$r, -$r);		graphics.lineTo($r, $r);		graphics.moveTo(-$r, $r);		graphics.lineTo($r, -$r);	}}// --------------------------------------------------//  Action Button// --------------------------------------------------import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFormat;/*** CloseButton constructs the graphics for the window's close buttons display.*/final internal class ActionButton extends Sprite{	private var _label:TextField;		public function ActionButton($label:String, $width:int):void	{		super();				var $w:int = $width;		var $h:int = 15;		var $r:int = 3;		graphics.beginFill(0x999999, 0.75);		graphics.drawRoundRect(0, 0, $w, $h, $r);		graphics.endFill();				_label = new TextField();		_label.width = $w;		_label.autoSize = TextFieldAutoSize.CENTER;		_label.defaultTextFormat = new TextFormat("_sans", 11, 0xFFFFFF);		_label.selectable = false;		_label.text = $label;		_label.y = Math.round($h/2 - _label.height/2) - 1;		_label.x = 0;		addChild( _label );		mouseChildren = false;	}}
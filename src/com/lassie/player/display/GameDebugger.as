/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.display{	import com.lassie.player.core.LPDispatcher;	import com.lassie.player.core.IGameDebugger;	import flash.display.Sprite;	/**	* GameDebugger serves as a proxy to the DebuggerConsole.	* A DebuggerConsole is never created unless the GameDebugger is specifically enabled.	* While disabled, all feedback sent to the game debugger will be ignored.	*/	final public class GameDebugger extends LPDispatcher implements IGameDebugger	{		/** @private */		private var _console:DebuggerConsole;		private var _enabled:Boolean = false;		private var _statsEnabled:Boolean = true;		/** @private singleton class constructor */		public function GameDebugger($singleton:DebuggerEnforcer):void {			super();		}		/** @private singleton instance reference */		static private var _instance:GameDebugger;		/**		* Gets the singleton instance reference.		*/		static public function getInstance():GameDebugger {			if (_instance == null) _instance = new GameDebugger(new DebuggerEnforcer());			return _instance;		}	//-------------------------------------------------	// Controls	//-------------------------------------------------		/**		* Specifies the enabled status of the debugger console.		*/		public function get enabled():Boolean {			return _enabled;		}		public function set enabled($enable:Boolean):void		{			if ($enable && _console == null) {				_console = new DebuggerConsole();				_console.stats(_statsEnabled);			}			else if (!$enable && _console != null) {				_console.destroy();				_console = null;			}			_enabled = $enable;		}		/**		* Specifies if statistics are enabled within the output window.		*/		public function get statsEnabled():Boolean {			return _statsEnabled;		}		public function set statsEnabled($enable:Boolean):void		{			_statsEnabled = $enable;			if (_console != null) {				_console.stats(_statsEnabled);			}		}		/**		* Echos a message into the output window.		*/		public function echo($message:String):void		{			if (_console != null) {				_console.echo($message);				show();			}		}		/**		* Opens the output window within cursor's scope, just below the cursor depth.		*/		public function show():void {			if (_console != null) {				var $cursor:Sprite = uiCursor as Sprite;				var $index:int = $cursor.parent.getChildIndex($cursor);				$cursor.parent.addChildAt(_console, $index);			}		}		/**		* Closes the output window.		*/		public function hide():void {			if (_console != null) _console.close();		}		/**		* Closes the output window.		*/		public function toggle():void {			if (_console != null) {				_console.parent != null ? hide() : show();			}		}	}}/** @private singleton instance key */final internal class DebuggerEnforcer {}
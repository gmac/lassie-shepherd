/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.tween{	import com.gs.TweenLite;	import com.gs.easing.*;		final public class TweenLiteProxy extends TweenProxy	{		private var _easing:Object;				public function TweenLiteProxy():void {			super();			_easing = _getEaseLib();		}				/**		* Specifies the name of the tween engine being proxied.		*/		override public function get name():String {			return TweenEngineName.TWEEN_LITE;		}				/**		* Initiates a Tween.		*/		override public function tween($target:Object, $seconds:Number, $params:Object):void {			TweenLite.to($target, $seconds, $params);		}				/**		* Gets a tween player using the TweenLite framework.		*/		override public function getTween($target:Object, $seconds:Number, $params:Object):TweenPlayer {			return new TweenLitePlayer($target, $seconds, $params);		}				/**		* Gets a TweenLite easing equation.		*/		override public function getEase($type:String, $method:String):Function		{			if (_easing.hasOwnProperty($type)) {				var $class:Class = _easing[$type] as Class;								if ($class[$method] is Function) {					return $class[$method] as Function;				}			}			return null;		}				/**		* Kills tweens on a specific object.		*/		override public function killTweensOf($target:Object):void {			TweenLite.killTweensOf($target);		}				/**		* Generates a library of all TweenLite easing classes.		*/		private function _getEaseLib():Object		{			var $ease:Object = new Object();			$ease[ EaseType.BACK ] = Back;			$ease[ EaseType.BOUNCE ] = Bounce;			$ease[ EaseType.CIRC ] = Circ;			$ease[ EaseType.CUBIC ] = Cubic;			$ease[ EaseType.ELASTIC ] = Elastic;			$ease[ EaseType.EXPO ] = Expo;			$ease[ EaseType.LINEAR ] = Linear;			$ease[ EaseType.QUAD ] = Quad;			$ease[ EaseType.QUART ] = Quart;			$ease[ EaseType.QUINT ] = Quint;			$ease[ EaseType.SINE ] = Sine;			$ease[ EaseType.STRONG ] = Strong;			return $ease;		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.fileio{	import flash.events.EventDispatcher;	import flash.events.Event;	import com.lassie.player.events.FileIOEvent;	import com.lassie.utils.ObjectUtil;		public class FileIO extends EventDispatcher	{	//---------------------------------------	// Static configuration	//---------------------------------------					static private var __factory:FileIOFactory;		static private var _service:String = "save/fileio.php";				/**		* Gets a reference to the FileIO's singleton factory instance.		*/		static private function _getFactory():FileIOFactory {			if (__factory == null) __factory = new FileIOFactory();			return __factory;		}				/**		* Provides a back door for another object to directly set the FileIO class' factory object.		* This allows the document class of an AIR application to specify an AIR-specific file factory.		* AIR-specific code cannot be directly imported into the FileIO class becasue it will		* prevent the Lassie Player application from compiling for the basic Flash Player runtime.		*/		static public function setFactory($factory:FileIOFactory):void {			if (!!$factory && $factory is FileIOFactory) __factory = $factory;		}				/**		* Sets the method class used in FileIO operations.		*/		static public function get method():String {			return _getFactory().method;		}		static public function set method($method:String):void {			_getFactory().method = $method;		}				/**		* Specifies the the path to an external FileIO service.		*/		static public function get servicePath():String {			return _service;		}		static public function set servicePath($service:String):void {			_service = $service;		}				/**		* Creates and loads a new FileIO object.		*/		static public function create($uri:String):FileIO {			return _getFactory().getFileIO( $uri );		}			//---------------------------------------	// Instance configuration	//---------------------------------------					public var data:Object;		public var name:String = "";		public var index:int = 0;				private var _uri:String = "";		public function FileIO($uri:String):void {			super();			_uri = $uri;			data = new Object();		}				/**		* Destroys the FileIO object to optimize for garbage collection.		*/		public function destroy():void {			data = null;		}				/**		* Specifies the URI that the data was loaded from.		*/		public function get uri():String {			return _uri;		}				/**		* Returns a copy of the data object.		*/		public function getCopy():Object		{			if (!!data) return ObjectUtil.clone(data);			return new Object();		}				/**		* Sets a copy of the provided object as the data store.		*/		public function setCopy($data:Object):void {			data = ObjectUtil.clone($data);		}				/**		* Loads object from the specified URI.		*/		public function load():void {			// do stuff.		}			/** @private called upong completion of the _load() operation */			protected function _onLoadComplete($event:Event=null):void {				dispatchEvent(new FileIOEvent(FileIOEvent.LOAD_COMPLETE));			}				/**		* Saves data object to the currently assigned URI.		*/		public function save():void {			// do stuff.		}			/** @private called upong completion of the save() operation */			protected function _onSaveComplete($event:Event=null):void {				dispatchEvent(new FileIOEvent(FileIOEvent.SAVE_COMPLETE));			}				/**		* Clears the saved file's data footprint.		*/		public function clear():void {			// do stuff.		}			/** @private called upong completion of the clear() operation */			protected function _onClearComplete($event:Event=null):void {				dispatchEvent(new FileIOEvent(FileIOEvent.CLEAR_COMPLETE));			}	}}
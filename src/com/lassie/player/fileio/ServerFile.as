package com.lassie.player.fileio{	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.events.Event;	import flash.events.IOErrorEvent;	import com.adobe.serialization.json.JSON;		final public class ServerFile extends FileIO	{		static public const READ:String = "r";		static public const WRITE:String = "w";		static public const DELETE:String = "d";				public function ServerFile($uri:String):void {			super($uri);		}				/**		* Loads object from the specified URI.		*/		override public function load():void		{			// create loader components			var $loader:URLLoader = new URLLoader();			var $request:URLRequest = new URLRequest( FileIO.servicePath );			var $vars:URLVariables = new URLVariables();						// configure request			$vars.method = ServerFile.READ;			$vars.file = this.uri;			$request.method = URLRequestMethod.POST;			$request.data = $vars;						// start load			$loader.addEventListener(Event.COMPLETE, this._onLoadComplete);			$loader.addEventListener(IOErrorEvent.IO_ERROR, this._onIOError);			$loader.load($request);		}					/** @private called upon completion of the load operation */			override protected function _onLoadComplete($event:Event=null):void			{				var $loader:URLLoader = $event.target as URLLoader;				$loader.removeEventListener(Event.COMPLETE, this._onLoadComplete);				$loader.removeEventListener(IOErrorEvent.IO_ERROR, this._onIOError);				this.data = JSON.decode($loader.data);				super._onLoadComplete();			}				/**		* Saves data object to the currently assigned URI.		*/		override public function save():void		{			// create loader components			var $loader:URLLoader = new URLLoader();			var $request:URLRequest = new URLRequest( FileIO.servicePath );			var $vars:URLVariables = new URLVariables();						// configure request			$vars.method = ServerFile.WRITE;			$vars.file = this.uri;			$vars.data = JSON.encode(this.data);			$request.method = URLRequestMethod.POST;			$request.data = $vars;						// start load			$loader.addEventListener(Event.COMPLETE, this._onSaveComplete);			$loader.addEventListener(IOErrorEvent.IO_ERROR, this._onIOError);			$loader.load($request);		}						/** @private called upon completion of the save operation */			override protected function _onSaveComplete($event:Event=null):void			{				var $loader:URLLoader = $event.target as URLLoader;				$loader.removeEventListener(Event.COMPLETE, this._onSaveComplete);				$loader.removeEventListener(IOErrorEvent.IO_ERROR, this._onIOError);				super._onSaveComplete();			}					/**		* Clears data object from the currently assigned URI.		*/		override public function clear():void		{			// create loader components			var $loader:URLLoader = new URLLoader();			var $request:URLRequest = new URLRequest( FileIO.servicePath );			var $vars:URLVariables = new URLVariables();						// configure request			$vars.method = ServerFile.DELETE;			$vars.file = this.uri;			$request.method = URLRequestMethod.POST;			$request.data = $vars;						// start load			$loader.addEventListener(Event.COMPLETE, this._onClearComplete);			$loader.addEventListener(IOErrorEvent.IO_ERROR, this._onIOError);			$loader.load($request);		}					/** @private called upon completion of the clear operation */			override protected function _onClearComplete($event:Event=null):void			{				var $loader:URLLoader = $event.target as URLLoader;				$loader.removeEventListener(Event.COMPLETE, this._onClearComplete);				$loader.removeEventListener(IOErrorEvent.IO_ERROR, this._onIOError);				super._onClearComplete();			}				/** @private called upon failure of an IO operation */		function _onIOError($event:Event=null):void {			this.data = new Object();			trace("FileIO error.");		}	}}
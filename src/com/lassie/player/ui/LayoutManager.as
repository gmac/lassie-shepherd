/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import com.lassie.player.core.ILayoutManager;	import com.lassie.player.core.IUILayer;	import com.lassie.player.core.LPSprite;	import com.lassie.player.events.DisplayEvent;	import com.lassie.player.model.Room;	import com.lassie.player.room.RoomDisplay;	/**	* Manager class for storing and displaying static room layouts.	*/	final public class LayoutManager extends LPSprite implements ILayoutManager	{		/** @private */		private var _layers:Object;		/** constructor */		public function LayoutManager():void		{			super();			mouseEnabled = false;			_layers = new Object();		}		override public function destroy():void		{			super.destroy();			// clear all layout records			for (var $j:String in _layers) {				removeLayout($j);			}			_layers = null;		}	//-------------------------------------------------	// Methods	//-------------------------------------------------		/**		* Adds a room layer as a UI overlay layer.		*/		public function addLayout($id:String, $index:int=0):IUILayer		{			if (!hasLayout($id))			{				// Add and a new layout if the requested layer does not already exist.				var $model:Room = gameModel.getRoom($id);				var $room:RoomDisplay = new RoomDisplay($model, "", true);				var $layer:UILayer = new UILayer($room);				_layers[ $model.id ] = $layer;				$layer.show(false);				$room.load();				// add the room to the layer manager display.				addChildAt($layer, Math.max(0, Math.min($index, numChildren)));				return $layer;			}			return _getLayout($id);		}		/**		* Clears the specified layout.		*/		public function removeLayout($id:String):void		{			if (hasLayout($id)) {				// get a reference to the UI layer.				var $layer:UILayer = _getLayout($id);				// destroy the room display and the UI layer.				RoomDisplay($layer.display).destroy();				$layer.destroy();				// clear display and delete layer reference.				removeChild($layer);				delete _layers[$id];			}		}		/**		* Public interface method: gets the specified layout layer, cast as an interface.		*/		public function getLayout($id:String):IUILayer {			return _getLayout($id);		}		/**		* Gets the specified layout layer.		*/		private function _getLayout($id:String):UILayer {			if (hasLayout($id)) return _layers[$id] as UILayer;			return null;		}		/**		* Tests if the manager contains the specified layout.		*/		public function hasLayout($id:String):Boolean {			return _layers.hasOwnProperty($id);		}	}}
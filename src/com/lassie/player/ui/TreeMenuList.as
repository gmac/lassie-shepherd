/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import com.lassie.player.model.DialogueTreeTopic;	import com.lassie.player.display.BaseSprite;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.events.Event;	/**	* @private	* TreeMenuList manages the display of selectable list-menu options.	*/	final internal class TreeMenuList extends BaseSprite	{		// public		public var lineHeight:int = 0;		// private		private var _optionFields:Array;		private var _optionTopics:Array;		private var _anchorX:int = 0;		private var _anchorY:int = 0;		private var _selectedKey:String = "";		private var _scrollIndex:int = 0;		private var _scrollRange:int = 0;		private var _displayHeight:int = 0;		public function TreeMenuList():void		{			super();			mouseEnabled = false;			mouseChildren = true;			addEventListener(MouseEvent.CLICK, this._onMouseClick);			_optionFields = new Array();		}		override public function destroy():void		{			// clear all menu items			while (numChildren > 0) {				TreeMenuOption(removeChildAt(0)).destroy();			}			_optionFields = null;			_optionTopics = null;		}	//-------------------------------------------------	// Display config methods	//-------------------------------------------------		/**		* @private		* Positions the list at the specified coords and saves the location as the reset point.		*/		internal function _$anchorAt($x:int, $y:int):void {			x = _anchorX = $x;			y = _anchorY = $y;		}		/**		* @private		* Adds a TextField display as an option within the list.		*/		internal function _$addOptionDisplay($display:TextField):void		{			var $item:TreeMenuOption = new TreeMenuOption($display);			if (_optionFields.length > 0) {				var $last:TreeMenuOption = _optionFields[_optionFields.length-1] as TreeMenuOption;				$item.y = $last.y + lineHeight;			}			else {				$item.y = 0;			}			_optionFields.push($item);			addChild($item);		}	//-------------------------------------------------	// Population / scrolling	//-------------------------------------------------		/**		* 1) Reset display. Resets all values to base configuration an sets new source data.		*/		public function reset($topicsList:Array):void		{			// collect all enabled topics.			var $enabledTopics:Array = new Array();			for each (var $topic:DialogueTreeTopic in $topicsList) {				if ($topic.enabled) $enabledTopics.push($topic)			}			// reset all source configuration values.			x = _anchorX;			y = _anchorY;			_displayHeight = 0;			_scrollIndex = 0;			_scrollRange = 0;			_optionTopics = $enabledTopics;			_selectedKey = "";			refresh();		}		/**		* 2) Call refresh. Refreshes the list display with all current topic options and scroll settings.		*/		public function refresh():void		{			// loop through all list options			for (var $j:int=0; $j < _optionFields.length; $j++)			{				var $option:TreeMenuOption = _optionFields[$j] as TreeMenuOption;				// if text option is within range of list option,				if ($j + _scrollIndex < _optionTopics.length)				{					// populate text option and update display height.					var $topic:DialogueTreeTopic = _optionTopics[$j + _scrollIndex] as DialogueTreeTopic;					$option.render( $topic.title );					$option.key = $topic.key;					_displayHeight = $option.y + $option.height;					$option.visible = true;				}				else				{					// otherwise, clear and hide the option.					$option.text = "";					$option.visible = false;				}			}			// set range of scrolling as the difference between the number of topics and the number of fields.			_scrollRange = Math.max(0, _optionTopics.length - _optionFields.length);		}		/**		* Specifies the index of the first option displayed in the list.		*/		public function get scrollIndex():int {			return _scrollIndex;		}		public function set scrollIndex($index:int):void {			_scrollIndex = Math.max(0, Math.min($index, _scrollRange));			refresh();		}	//-------------------------------------------------	// Read-only properties	//-------------------------------------------------		/**		* Specifies if there are currently more text options than line displays in the menu, therefore requiring the menu to scroll.		*/		public function get scrollEnabled():Boolean {			return _scrollRange > 0;		}		/**		* Specifies if there are hidden menu options above the current scroll index.		*/		public function get prevEnabled():Boolean {			return _scrollIndex > 0;		}		/**		* Specifies if there are additional hidden menu options extending beyond the last item in the list.		*/		public function get nextEnabled():Boolean {			return _scrollIndex < _scrollRange;		}		/**		* Specifies the display height of all visible options within the list.		*/		public function get displayHeight():int {			return _displayHeight;		}		/**		* Specifies the [scrolled] line index of the last mouse click.		*/		public function get selectedKey():String {			return _selectedKey;		}	//-------------------------------------------------	// Event handlers	//-------------------------------------------------		/** @private		* MouseClick event		*/		private function _onMouseClick($event:MouseEvent):void		{			if ($event.target is TreeMenuOption) {				_selectedKey = TreeMenuOption($event.target).key;				dispatchEvent(new Event(Event.SELECT));			}		}	}}import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.events.MouseEvent;import com.lassie.player.ui.UIText;import com.lassie.player.system.SystemParams;/*** @private* Interactive wrapper for TextField elements within the list.*/final internal class TreeMenuOption extends UIText{	public var key:String = "";	private var _outColor:uint = 0x000000;	private var _overColor:uint = 0x000000;	public function TreeMenuOption($textField:TextField):void	{		super($textField);		$textField.text = "";		$textField.x = 0;		$textField.y = 0;		$textField.autoSize = TextFieldAutoSize.LEFT;		$textField.selectable = false;		$textField.multiline = false;		$textField.wordWrap = false;		_outColor = SystemParams.treeOffColor;		_overColor = SystemParams.treeOnColor;		textColor = _outColor;		mouseEnabled = true;		mouseChildren = false;		addEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver);		addEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut);	}	override public function destroy():void	{		removeEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver);		removeEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut);		super.destroy();	}	//-------------------------------------------------	// Event handlers	//-------------------------------------------------	/** @private	* MouseOver event	*/	private function _onMouseOver($event:MouseEvent):void {		textColor = _overColor;	}	/** @private	* MouseOut event	*/	private function _onMouseOut($event:MouseEvent):void {		textColor = _outColor;	}}
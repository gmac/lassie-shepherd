/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import com.lassie.player.core.LPSprite;	import com.lassie.player.logic.LogicParser;	import flash.text.TextField;	import flash.text.TextFormat;		public class UIText extends LPSprite	{		// private		private var _textField:TextField;		private var _enabled:Boolean = true;		public function UIText($textField:TextField):void		{			super();			mouseEnabled = false;			mouseChildren = false;			_textField = ($textField != null) ? $textField : new TextField();			_textField.text = "";						// transfer all filters from field onto parent sprite.			var $filters:Array = _textField.filters;			_textField.filters = new Array();			this.filters = $filters;						// add text field to display.			addChild(_textField);		}				override public function destroy():void		{			super.destroy();						// replace text formatting and nullify field			var $tf:TextFormat = new TextFormat();			_textField.defaultTextFormat = $tf;			_textField.setTextFormat($tf);			_textField.filters = null;			_textField.text = "";			_textField = null;			_removeAllChildren();		}				/**		* Turn off visibility when alpha is set to zero.		*/		override public function set alpha($percent:Number):void {			super.alpha = $percent;			visible = ($percent > 0);		}		//-------------------------------------------------	// Read-only properties	//-------------------------------------------------				/**		* Gets a reference to the element's source text field.		*/		public function get textField():TextField {			return _textField;		}				/**		* Specifies the current width of the field's text content.		*/		public function get textWidth():int {			return _textField.textWidth;		}				/**		* Specifies the current height of the field's text content.		*/		public function get textHeight():int {			return _textField.textHeight;		}				/**		* Specifies the text content of the display field.		*/		public function get text():String {			return _textField.text;		}		public function set text($value:String):void {			_textField.text = $value;		}				/**		* Specifies the HTML text content of the display field.		*/		public function get htmlText():String {			return _textField.htmlText;		}		public function set htmlText($value:String):void {			_textField.htmlText = $value;		}				/**		* Specifies the text color of the display field.		*/		public function get textColor():uint {			return _textField.textColor;		}		public function set textColor($color:uint):void {			_textField.textColor = $color;		}				/**		* Renders a text string with the logic parser, then applies the value as HTML text.		*/		public function render($txt:String):void {			_textField.htmlText = LogicParser.parseFields( $txt );		}				/**		* Creates a styled copy of theelement's text field.		*/		protected function _cloneTextField():TextField		{			var $copy:TextField = new TextField();			$copy.defaultTextFormat = _textField.defaultTextFormat;			$copy.embedFonts = _textField.embedFonts;			$copy.multiline = _textField.multiline;			$copy.wordWrap = _textField.wordWrap;			$copy.autoSize = _textField.autoSize;			$copy.selectable = _textField.selectable;			$copy.antiAliasType = _textField.antiAliasType;			$copy.type = _textField.type;			$copy.filters = _textField.filters;			$copy.x = _textField.x;			$copy.y = _textField.y;			return $copy;		}	//-------------------------------------------------	// UILayer properties	//-------------------------------------------------			/**		* Enabled. Currently useless.		*/		public function get enabled():Boolean {			return _enabled;		}		public function set enabled($enable:Boolean):void {			_enabled = $enable;		}	}}
/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import com.lassie.menu.ILPGameMenu;	import com.lassie.events.LassieMenuEvent;	import com.lassie.player.core.IGameMenu;	import com.lassie.player.events.UIEvent;	import com.lassie.player.system.SystemParams;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	/**	* GameMenu is a controller object for managing the load/save interface and global settings controls.	*/	final public class GameMenu extends UILayer implements IGameMenu	{		private var _allowMenuAccess:Boolean = false;		/**		* Creates a new GameMenu controller for the provided UI display clip.		*/		public function GameMenu($display:MovieClip):void		{			// validate and configure the menu component prior to configuring the display.			if ($display is ILPGameMenu) {				var $menu:ILPGameMenu = $display as ILPGameMenu;				$menu.subtitleOption = SystemParams.menuSubtitleOption;				$menu.subtitleSpeedOption = SystemParams.menuSubtitleSpeedOption;				$menu.voiceOption = SystemParams.menuVoiceOption;				$menu.fullScreenOption = SystemParams.menuFullScreenOption;				$menu.graphicsQualityOption = SystemParams.menuGraphicsQualityOption;				$menu.helpEnabled = SystemParams.menuHelpEnabled;				$menu.helpText = SystemParams.menuHelpText;				$menu.quitEnabled = SystemParams.menuQuitEnabled;				_allowMenuAccess = true;			}			else {				$display = new MovieClip();			}			// grant menu access, but swap in Lassie's native menu if the provided display is invalid.			//if (!$display || !($display is ILPGameMenu)) $display = new GameMenuDisplay();			//_allowMenuAccess = true;			super($display);			showSeconds = SystemParams.menuShowSeconds;			hideSeconds = SystemParams.menuHideSeconds;			addEventListener(UIEvent.SHOW_COMPLETE, this._onShow);			addEventListener(UIEvent.HIDE_COMPLETE, this._onHide);			mouseEnabled = false;			display.addEventListener(LassieMenuEvent.MOUSE_OVER, this._onMouseOver, false, 0, true);			display.addEventListener(LassieMenuEvent.MOUSE_OUT, this._onMouseOut, false, 0, true);		}		/**		* Specifies if the controller should allow menu information to be released from the Lassie Player into a valid game menu.		*/		public function get allowMenuAccess():Boolean {			return _allowMenuAccess;		}		/** @private listens for changes in screen size while the menu is open */		override protected function _init():void {			//stage.addEventListener(Event.RESIZE, this._onResizeDisplay);		}		/** @private clears screen size listeners when the menu closes */		override protected function _uninit():void {			//stage.removeEventListener(Event.RESIZE, this._onResizeDisplay);		}		/**		* @private		* Initializes the menu display each time it is revealed.		*/		private function _onShow($event:Event):void {			//populate();		}		/**		* @private		* Restores focus to the stage after every menu session.		* Keyboard controls will not catch events unless the stage has focus.		*/		private function _onHide($event:Event):void {			//_selectedSlot.selected = false;			//_selectedSlot = null;			stage.focus = stage;			uiCursor.hover = false;		}		/**		* @private		* Called when the mouse rolls over any InteractiveObject.		* The one exception is the confirmation overlay:		* that overlay should block mouse actions but not highlight the cursor.		*/		private function _onMouseOver($event:Event):void {			if ($event.target != display) uiCursor.hover = true;		}		/**		* @private		* Called when the mouse rolls off of any InteractiveObject.		*/		private function _onMouseOut($event:Event):void {			uiCursor.hover = false;		}		/**		* @private		* Called when the screen resizes.		*/		private function _onResizeDisplay($event:Event):void {			//_fullScreenToggle.selected = gameCache.fullScreen;		}	}}
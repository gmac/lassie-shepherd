/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import com.lassie.player.core.ISubtitle;	import com.lassie.player.core.IRoomLayerDisplay;	import com.lassie.player.system.SystemParams;	import com.lassie.player.model.Dialogue;	import flash.text.TextField;	import flash.geom.Rectangle;		final public class Subtitle extends UILayer implements ISubtitle	{		private var _padding:int = 0;		private var _overhead:int = 0;				public function Subtitle($textField:TextField):void		{			super(new SubtitleText($textField));			_padding = SystemParams.subtitlePadding;			_overhead = SystemParams.subtitleOverhead;			showSeconds = SystemParams.subtitleShowSeconds;			hideSeconds = SystemParams.subtitleHideSeconds;			hide(false);		}			//-------------------------------------------------	// Methods	//-------------------------------------------------					public function setDisplay($dialogue:Dialogue):void		{			// immediately hide display if it's already visible.			if (visibility) hide(false);						var $display:SubtitleText = display as SubtitleText;			var $x:int = gameDisplay.displayWidth / 2;			var $y:int = gameDisplay.displayHeight / 2;						// populate subtitle text.			$display.formatTitle( $dialogue.subtitle );			// get target room layer and half the width of the display.			var $layer:IRoomLayerDisplay = getRoomLayer($dialogue.puppet);			var $halfW:int = $display.textWidth / 2;						/*			* If a valid room layer was found:			*/			if (!!$layer)			{				// place subtitle above target layer and color based on layer's speech color.				var $rect:Rectangle = $layer.getRect(gameDisplay);				$x = $rect.x + ($rect.width / 2);				$y = $rect.y - _overhead - display.height;				$display.textColor = $layer.model.layerState.subtitleColor;			}			else			{				// if no layer is targeted, color the subtitle based on the dialogue setting.				$display.textColor = $dialogue.color;			}			/*			* If dialogue has a valid position override:			*/			if (!!$dialogue.position)			{				$x = $dialogue.position.x;				$y = $dialogue.position.y - display.height;			}			// adjust final position to display-safe coordinates. 			x = Math.max($halfW+_padding, Math.min($x, gameDisplay.displayWidth-$halfW-_padding));			y = Math.max(_padding, Math.min($y, gameDisplay.displayHeight-display.height-_padding));						// reveal display.			show();		}				public function clearDisplay():void {			hide();		}	}}import flash.text.TextField;import flash.text.TextFieldAutoSize;import com.lassie.player.ui.UIText;final internal class SubtitleText extends UIText{	private var _baseWidth:int = 200;		public function SubtitleText($textField:TextField):void	{		super($textField);		$textField.y = 0;		$textField.selectable = false;		$textField.autoSize = TextFieldAutoSize.CENTER;		_baseWidth = Math.round($textField.width);		reset();	}		/**	* Resets the default text field configuration.	*/	public function reset():void	{		textColor = 0xFFFFFF;		textField.multiline = true;		textField.wordWrap = true;		textField.width = _baseWidth;		textField.x = -Math.round( textField.width / 2 );	}		/**	* Resets and then formats text within the display field.	*/	public function formatTitle($subtitle:String):void	{		reset();		render( $subtitle );				if (textField.numLines == 1) {			// if subtitle fits on one line,			// disable multiline so that the field will collapse to the actual title size.			textField.multiline = false;			textField.wordWrap = false;			textField.x = -Math.round( textField.width / 2 );		}	}}
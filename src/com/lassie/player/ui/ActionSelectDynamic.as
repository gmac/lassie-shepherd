/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.InteractiveObject;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import com.lassie.player.core.IActionSelectable;	import com.lassie.player.core.ActionProperties;	import com.lassie.player.system.SystemParams;	import com.lassie.utils.DisplayUtil;		final public class ActionSelectDynamic extends ActionSelect	{		public function ActionSelectDynamic($display:MovieClip):void		{			super($display);			mouseEnabled = false;			mouseChildren = false;						// configure display settings.			showSeconds = SystemParams.actionShowSeconds;			hideSeconds = SystemParams.actionHideSeconds;			tweenType = UITweenType.SCALE;			tweenValue = 0;						// configure display assets.			_initDisplay();		}				/**		* Initializes the display's mouse responsiveness.		*/		override protected function _initDisplay():void		{			// align the display's registration with the UILayer's origin.			display.x = display.y = 0;						// Configure mouse response on display children			for (var $j:int=0; $j < display.numChildren; $j++)			{				var $child:DisplayObject = display.getChildAt($j);								if ($child.name.indexOf(UIInstanceName.ACTION_BUTTON) == 0 && $child is Sprite)				{					// enable action buttons					Sprite($child).mouseEnabled = true;					Sprite($child).mouseChildren = false;				}				else				{					// completely disable interactive					DisplayUtil.setMouseEnabled($child, false);				}			}						super._initDisplay();		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------		/**		* Reveals the action selector. Called by the actionable object to target.		*/		override public function activate($targetObject:IActionSelectable):void		{			if (!hasTarget)			{				x = parent.mouseX;				y = parent.mouseY;								mouseChildren = true;				_actionTarget = $targetObject;								stage.addEventListener(MouseEvent.MOUSE_UP, this._onMouseUp, false, 0, true);				show();			}		}				/**		* Hides the action selector.		*/		override public function deactivate():void		{			if (hasTarget)			{				mouseChildren = false;				_actionTarget.clearAction(true);				_hover(false);				stage.removeEventListener(MouseEvent.MOUSE_UP, this._onMouseUp);				hide();								/*				* Clear action target after deactivating selector disc.				* This allows action properties to remain available during the full disc cycle.				*/				_actionTarget = null;			}		}		//-------------------------------------------------	// Event handlers	//-------------------------------------------------			/**		* MouseRelease closes action select		*/		private function _onMouseUp($event:MouseEvent):void {			deactivate();		}				/**		* Mouse over action button.		*/		override protected function _onActionMouseOver($index:int):void {			if (hasTarget) _actionTarget.setAction($index);			_hover(true);		}				/**		* Mouse out of action button.		*/		override protected function _onActionMouseOut():void {			if (hasTarget) _actionTarget.clearAction();			_hover(false);		}				/**		* Mouse out of full selector bounds.		*/		override protected function _onSelectorMouseOut():void {			deactivate();		}	}}
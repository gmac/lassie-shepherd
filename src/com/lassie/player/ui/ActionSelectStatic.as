/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import com.lassie.player.core.IActionSelector;	import com.lassie.player.core.IActionSelectable;	import com.lassie.player.core.ActionProperties;	import com.lassie.player.model.ActionList;	import com.lassie.utils.DisplayUtil;		final public class ActionSelectStatic extends ActionSelect	{		private var _selectedActionIndex:int = -1;		public function ActionSelectStatic($display:MovieClip):void		{			super($display);			mouseEnabled = false;			_initDisplay();			show(false);		}				/**		* Initializes the display's mouse responsiveness.		*/		override protected function _initDisplay():void		{			// Configure mouse response on display children			for (var $j:int=0; $j < display.numChildren; $j++)			{				var $child:DisplayObject = display.getChildAt($j);								if ($child.name.indexOf(UIInstanceName.ACTION_BUTTON) == 0 && $child is Sprite)				{					// enable action buttons					Sprite($child).mouseEnabled = true;					Sprite($child).mouseChildren = false;					$child.addEventListener(MouseEvent.CLICK, this._onActionClick, false, 0, true);				}				else				{					// completely disable interactive					DisplayUtil.setMouseEnabled($child, false);				}			}						super._initDisplay();		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------			/**		* The console's selected action index.		*/		override public function get staticActionIndex():int {			return _selectedActionIndex;		}				/**		* Activates the console's focus and immediately applies any selected action index to the target layer.		*/		override public function activate($targetObject:IActionSelectable):void		{			_actionTarget = $targetObject;			_actionTarget.setAction( _selectedActionIndex );			if (_selectedActionIndex >= 0) reset();		}				/**		* Deactivates the console's focus.		*/		override public function deactivate():void		{			if (hasTarget) {				_actionTarget.clearAction(true);				_actionTarget = null;				_selectedActionIndex = -1;			}		}				/**		* Resets the console configuration.		* Called after initiating an object action or clicking the background.		*/		override public function reset():void		{			_selectedActionIndex = -1; 			uiContext.staticVerb = "";		}		//-------------------------------------------------	// Event handlers	//-------------------------------------------------			/**		* Called upon clicking an action button.		*/		private function _onActionClick($event:MouseEvent):void		{			// parse out the selected action index.			var $index:Number = parseInt( $event.target.name.split("_")[1] );			_selectedActionIndex = isNaN($index) ? -1 : $index;						// set global interaction title for the selected index.			uiContext.staticVerb = gameModel.currentResponseModel.getTitleAt(_selectedActionIndex);		}				/**		* Mouse over action button.		override protected function _onActionMouseOver($index:int):void {			super._onActionMouseOver($index);			uiContext.staticVerb = gameModel.currentResponseModel.getTitleAt($index);		}*/				/**		* Mouse out of action button.		override protected function _onActionMouseOut():void {			super._onActionMouseOut();			uiContext.staticVerb = (_selectedActionIndex >= 0) ? gameModel.currentResponseModel.getTitleAt(_selectedActionIndex) : "";		}*/	}}
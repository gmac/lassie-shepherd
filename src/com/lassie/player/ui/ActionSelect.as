/*** Lassie Engine Game Player* @author Greg MacWilliam.*/package com.lassie.player.ui{	import flash.utils.Timer;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import com.lassie.player.core.IActionSelector;	import com.lassie.player.core.IActionSelectable;	public class ActionSelect extends UILayer implements IActionSelector	{	//-------------------------------------------------	// Static behaviors	//-------------------------------------------------		/** @private stores the source, validated value for the action selector mode */		static private var _mode:String = ActionSelectMode.DYNAMIC;		static private var _timer:Timer = new Timer(400, 1);		/**		* Manages the value of the current selector mode.		*/		static public function get mode():String {			return _mode;		}		static public function set mode($mode:String):void {			// validate input before setting new mode.			if ($mode == ActionSelectMode.DYNAMIC ||				$mode == ActionSelectMode.STATIC) _mode = $mode;		}		/**		* Provides a central timer for click-and-hold activity.		*/		static public function get dynamicTimer():Timer {			return _timer;		}	//-------------------------------------------------	// Instance configuration	//-------------------------------------------------		protected var _actionTarget:IActionSelectable;		public function ActionSelect($display:MovieClip):void {			super($display);		}	//-------------------------------------------------	// IActionSelectable	//-------------------------------------------------		/**		* The console's selected action index.		*/		public function get staticActionIndex():int {			return -1;		}		/**		* Tests if action selector currently has an actionable target.		*/		public function get hasTarget():Boolean {			return !!_actionTarget;		}		/**		* Gets an object containing properties of the current actionable target.		*/		public function get actionTargetProps():Object {			return !!_actionTarget ? _actionTarget.actionProps : new Object();		}		/**		* Activates the console's focus and immediately applies any selected action index to the target layer.		*/		public function activate($targetObject:IActionSelectable):void {			// override in subclass.		}		/**		* Deactivates the console's focus.		*/		public function deactivate():void {			// override in subclass.		}		/**		* Resets the console configuration.		* Called after initiating an object action or clicking the background.		*/		public function reset():void {			// override in subclass.		}		/**		* Initializes the display's mouse responsiveness.		*/		protected function _initDisplay():void {			display.addEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver, false, 0, true);			display.addEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut, false, 0, true);		}		/**		* Enables/disables the cursor highlight.		*/		protected function _hover($enable:Boolean):void {			uiCursor.hover = $enable;		}	//-------------------------------------------------	// Event handlers	//-------------------------------------------------		/**		* Generic MouseOver event		*/		private function _onMouseOver($event:MouseEvent):void		{			// Only respond to events that concern action buttons.			if ($event.target.name.indexOf(UIInstanceName.ACTION_BUTTON) == 0)			{				// parse action index and proceed if validated.				var $index:Number = parseInt($event.target.name.split("_").pop());				if (!isNaN($index)) _onActionMouseOver($index);			}		}		/**		* Generic MouseOut event		*/		private function _onMouseOut($event:MouseEvent):void		{			if ($event.target != display) {				// mouse left an action button.				_onActionMouseOut();			}			if (!display.hitTestPoint(stage.mouseX, stage.mouseY, true)) {				// mouse has left the entire display.				_onSelectorMouseOut();			}		}		/**		* Mouse over action button.		*/		protected function _onActionMouseOver($index:int):void {			_hover(true);		}		/**		* Mouse out of action button.		*/		protected function _onActionMouseOut():void {			_hover(false);		}		/**		* Mouse out of full selector bounds.		*/		protected function _onSelectorMouseOut():void {			// override in subclass.		}	}}
package com.lassie.shell{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.display.Loader;	import flash.display.StageQuality;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.IOErrorEvent;		public final class Shell extends Sprite	{		// stage instances		public var progressMc:MovieClip;				// private		private var _lassie:Sprite;		private var _loader:Loader;		private var _contentWidth:Number;		private var _contentHeight:Number;				public function Shell():void		{			super();			progressMc.stop();			addEventListener(Event.ADDED_TO_STAGE, this._onInit, false, 0, true);		}			//-------------------------------------------------	// Initializer methods	//-------------------------------------------------				/**		* First initialize: called the first time the sprite is added to stage.		*/		private function _onInit(evt:Event):void		{			// configure stage display			removeEventListener(Event.ADDED_TO_STAGE, this._onInit);			stage.quality = StageQuality.BEST;			// look for provided content dimensions (for use with a static window).			_contentWidth = parseInt(loaderInfo.parameters.cW);			_contentHeight = parseInt(loaderInfo.parameters.cH);			// load Lassie application			var $path:String = loaderInfo.parameters.app;			if ($path == null) $path = "sheep.swf";						if ($path != null) {				// load application				_loader = _initLoader( new Loader(), true );				_loader.load( new URLRequest($path) );			}			else {				// show error message				_setProgress(-1);			}		}				/**		* Initializes / uninitializes a Loader object.		*/		private function _initLoader($loader:Loader, $enable:Boolean):Loader		{			if ($enable) {				$loader.contentLoaderInfo.addEventListener(Event.COMPLETE, this._onComplete);				$loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, this._onProgress);				$loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, this._onError);			}			else {				$loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, this._onComplete);				$loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, this._onProgress);				$loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, this._onError);			}			return $loader;		}				/**		* Sets the current progress percentage of a load.		*/		private function _setProgress($percent:Number):void		{			// set progress display			if ($percent >= 0) {				progressMc.gotoAndStop( 1 + Math.floor($percent * 99) );			}			else {				progressMc.gotoAndStop("error");			}						if ($percent < 1 && !contains(progressMc)) {				_centerProgress();				addChild(progressMc);			}			else if ($percent == 1 && contains(progressMc)) {				// hide progress bar				removeChild(progressMc);			}		}				/**		* Centers the progress display within the display window.		*/		private function _centerProgress():void		{			if (stage.scaleMode == StageScaleMode.SHOW_ALL && !!_lassie)			{				// SCALE-TO-FIT:				// map progress to the center of the lassie display.				progressMc.x = _lassie.x + Math.round(_contentWidth / 2);				progressMc.y = _lassie.y + Math.round(_contentHeight / 2);			}			else			{				// NO SCALE:				// align progress with the center of the stage display.				var $x:int = Math.round(stage.stageWidth / 2);				var $y:int = Math.round(stage.stageHeight / 2);				progressMc.x = ($x > 0) ? $x : 1024 / 2;				progressMc.y = ($y > 0) ? $y : 768 / 2;			}		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------				/** @private called upon completion of the main application load. */		private function _onComplete($event:Event):void {			_initLoader(_loader, false);			_lassie = _loader.content as Sprite;			_setProgress(1);						// clear loader object			_loader.unload();			_loader = null;						// listen to Lassie application for loading events to tap into.			_lassie.addEventListener(ProgressEvent.PROGRESS, this._onProgress);			_lassie.addEventListener(IOErrorEvent.IO_ERROR, this._onError);			addChild(_lassie);		}				/** @private called upon detection of any progress event. */		private function _onProgress($event:ProgressEvent):void {			var $percent:Number = $event.bytesLoaded / $event.bytesTotal;			_setProgress(!isNaN($percent) ? $percent : 0);		}		/** @private called upon detection of any error event. */		private function _onError($event:Event):void {			_setProgress(-1);		}	}}
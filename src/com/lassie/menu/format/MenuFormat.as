/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.format{	import com.lassie.menu.ui.UIStyle;			/**	* Lassie Player Game Menu.	*/	final public class MenuFormat	{		private var _listStyle:UIStyle;		private var _inputStyle:UIStyle;		private var _labels:Object;		private var _language:String = "";		private var _legalXML:XML;				public function MenuFormat():void		{			super();			_listStyle = new UIStyle();			_inputStyle = new UIStyle();			_labels = new Object();						var $english:String = "en";			_language = $english;			addLanguage($english, new LabelTextEnglish());			addLanguage("de", new LabelTextGerman());		}			//-------------------------------------------------	// Menu language	//-------------------------------------------------				/**		* Adds a set of language-specific labels to the menu.		*/		public function addLanguage($key:String, $text:LabelText):void {			_labels[ $key ] = $text;		}				/**		* Tests if the specified language key is present within the menu's language options.		*/		public function hasLanguage($key:String):Boolean {			return _labels.hasOwnProperty( $key );		}				/**		* Specifies the current language key.		*/		public function get language():String {			return _language;		}		public function set language($key:String):void {			if (hasLanguage($key)) _language = $key;		}				/**		* Pulls the currently enabled language text.		*/		private function _getLanguage():LabelText {			return _labels[ _language ] as LabelText;		}				/**		* Panel headers		*/		public function get legalHeader():String {			return _getLanguage().legalHeader;		}		public function get loadHeader():String {			return _getLanguage().loadHeader;		}		public function get saveHeader():String {			return _getLanguage().saveHeader;		}		public function get optionsHeader():String {			return _getLanguage().optionsHeader;		}		public function get helpHeader():String {			return _getLanguage().helpHeader;		}				/**		* Button labels		*/		public function get continueButton():String {			return _getLanguage().continueButton;		}		public function get resumeButton():String {			return _getLanguage().resumeButton;		}		public function get newButton():String {			return _getLanguage().newButton;		}		public function get loadButton():String {			return _getLanguage().loadButton;		}		public function get saveButton():String {			return _getLanguage().saveButton;		}		public function get optionsButton():String {			return _getLanguage().optionsButton;		}		public function get helpButton():String {			return _getLanguage().helpButton;		}		public function get quitButton():String {			return _getLanguage().quitButton;		}		public function get doneButton():String {			return _getLanguage().doneButton;		}		public function get confirmButton():String {			return _getLanguage().confirmButton;		}		public function get cancelButton():String {			return _getLanguage().cancelButton;		}		public function get legalButton():String {			return _getLanguage().legalButton;		}				/**		* Words		*/		public function get fullScreenOff():String {			return _getLanguage().fullScreenOff;		}		public function get fullScreenCenter():String {			return _getLanguage().fullScreenCenter;		}		public function get fullScreenFull():String {			return _getLanguage().fullScreenFull;		}		public function get graphicsQualityHigh():String {			return _getLanguage().graphicsQualityHigh;		}		public function get graphicsQualityFast():String {			return _getLanguage().graphicsQualityFast;		}				/**		* Control labels		*/		public function get musicVolumeControl():String {			return _getLanguage().musicVolumeControl;		}		public function get fxVolumeControl():String {			return _getLanguage().fxVolumeControl;		}		public function get voiceVolumeControl():String {			return _getLanguage().voiceVolumeControl;		}		public function get voiceToggleControl():String {			return _getLanguage().voiceToggleControl;		}		public function get subtitleSpeedControl():String {			return _getLanguage().subtitleSpeedControl;		}		public function get subtitleToggleControl():String {			return _getLanguage().subtitleToggleControl;		}		public function get fullscreenControl():String {			return _getLanguage().fullscreenControl;		}		public function get graphicsQualityControl():String {			return _getLanguage().graphicsQualityControl;		}		public function get legalConfirmControl():String {			return _getLanguage().legalConfirmControl;		}				/**		* Confirmation messages		*/		public function get newGameConfirm():String {			return _getLanguage().newGameConfirm;		}		public function get loadGameConfirm():String {			return _getLanguage().loadGameConfirm;		}		public function get saveGameConfirm():String {			return _getLanguage().saveGameConfirm;		}		public function get quitConfirm():String {			return _getLanguage().quitConfirm;		}				/**		* Status messages		*/		public function get newGameStatus():String {			return _getLanguage().newGameStatus;		}		public function get loadGameStatus():String {			return _getLanguage().loadGameStatus;		}		public function get saveGameStatus():String {			return _getLanguage().saveGameStatus;		}		public function get quitStatus():String {			return _getLanguage().quitStatus;		}				/**		* Legal text		*/		public function get hasLegal():Boolean {			return !!_legalXML;		}		public function get legalText():String {			if (hasLegal) return _legalXML[ language ];			return "";		}		public function set legalText($legal:String):void {			if ($legal != "") _legalXML = new XML($legal);		}			//-------------------------------------------------	// List formatting	//-------------------------------------------------				/**		* Provides a reference to the list formatting object.		*/		public function get listStyle():UIStyle {			return _listStyle;		}				/**		* Provides a reference to the input field formatting object.		*/		public function get inputStyle():UIStyle {			return _inputStyle;		}				/**		* Specifies the color of a list component's border.		*/		public function get listBorderColor():uint {			return _listStyle.listBorderColor;		}		public function set listBorderColor($color:uint):void {			_listStyle.listBorderColor = _inputStyle.listBorderColor = $color;			_listStyle.cellBorderColorTop = _inputStyle.cellBorderColorTop = $color;			_listStyle.cellBorderColorBottom = _inputStyle.cellBorderColorBottom = $color;		}				/**		* Specifies the color of a list component's normal cell state.		*/		public function get listCellColor():uint {			return _listStyle.cellBgColorNormal;		}		public function set listCellColor($color:uint):void {			_listStyle.cellBgColorNormal = $color;		}				/**		* Specifies the color of a list component's cell hover state.		*/		public function get listCellHoverColor():uint {			return _listStyle.cellBgColorHover;		}		public function set listCellHoverColor($color:uint):void {			_listStyle.cellBgColorHover = $color;		}				/**		* Specifies the color of a list component's selected cell state.		*/		public function get listCellSelectColor():uint {			return _listStyle.cellBgColorSelect;		}		public function set listCellSelectColor($color:uint):void {			_listStyle.cellBgColorSelect = _listStyle.cellBgColorSelectHover = _inputStyle.cellBgColorNormal = $color;		}	}}
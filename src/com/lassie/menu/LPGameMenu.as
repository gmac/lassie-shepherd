/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu{	import com.lassie.external.LPMovieClip;	import com.lassie.events.LassieMenuEvent;	import com.lassie.menu.actions.MenuAction;	import com.lassie.menu.format.MenuFormat;	import com.lassie.menu.views.*;	import flash.display.Sprite;	import flash.text.TextField;		/**	* Lassie Player Game Menu.	*/	public class LPGameMenu extends LPMovieClip implements ILPGameMenu	{		static public var instance:LPGameMenu;				// stage instances		public var uiMainView:MainView;		public var uiLegalView:LegalView;		public var uiLoadView:LoadView;		public var uiSaveView:SaveView;		public var uiOptionsView:OptionsView;		public var uiHelpView:HelpView;		public var uiConfirmView:ConfirmView;		public var uiStatusView:StatusView;		public var bg:Sprite;				private var _view:PanelView;		private var _helpText:String = "";		private var _helpEnabled:Boolean = true;		private var _quitEnabled:Boolean = true;		private var _voiceOption:Boolean = true;		private var _subtitleOption:Boolean = true;		private var _subtitleSpeedOption:Boolean = true;		private var _fullScreenOption:Boolean = true;		private var _graphicsQualityOption:Boolean = true;		private var _format:MenuFormat;		private var _overlay:Sprite;		private var _rectWidth:int = -1;		private var _rectHeight:int = -1;				public function LPGameMenu():void {			super();			stop();			tabEnabled = false;			tabChildren = false;			this.autoUnload = false;			LPGameMenu.instance = this;			_format = new MenuFormat();			_overlay = new Sprite();						// clear all children except the background display (if present).			var $bottom:int = (!!bg) ? 1 : 0;			while (numChildren > $bottom) removeChildAt(numChildren-1);			addChildAt(_overlay, 0);		}				/**		* Provides a reference to the menu's configured formatting object.		*/		public function get menuFormat():MenuFormat {			return _format;		}				/**		* Specifies the rectangular width and height of the content display area.		* The menu window will be centered on screen based on these window dimensions.		*/		public function get rectWidth():int {			return _rectWidth < 0 ? width : _rectWidth;		}		public function get rectHeight():int {			return _rectHeight < 0 ? height : _rectHeight;		}				/**		* Called upon each initialization on stage.		*/		override protected function _init():void {						if (!!lassiePlayer) {				// Plugged into Lassie Player:				// set the menu's language display.				_format.language = lassiePlayer.language;				_format.legalText = lassiePlayer.legalText;								// brute-force reset of legal acceptance...				// enable this line while testing your legal screen.				//lassiePlayer.hasAcceptedLegal = false;								// deactivate game keyboard input.				lassiePlayer.keyboardEnabled = false;								// Launch the initial view.				if (!!uiLegalView && !lassiePlayer.hasAcceptedLegal && _format.hasLegal) {					// LEGAL VIEW					setView( MenuView.LEGAL );				} else if (!!uiMainView) {					// MAIN MENU VIEW					setView( MenuView.MAIN );				}			}			else if (!!uiMainView) {				// Independent of Lassie Player:				setView( MenuView.MAIN );			}		}				/**		* Called upon each removal from stage.		*/		override protected function _uninit():void {			// reactivate game keyboard input.			if (!!lassiePlayer) lassiePlayer.keyboardEnabled = true;		}				/**		* Closes the game menu.		*/		public function close():void {			if (!!lassiePlayer) lassiePlayer.processXML( <menu display="hide"/>, true );			setView( MenuView.BLANK );		}				/**		* Sets a new menu view.		*/		public function setView($label:String, $action:MenuAction=null):void		{			// call mouseOut to clear any active cursor state.			dispatchEvent(new LassieMenuEvent(LassieMenuEvent.MOUSE_OUT, true));						// clean up any existing view.			if (!!_view) {				removeChild(_view);				_view.enabled = false;				_view = null;			}						// select the next view.			switch ($label) {				case MenuView.MAIN: _view = uiMainView; break;				case MenuView.LOAD: _view = uiLoadView; break;				case MenuView.SAVE: _view = uiSaveView; break;				case MenuView.OPTIONS: _view = uiOptionsView; break;				case MenuView.HELP: _view = uiHelpView; break;				case MenuView.CONFIRM: _view = uiConfirmView.setAction( $action ); break;				case MenuView.STATUS: _view = uiStatusView.setAction( $action ); break;				case MenuView.LEGAL: _view = uiLegalView; break;			}						// activate the new view.			if (!!_view) {				addChild(_view);				_view.enabled = true;				_redraw();			}		}				/**		* Redraws the screen overlay.		*/		private function _redraw():void		{			if (!!lassiePlayer) {				// set visibility of the background panel based on the view.				if (!!bg && !!_view) bg.visible = !_view.hideBg;								// clear any existing overlay.				_overlay.graphics.clear();								// center within game window.				x = Math.round((lassiePlayer.windowWidth / 2) - (rectWidth / 2));				y = Math.round((lassiePlayer.windowHeight / 2) - (rectHeight / 2));								// draw transparent screen overlay.				_overlay.x = -x;				_overlay.y = -y;				_overlay.graphics.beginFill(0x000000, 0.75);				_overlay.graphics.drawRect(0, 0, lassiePlayer.windowWidth, lassiePlayer.windowHeight);				_overlay.graphics.endFill();			}		}			//------------------------------------------------	// Menu API	//------------------------------------------------				/**		* Returns the menu's license key (this feature is currently unused).		* Menu access is currently just keyed to the implementation of ILPGameMenu.		*/		public function get licenseKey():String {			return "";		}				//[Inspectable]				/**		* Specifies the text displayed within the help panel.		*/		public function get helpText():String {			return _helpText;		}		public function set helpText($txt:String):void {			_helpText = $txt;		}				//[Inspectable]				/**		* Specifies if the "help" menu option should be visible.		*/		public function get helpEnabled():Boolean {			return _helpEnabled;		}		public function set helpEnabled($enable:Boolean):void {			_helpEnabled = $enable;		}				//[Inspectable]				/**		* Specifies if the "quit" menu option should be visible, assuming the host player application supports quitting.		*/		public function get quitEnabled():Boolean {			return _quitEnabled;		}		public function set quitEnabled($enable:Boolean):void {			_quitEnabled = $enable;		}				//[Inspectable]				/**		* Specifies if voice option controls should be visible.		*/		public function get voiceOption():Boolean {			return _voiceOption;		}		public function set voiceOption($enable:Boolean):void {			_voiceOption = $enable;		}				//[Inspectable]				/**		* Specifies if subtitle toggle control should be visible.		*/		public function get subtitleOption():Boolean {			return _subtitleOption;		}		public function set subtitleOption($enable:Boolean):void {			_subtitleOption = $enable;		}				//[Inspectable]				/**		* Specifies if subtitle speed control should be visible.		*/		public function get subtitleSpeedOption():Boolean {			return _subtitleSpeedOption;		}		public function set subtitleSpeedOption($enable:Boolean):void {			_subtitleSpeedOption = $enable;		}				//[Inspectable]				/**		* Specifies if the fullscreen option control should be visible.		*/		public function get fullScreenOption():Boolean {			return _fullScreenOption;		}		public function set fullScreenOption($enable:Boolean):void {			_fullScreenOption = $enable;		}				//[Inspectable]				/**		* Specifies if the graphics quality option control should be visible.		*/		public function get graphicsQualityOption():Boolean {			return _graphicsQualityOption;		}		public function set graphicsQualityOption($enable:Boolean):void {			_graphicsQualityOption = $enable;		}	}}
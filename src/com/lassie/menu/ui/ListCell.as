package com.lassie.menu.ui{	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.display.Shape;	import flash.events.MouseEvent;		final public class ListCell extends UIComponent	{		private var _hovering:Boolean = false;		private var _selected:Boolean = false;		private var _field:TextField;		private var _item:ListItem;				public function ListCell($item:ListItem, $style:UIStyle):void {			super();			_item = $item;						_field = new TextField();			_field.autoSize = TextFieldAutoSize.LEFT;			_field.selectable = false;			addChild(_field);						addEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver, false, 0, true);			addEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut, false, 0, true);			mouseChildren = false;						style = $style;		}				/**		* Destroys the component to optimize for garbage collection.		*/		override public function destroy():void		{			super.destroy();			removeEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver);			removeEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut);			removeChild(_field);			_field = null;			_item = null;		}				/**		* Gets the source data assigned to the list item.		*/		public function get data():ListItem {			return _item;		}				/**		* Specifies if the list item is selected or not.		*/		public function get selected():Boolean {			return _selected;		}		public function set selected($selected:Boolean):void {			_selected = $selected;			_redraw();		}				/** @private redraws the component with all current style settings. */		override protected function _redraw():void		{			_field.defaultTextFormat = style.cellTextFormat;			_field.embedFonts = false; // TODO << wire this up to the style.			_field.text = _item.label;			_field.x = style.cellTextIndent;			_field.y = Math.floor((style.cellHeight / 2) - (_field.textHeight / 2)) - 2;						var $color:uint = _selected ? 					(_hovering ? style.cellBgColorSelectHover : style.cellBgColorSelect) :				(_hovering ? style.cellBgColorHover : style.cellBgColorNormal);						graphics.clear();						// draw top border			graphics.beginFill(style.cellBorderColorTop, 1);			graphics.drawRect(0, 0, width, style.cellBorderSizeTop);			graphics.endFill();						// draw main background			graphics.beginFill($color, 1);			graphics.drawRect(0, style.cellBorderSizeTop, width, style.cellHeight - style.cellBorderSizeTop - style.cellBorderSizeBottom);			graphics.endFill();						// draw bottom border			graphics.beginFill(style.cellBorderColorBottom, 1);			graphics.drawRect(0, style.cellHeight - style.cellBorderSizeBottom, width, style.cellBorderSizeBottom);			graphics.endFill();		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------				/** @private called upon mouseOver of the component. */		private function _onMouseOver($event:MouseEvent):void {			_hovering = true;			_redraw();		}				/** @private called upon mouseOut of the component. */		private function _onMouseOut($event:MouseEvent):void {			_hovering = false;			_redraw();		}	}}
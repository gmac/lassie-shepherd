package com.lassie.menu.ui{	import flash.display.Sprite;	import flash.display.Shape;	import flash.events.Event;	import flash.events.MouseEvent;		public class List extends UIComponent	{		private var _frame:ScrollPane;		private var _list:Sprite;		private var _border:Shape;		private var _bg:Shape;		private var _selectedCell:ListCell;				public function List($style:UIStyle=null):void		{			super();						if ($style == null) $style = new UIStyle();			mouseEnabled = false;			addEventListener(MouseEvent.CLICK, this._onClickItem, false, 0, true);						_border = new Shape();			addChild(_border);						_bg = new Shape();			addChild(_bg);						_frame = new ScrollPane($style);			_frame.content = _list = new Sprite();			addChild(_frame);						style = $style;		}				/**		* Destroys the component to optimize for garbage collection.		*/		override public function destroy():void {			removeAll();			removeEventListener(MouseEvent.CLICK, this._onClickItem);			super.destroy();			_frame.destroy();			_frame = null;			_border = null;			_bg = null;		}				/**		* Specifies the visual style formatting applied to this component and all nested components.		*/		override public function set style($style:UIStyle):void {			_frame.style = $style;			super.style = $style;		}				/**		* Specifies the row height of each line item.		*/		public function get rowHeight():int {			return style.cellHeight;		}				/**		* Specifies the label of the selected item.		*/		public function get selectedItem():ListItem {			if (!!_selectedCell) return _selectedCell.data;			return null;		}				/**		* Specifies the label of the selected item.		*/		public function get selectedLabel():String {			if (!!_selectedCell) return _selectedCell.data.label;			return "";		}				/**		* Specifies the value of the selected item.		*/		public function get selectedValue():* {			if (!!_selectedCell) return _selectedCell.data.value;			return "";		}				/**		* Specifies the index of the selected list item.		*/		public function get selectedIndex():int {			if (!!_selectedCell) return _list.getChildIndex(_selectedCell);			return -1;		}		public function set selectedIndex($index:int):void {			if ($index >= 0 && $index < _list.numChildren) {				_selectCell( _list.getChildAt($index) as ListCell );			}			else {				_selectCell( null );			}		}				/**		* Removes all items from the list.		*/		public function removeAll():void {			while (_list.numChildren > 0) {				var $cell:ListCell = _list.removeChildAt(0) as ListCell;				$cell.destroy();			}			_frame.content = _list;			_selectedCell = null;		}				/**		* Adds a single ListItem to the list.		*/		public function addItem($item:ListItem):void {			_addCell($item);			_frame.content = _list;		}				/**		* Adds an array of ListItem objects to the list.		*/		public function addItems($items:Array):void		{			for each (var $item:ListItem in $items) {				_addCell($item);			}			_frame.content = _list;		}				/**		* Selects an item within the list.		*/		private function _selectCell($item:ListCell):void		{			if (!!_selectedCell) _selectedCell.selected = false;			if (!!$item) {				_selectedCell = $item;				_selectedCell.selected = true;			}		}			//-------------------------------------------------	// Private methods	//-------------------------------------------------			/** @private creats and displays a new list cell. */		private function _addCell($item:ListItem):void		{			var $cell:ListCell = new ListCell($item, style);			$cell.width = width - (style.listBorderSize * 2);			$cell.y = _list.height;			_list.addChild($cell);		}				/** @private redraws the conponent graphics. */		override protected function _redraw():void		{			_frame.x = style.listBorderSize;			_frame.y = style.listBorderSize;			_frame.width = width - (style.listBorderSize * 2);			_frame.height = height - (style.listBorderSize * 2);						//for each var						graphics.clear();			// draw border			graphics.beginFill(style.listBorderColor, 1);			graphics.drawRect(0, 0, width, height);			graphics.endFill();			// draw background			graphics.beginFill(style.listBgColor, 1);			graphics.drawRect(style.listBorderSize, style.listBorderSize, width-(style.listBorderSize * 2), height-(style.listBorderSize * 2));			graphics.endFill();		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------			/** @private called upon each click within the List. Only respond to ListItem clicks. */		private function _onClickItem($event:MouseEvent):void		{			if ($event.target is ListCell) {				_selectCell( $event.target as ListCell );				dispatchEvent(new Event(Event.CHANGE));			}		}	}}
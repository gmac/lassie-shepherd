package com.lassie.menu.ui{	import flash.display.Sprite;	import flash.display.Shape;	import flash.display.DisplayObject;	import flash.text.TextField;	import flash.events.Event;		public class ScrollPane extends UIComponent	{		private var _mask:Shape;		private var _content:DisplayObject;		private var _scroll:ScrollBar;				public function ScrollPane($style:UIStyle=null):void		{			super();			_mask = new Shape();			addChild(_mask);						// default UIStyle as a valid object.			if ($style == null) $style = new UIStyle();						// create and add scroll bar			_scroll = new ScrollBar( $style );			_scroll.addEventListener(Event.CHANGE, this._onUpdateScroll, false, 0, true);			addChild(_scroll);						style = $style;		}				/**		* Destroys the scroll frame by optimizing all elements for garbage collection.		*/		override public function destroy():void {			super.destroy();			while (numChildren > 0) removeChildAt(0);			_scroll.removeEventListener(Event.CHANGE, this._onUpdateScroll);			_scroll.destroy();			_scroll = null;			_content.mask = null;			_content = null;			_mask = null;		}				/**		* Specifies the scroll area's frame width, NOT including the scroll bar.		*/		public function get frameWidth():Number {			return _mask.width;		}		public function set frameWidth($w:Number):void {			width = $w + style.scrollWidth;		}				/**		* Specifies the width of the scrolling content.		*/		public function get contentWidth():Number {			return !!_content ? _content.width : 0;		}				/**		* Specifies the height of the scrolling content.		*/		public function get contentHeight():Number {			return !!_content ? _content.height : 0;		}				/**		* Provides a reference to the panel's scroll bar component.		*/		public function get scrollBar():ScrollBar {			return _scroll;		}				/**		* Specifies the visual style formatting applied to this component and all nested components.		*/		override public function set style($style:UIStyle):void {			_scroll.style = $style;			super.style = $style;		}				/**		* Specifies the content currently assigned to the scroll frame.		*/		public function get content():DisplayObject {			return _content;		}		public function set content($content:DisplayObject):void		{			clear();			_content = $content;			_content.x = 0;			_content.y = 0;			_content.mask = _mask;			addChildAt(_content, 0);			_redraw();		}				/**		* Resets the content's scroll position to 0 and updates the scroll bar to match new content height.		*/		public function reset():void		{			if (!!_content) {				_content.y = 0;				_redraw();			}		}				/**		* Clears any existing content display object.		*/		public function clear():void		{			if (!!_content) {				// clear content from the display.				if (contains(_content)) {					removeChild(_content);				}				// nullify mask and content references.				_content.mask = null;				_content = null;				_redraw();			}		}				/**		* Updates the content's scroll relative to the current bar setting.		*/		override public function update():void {			if (!!_content) {				if (_content is TextField) {					var $field:TextField = _content as TextField;					$field.scrollV = Math.round($field.maxScrollV * _scroll.scroll);				} else {					_content.y = Math.round((height-contentHeight) * _scroll.scroll);				}			}		}				/** @private redraws the component graphics. */		override protected function _redraw():void		{			// position and size scrollbar.			_scroll.x = width - style.scrollWidth;			_scroll.height = height;						if (_content is TextField) {				var $field:TextField = _content as TextField;				var $view:int = $field.numLines - $field.maxScrollV;				_scroll.configure($view, $field.numLines, $field.scrollV-1);			}			else {				_scroll.configure(height, contentHeight, (!!_content ? _content.y : 0));			}						// define right edge of frame area			var $frameW:int = _scroll.visible ? _scroll.x : width;						// redraw frame mask.			_mask.graphics.clear();			_mask.graphics.beginFill(0x000000, 0);			_mask.graphics.drawRect(0, 0, $frameW, height);			_mask.graphics.endFill();		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			/** @private called upon change event recieved from the scroll bar. */		private function _onUpdateScroll($event:Event):void {			update();		}	}}
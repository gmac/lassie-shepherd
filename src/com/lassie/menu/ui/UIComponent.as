package com.lassie.menu.ui{	import flash.display.Sprite;	import flash.events.Event;	internal class UIComponent extends Sprite	{		private var __init:Boolean = false;		private var _style:UIStyle;		private var _width:int = 100;		private var _height:int = 100;				public function UIComponent():void		{			super();			addEventListener(Event.ADDED_TO_STAGE, this._onAddedToStage, false, 0, true);			addEventListener(Event.REMOVED_FROM_STAGE, this._onRemovedFromStage, false, 0, true);		}				/**		* Sprite destroyer. Always call before purging a component asset.		*/		public function destroy():void {			removeEventListener(Event.ADDED_TO_STAGE, this._onAddedToStage);			removeEventListener(Event.REMOVED_FROM_STAGE, this._onRemovedFromStage);			_style = null;		}			//-------------------------------------------------	// Initialize methods	//-------------------------------------------------				/** @private First initialize: called the first time the sprite is added to stage. */		protected function _finit():void {			// override in sub-class.		}				/** @private Initialize: called each time the sprite is added to stage. */		protected function _init():void {			// override in sub-class.		}				/** @private Un-initialize: called each time the sprite is removed from stage. */		protected function _uninit():void {			// override in sub-class.		}				/** @private redraws the component graphics. */		protected function _redraw():void {			// override in sub-class.		}			//-------------------------------------------------	// Public methods	//-------------------------------------------------			/**		* Overrides width to make it an arbitrary setting that is only observed by redraw.		*/		override public function get width():Number {			return _width;		}		override public function set width($w:Number):void {			_width = $w;			_redraw();		}				/**		* Overrides height to make it an arbitrary setting that is only observed by redraw.		*/		override public function get height():Number {			return _height;		}		override public function set height($h:Number):void {			_height = $h;			_redraw();		}				/**		* Specifies the visual style formatting applied to the UI display.		*/		public function get style():UIStyle {			return _style;		}		public function set style($style:UIStyle):void {			_style = $style;			_redraw();		}				/**		* Updates the component.		*/		public function update():void {			dispatchEvent(new Event(Event.CHANGE));		}			//-------------------------------------------------	// Event handlers	//-------------------------------------------------				/** @private called each time sprite is added to the stage */		private function _onAddedToStage(evt:Event):void		{			if (!__init) {				__init = true;				_finit();			}			_init();		}				/** @private called each time sprite is removed from the stage */		private function _onRemovedFromStage(evt:Event):void {			_uninit();		}	}}
package com.lassie.menu.ui{	import flash.display.Sprite;		public class UIRect extends Sprite	{		private var _color:uint = 0x000000;		private var _alpha:Number = 1;		private var _width:int = 0;		private var _height:int = 0;				public function UIRect($color:uint=0x000000, $alpha:Number=1, $width:uint=0, $height:uint=0):void		{			super();			_width = $width;			_height = $height;			_color = $color;			_alpha = $alpha;						// refresh shape if rect has area.			if (_width * _height > 0) refresh();		}				/**		* Specifies the color of the rect.		*/		public function get color():uint {			return _color;		}		public function set color($color:uint):void {			_color = $color;			refresh();		}				/**		* Specifies the alpha of the rect.		*/		override public function get alpha():Number {			return _alpha;		}		override public function set alpha($alpha:Number):void {			if (!isNaN($alpha)) _alpha = $alpha;			refresh();		}				/**		* Specifies the width of the rect.		*/		override public function get width():Number {			return _width;		}		override public function set width($width:Number):void {			if (!isNaN($width)) _width = $width;			refresh();		}				/**		* Specifies the height of the rect.		*/		override public function get height():Number {			return _height;		}		override public function set height($height:Number):void {			if (!isNaN($height)) _height = $height;			refresh();		}				/**		* Calls for redraw of the rect with a new width and height.		* This method is final and cannot be overridden.		* To change the redraw behavior, override the protected "_redraw()" method.		* @see _redraw()		*/		final public function redraw($width:int, $height:int):void		{			_width = $width;			_height = $height;			_redraw();		}				/**		* Performs a redraw of the rectangle with all current display settings.		*/		protected function _redraw():void		{			graphics.clear();			graphics.beginFill(_color, _alpha);			graphics.drawRect(0, 0, _width, _height);			graphics.endFill();		}				/**		* Refreshs the rect's appearance using its current width and height.		*/		public function refresh():void {			redraw(_width, _height);		}	}}
/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.controls{	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.events.MouseEvent;	import flash.events.Event;		/**	* Lassie Player game menu toggle control.	*/	public class ToggleControl extends MovieClip	{		// stage instances.		public var uiLabelText:TextField;		public var uiHitArea:MovieClip;		private var _selected:Boolean = false;		private var _hovering:Boolean = false;				public function ToggleControl():void		{			super();			stop();						uiHitArea.stop();			uiHitArea.visible = false;			hitArea = uiHitArea;			buttonMode = true;			mouseChildren = false;			uiLabelText.autoSize = TextFieldAutoSize.LEFT;						addEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver, false, 0, true);			addEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut, false, 0, true);			addEventListener(MouseEvent.MOUSE_DOWN, this._onMouseDown, false, 0, true);		}				/**		* Specifies the button label text.		*/		public function get label():String {			return uiLabelText.text;		}		public function set label($label:String):void {			uiLabelText.text = $label;		}		/**		* Specifies the button label text.		*/		public function get selected():Boolean {			return _selected;		}		public function set selected($select:Boolean):void {			_selected = $select;			_redraw();		}				/**		* Redraws the toggle button with all current settings represented.		*/		private function _redraw():void {			gotoAndStop((_selected ? 3 : 1) + (_hovering ? 1 : 0));		}				/** @private called upon mouse over on the toggle. */		private function _onMouseOver($event:Event):void {			_hovering = true;			_redraw();		}				/** @private called upon mouse out from the toggle. */		private function _onMouseOut($event:Event):void {			_hovering = false;			_redraw();		}				/** @private called upon mouse down on the toggle. */		private function _onMouseDown($event:Event):void {			selected = !selected;			dispatchEvent( new Event(Event.CHANGE) );		}	}}
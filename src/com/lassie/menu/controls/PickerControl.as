/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.controls{	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.events.MouseEvent;	import flash.events.Event;		/**	* Lassie Player game menu picker control.	*/	public class PickerControl extends MovieClip	{		// stage instances.		public var uiLabelText:TextField;		public var uiValueText:TextField;		public var uiHitArea:MovieClip;		private var _labels:Array;		private var _values:Array;		private var _selected:Boolean = false;		private var _hovering:Boolean = false;		private var _selectedIndex:int = -1;		private var _selectedValue:String = "";				public function PickerControl():void		{			super();			stop();						_labels = new Array();			_values = new Array();						uiHitArea.stop();			uiHitArea.visible = false;			hitArea = uiHitArea;			buttonMode = true;			mouseChildren = false;			uiLabelText.autoSize = TextFieldAutoSize.LEFT;						addEventListener(MouseEvent.MOUSE_OVER, this._onMouseOver, false, 0, true);			addEventListener(MouseEvent.MOUSE_OUT, this._onMouseOut, false, 0, true);			addEventListener(MouseEvent.MOUSE_DOWN, this._onMouseDown, false, 0, true);		}				/**		* Specifies the button label text.		*/		public function get label():String {			return uiLabelText.text;		}		public function set label($label:String):void {			uiLabelText.text = $label;		}		/**		* Adds an option to the picker.		*/		public function addOption($label:String, $value:String):void {			_labels.push( $label.toUpperCase() );			_values.push( $value );			if (_selectedIndex < 0) setIndex(0);		}				/**		* Swaps in a new list of labels (used for localization);		*/		public function swapLabels($labels:Array):void {			_labels = $labels;						if (_selectedIndex >= 0) {				// set new selected label.				uiValueText.text = _labels[ _selectedIndex ];			}		}				/**		* Sets the currently selected option index.		*/		public function setIndex($index:int):void		{			if (_values.length < 1) {				// invalidate value when there are no options present.				_selectedIndex = -1;			}			else if ($index < 0 || $index >= _values.length) {				// default index to zero when the value goes out of range.				_selectedIndex = 0;			}			else {				// otherwise, allow specified value to be set.				_selectedIndex = $index;			}						if (_selectedIndex >= 0) {				// set new selected label.				uiValueText.text = _labels[ _selectedIndex ];			}		}				/**		* Specifies the selected picker value.		*/		public function get value():String {			if (_selectedIndex >= 0) return _values[ _selectedIndex ];			return "";		}		public function set value($val:String):void {			setIndex( _values.indexOf( $val ) );		}				/** @private called upon mouse over on the toggle. */		private function _onMouseOver($event:Event):void {			_hovering = true;			gotoAndStop(2);		}				/** @private called upon mouse out from the toggle. */		private function _onMouseOut($event:Event):void {			_hovering = false;			gotoAndStop(1);		}				/** @private called upon mouse down on the toggle. */		private function _onMouseDown($event:Event):void {			setIndex(_selectedIndex + 1);			dispatchEvent( new Event(Event.CHANGE) );		}	}}
/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.views{	import com.lassie.menu.views.MenuView;	import com.lassie.menu.controls.HeaderControl;	import com.lassie.menu.controls.ButtonControl;	import com.lassie.menu.actions.SaveGameAction;	import com.lassie.menu.ui.List;	import com.lassie.menu.ui.TextInput;	import com.lassie.menu.ui.UIStyle;	import flash.display.Sprite;	import flash.display.InteractiveObject;	import flash.events.MouseEvent;	import flash.events.Event;		/**	* Lassie Player game menu; save panel controller.	*/	public class SaveView extends PanelView	{		// stage instances		public var uiListRect:Sprite;		public var uiGameList:List;		public var uiSaveName:TextInput;		public var uiSaveHeader:HeaderControl;		public var uiSaveAction:ButtonControl;		public var uiSaveCancel:ButtonControl;					public function SaveView():void {			super();						// create style and clear template.			var $style:UIStyle = new UIStyle();			removeChild( uiListRect );						// create list.			uiGameList = new List( $style );			uiGameList.x = uiListRect.x;			uiGameList.y = uiListRect.y;			uiGameList.width = uiListRect.width;			uiGameList.height = uiListRect.height;			addChild( uiGameList );						// create save name input.			uiSaveName = new TextInput( $style );			uiSaveName.x = uiGameList.x + 1;			uiSaveName.y = uiGameList.y + 2;			uiSaveName.width = uiGameList.width - 2;			uiSaveName.height = uiGameList.rowHeight;			addChild( uiSaveName );		}				/**		* Configures event listeners on all UI controls.		*/		override protected function _enableControls($enable:Boolean):void		{			if (!!lassiePlayer) {				if ($enable) {					uiGameList.addEventListener(MouseEvent.CLICK, this._onSelectGame, false, 0, true);					uiSaveName.addEventListener(Event.CHANGE, this._onSetName, false, 0, true);					uiSaveAction.addEventListener(MouseEvent.CLICK, this._onSaveGame, false, 0, true);					uiSaveCancel.addEventListener(MouseEvent.CLICK, this._onCancel, false, 0, true);				}				else {					uiGameList.removeEventListener(MouseEvent.CLICK, this._onSelectGame);					uiSaveName.addEventListener(Event.CHANGE, this._onSetName);					uiSaveAction.removeEventListener(MouseEvent.CLICK, this._onSaveGame);					uiSaveCancel.removeEventListener(MouseEvent.CLICK, this._onCancel);				}			}		}				/**		* Populates all control label texts.		*/		override protected function _setLabels():void		{			uiSaveHeader.label = menuFormat.saveHeader;			uiSaveAction.label = menuFormat.saveButton;			uiSaveCancel.label = menuFormat.cancelButton;		}				/**		* Populates the view with all current Lassie Player settings.		*/		override protected function _populate():void		{			_populateGamesList( uiGameList, false );			uiSaveName.style = menuFormat.inputStyle;			uiSaveName.height = uiGameList.rowHeight;			_setSelection( lassiePlayer.activeGameIndex );		}				/**		* Tests is a valid game record is selected.		*/		private function _validateSelection():Boolean {			return (uiSaveName.text != "");		}				/**		* Tests is a valid game record is selected.		*/		private function _setSelection($index:int):void		{			// set the list's selected index.			if (uiGameList.selectedIndex != $index)				uiGameList.selectedIndex = $index;						if ($index > -1) {				// place and populate the name field ontop of the selected line item.				uiSaveName.y = uiGameList.y + (uiGameList.rowHeight * $index) + 2;				uiSaveName.text = uiGameList.selectedItem.label;				uiSaveName.visible = true;				uiSaveName.setFocus();			}			else {				uiSaveName.visible = false;				uiSaveName.text = "";			}			// update the save button status.			uiSaveAction.mouseEnabled = _validateSelection();		}			//--------------------------------------------------	// Button Handlers	//--------------------------------------------------				/** @private called upon click of the "New Game" button. */		private function _onSelectGame($event:Event):void {			_setSelection( uiGameList.selectedIndex );		}				/** @private called upon changing the name of the saved game. */		private function _onSetName($event:Event):void {			uiSaveAction.mouseEnabled = _validateSelection();		}				/** @private called upon click of the "New Game" button. */		private function _onSaveGame($event:Event):void		{			if (_validateSelection()) {				// immediately save the game if the slot was originally blank.				// otherwise, confirm that the slot should be overwritten.				var $save:SaveGameAction = new SaveGameAction( uiGameList.selectedIndex, uiSaveName.text );				if (uiGameList.selectedItem.label == "") $save.call();				else $save.confirm();			}		}				/** @private called upon click of the "Load Game" button. */		private function _onCancel($event:Event):void {			gameMenu.setView( MenuView.MAIN );		}	}}
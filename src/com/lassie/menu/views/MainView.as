/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.views{	import com.lassie.menu.views.MenuView;	import com.lassie.menu.controls.ButtonControl;	import com.lassie.menu.actions.NewGameAction;	import com.lassie.menu.actions.QuitAction;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.events.Event;		/**	* Lassie Player game gameMenu; main panel controller.	*/	public class MainView extends PanelView	{		// stace instances.		public var uiMainInfo:TextField;		public var uiMainResume:ButtonControl;		public var uiMainNew:ButtonControl;		public var uiMainLoad:ButtonControl;		public var uiMainSave:ButtonControl;		public var uiMainOptions:ButtonControl;		public var uiMainHelp:ButtonControl;		public var uiMainQuit:ButtonControl;				// status flags to be set to the "continue status" toggle.		private const CONTINUTE_NEW:int = 0;		private const CONTINUTE_YES:int = 1;		private const CONTINUTE_NO:int = -1;				// specifies the player's status for continuing a game.		// CONTINUTE_NEW: First menu view. Continue option will display, but may not be active.		// CONTINUTE_YES: Continute option is enabled. Clicking button will contine the last game.		// CONTINUTE_NO: Continute option is now disabled.		private var _continueStatus:int = CONTINUTE_NEW;						public function MainView():void {			super();			hideBg = true;		}				/**		* Configures event listeners on all UI controls.		*/		override protected function _enableControls($enable:Boolean):void		{			if (!!lassiePlayer) {				if ($enable) {					uiMainResume.addEventListener(MouseEvent.CLICK, this._onResumeGame, false, 0, true);					uiMainNew.addEventListener(MouseEvent.CLICK, this._onNewGame, false, 0, true);					uiMainLoad.addEventListener(MouseEvent.CLICK, this._onLoadGame, false, 0, true);					uiMainSave.addEventListener(MouseEvent.CLICK, this._onSaveGame, false, 0, true);					uiMainOptions.addEventListener(MouseEvent.CLICK, this._onGameOptions, false, 0, true);					uiMainHelp.addEventListener(MouseEvent.CLICK, this._onGameHelp, false, 0, true);					uiMainQuit.addEventListener(MouseEvent.CLICK, this._onQuitGame, false, 0, true);				}				else {					uiMainResume.removeEventListener(MouseEvent.CLICK, this._onResumeGame);					uiMainNew.removeEventListener(MouseEvent.CLICK, this._onNewGame);					uiMainLoad.removeEventListener(MouseEvent.CLICK, this._onLoadGame);					uiMainSave.removeEventListener(MouseEvent.CLICK, this._onSaveGame);					uiMainOptions.removeEventListener(MouseEvent.CLICK, this._onGameOptions);					uiMainHelp.removeEventListener(MouseEvent.CLICK, this._onGameHelp);					uiMainQuit.removeEventListener(MouseEvent.CLICK, this._onQuitGame);				}			}		}				/**		* Populates all control label texts.		*/		override protected function _setLabels():void		{			uiMainResume.label = _continueStatus == CONTINUTE_NEW ? menuFormat.continueButton : menuFormat.resumeButton;			uiMainNew.label = menuFormat.newButton;			uiMainLoad.label = menuFormat.loadButton;			uiMainSave.label = menuFormat.saveButton;			uiMainOptions.label = menuFormat.optionsButton;			uiMainHelp.label = menuFormat.helpButton;			uiMainQuit.label = menuFormat.quitButton;		}				/**		* Populates the view with all current Lassie Player settings.		*/		override protected function _populate():void		{			if (!!lassiePlayer) {				if (!!uiMainInfo) uiMainInfo.htmlText = lassiePlayer.gameTitle +'<br>By '+ lassiePlayer.authorName;								if (_continueStatus == CONTINUTE_NEW) {					// First view: player may continute their last game.					uiMainResume.mouseEnabled = lassiePlayer.hasContinueGame;					_continueStatus = CONTINUTE_YES;				} else {					// Later view: player may only resume their existing game.					uiMainResume.mouseEnabled = lassiePlayer.gameHasLaunched;					uiMainResume.label = menuFormat.resumeButton;					_continueStatus = CONTINUTE_NO;				}				uiMainSave.mouseEnabled = lassiePlayer.gameHasLaunched;				uiMainHelp.visible = gameMenu.helpEnabled;				uiMainQuit.visible = (lassiePlayer.quitEnabled && gameMenu.quitEnabled);			}		}			//--------------------------------------------------	// Button Handlers	//--------------------------------------------------				/** @private called upon click of the "New Game" button. */		private function _onResumeGame($event:Event):void {			if (_continueStatus == CONTINUTE_YES) {				lassiePlayer.continueGame();			}			gameMenu.close();		}				/** @private called upon click of the "New Game" button. */		private function _onNewGame($event:Event):void {			var $action:NewGameAction = new NewGameAction();			if (!lassiePlayer.gameHasLaunched) $action.call();			else $action.confirm();		}				/** @private called upon click of the "Load Game" button. */		private function _onLoadGame($event:Event):void {			gameMenu.setView( MenuView.LOAD );		}				/** @private called upon click of the "Save Game" button. */		private function _onSaveGame($event:Event):void {			gameMenu.setView( MenuView.SAVE );		}				/** @private called upon click of the "Options" button. */		private function _onGameOptions($event:Event):void {			gameMenu.setView( MenuView.OPTIONS );		}				/** @private called upon click of the "Help" button. */		private function _onGameHelp($event:Event):void {			gameMenu.setView( MenuView.HELP );		}				/** @private called upon click of the "Quit" button. */		private function _onQuitGame($event:Event):void {			new QuitAction().confirm();		}	}}
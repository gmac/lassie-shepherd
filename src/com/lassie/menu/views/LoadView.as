/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.menu.views{	import com.lassie.menu.views.MenuView;	import com.lassie.menu.controls.HeaderControl;	import com.lassie.menu.controls.ButtonControl;	import com.lassie.menu.actions.LoadGameAction;	import com.lassie.menu.ui.List;	import com.lassie.menu.ui.UIStyle;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;		/**	* Lassie Player game menu; load panel controller.	*/	public class LoadView extends PanelView	{		// stage instances		public var uiListRect:Sprite;		public var uiGameList:List;		public var uiLoadHeader:HeaderControl;		public var uiLoadAction:ButtonControl;		public var uiLoadCancel:ButtonControl;					public function LoadView():void {			super();						uiGameList = new List( new UIStyle() );			uiGameList.x = uiListRect.x;			uiGameList.y = uiListRect.y;			uiGameList.width = uiListRect.width;			uiGameList.height = uiListRect.height;			removeChild( uiListRect );			addChild( uiGameList );		}		/**		* Configures event listeners on all UI controls.		*/		override protected function _enableControls($enable:Boolean):void		{			if (!!lassiePlayer) {				if ($enable) {					uiGameList.addEventListener(Event.CHANGE, this._onSelectGame, false, 0, true);					uiLoadAction.addEventListener(MouseEvent.CLICK, this._onLoadGame, false, 0, true);					uiLoadCancel.addEventListener(MouseEvent.CLICK, this._onCancel, false, 0, true);				}				else {					uiGameList.removeEventListener(Event.CHANGE, this._onSelectGame);					uiLoadAction.removeEventListener(MouseEvent.CLICK, this._onLoadGame);					uiLoadCancel.removeEventListener(MouseEvent.CLICK, this._onCancel);				}			}		}				/**		* Populates all control label texts.		*/		override protected function _setLabels():void		{			uiLoadHeader.label = menuFormat.loadHeader;			uiLoadAction.label = menuFormat.loadButton;			uiLoadCancel.label = menuFormat.cancelButton;		}				/**		* Populates the view with all current Lassie Player settings.		*/		override protected function _populate():void		{			_populateGamesList( uiGameList );			uiLoadAction.mouseEnabled = _validateSelection();		}				/**		* Tests is a valid game record is selected.		*/		private function _validateSelection():Boolean {			return (uiGameList.selectedIndex > -1 && uiGameList.selectedItem.label != "");		}			//--------------------------------------------------	// Button Handlers	//--------------------------------------------------				/** @private called upon selection of a list item. */		private function _onSelectGame($event:Event):void {			uiLoadAction.mouseEnabled = _validateSelection();		}				/** @private called upon click of the "Load Game" button. */		private function _onLoadGame($event:Event):void		{			if (_validateSelection()) {				// immediately load the game if no game has launched yet.				// otherwise, confirm that the current game session should be terminated.				var $load:LoadGameAction = new LoadGameAction( uiGameList.selectedIndex );				if (!lassiePlayer.gameHasLaunched) $load.call();				else $load.confirm();			}		}				/** @private called upon click of the "cancel" button. */		private function _onCancel($event:Event):void {			gameMenu.setView( MenuView.MAIN );		}	}}
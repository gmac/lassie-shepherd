/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.events{	import flash.events.Event;	/**	* Event object used to send scripts and messages from external Flash media up to the LassiePlayer	*/	final public class LassieEvent extends Event	{		/**		* Event type called upon completion of a timeline animation.		*/		static public const ANIMATION_COMPLETE:String = "lassieAnimComplete";				/**		* Event type called upon reaching a break point within a looping timeline animation.		*/		static public const ANIMATION_BREAK:String = "lassieAnimBreak";				/**		* Event type called to subscribe a timeline with engine tracking.		*/		static public const ADD_TIMELINE:String = "lassieAddTimeline";				/**		* Event type called to unsubscribe a timeline from engine tracking.		*/		static public const REMOVE_TIMELINE:String = "lassieRemoveTimeline";				/**		* Event type used to dispatch an XML script.		*/		static public const SCRIPT:String = "lassieScript";				/**		* Event type called from the stage upon completion of a dialogue line (used by cutscene engine).		*/		static public const DIALOGUE_COMPLETE:String = "lassieDialogueComplete";				/**		* Event type called when the game room changes.		*/		static public const ROOM_CHANGE:String = "lassieRoomChange";				/**		* Event type called from the stage upon entering into a new dialogue tree.		*/		static public const TREE_ENTER:String = "lassieTreeEnter";				/**		* Event type called from the stage upon exiting from a dialogue tree.		*/		static public const TREE_EXIT:String = "lassieTreeExit";				/**		* Event type called from the stage upon showing the inventory panel.		*/		static public const INVENTORY_SHOW:String = "lassieInventoryShow";				/**		* Event type called from the stage upon hiding the inventory panel.		*/		static public const INVENTORY_HIDE:String = "lassieInventoryHide";				/**		* Event type called from the stage upon starting a skippable sequence.		*/		static public const SEQUENCE_START:String = "lassieSequenceStart";				/**		* Event type called from the stage upon completing a skippable sequence.		*/		static public const SEQUENCE_END:String = "lassieSequenceEnd";						/** @private */		private var _script:XML;		private var _branchProcess:Boolean = false;				/**		* Creates a new LassieEvent		* @param type The type of event. The type should use one of the LassieEvent constant types.		* @param script An XML script to be called within the the LassiePlayer.		* @param branch Specifies if the provided XML script should be run as a process branch or overwrite the trunk process.		*/		public function LassieEvent($type:String, $script:XML=null, $branch:Boolean=true):void		{			super($type, true, false);			_script = $script;			_branchProcess = $branch;		}				/**		* Provides the XML script associated with the event.		*/		public function get script():XML {			return _script;		}				/**		* Specifies if the provided XML should branch into a new process or overwrite the current process queue.		*/		public function get branchProcess():Boolean {			return _branchProcess;		}	}}
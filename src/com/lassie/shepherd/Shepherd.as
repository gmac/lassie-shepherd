package com.lassie.shepherd{	import flash.events.Event;	import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.display.StageQuality;	import flash.display.StageAlign;	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.core.LibraryManager;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.data.FileService;	import com.lassie.shepherd.services.ServicePackage;	import com.lassie.shepherd.editors.game.GameEditor;	import com.lassie.shepherd.editors.room.RoomEditor;	import com.lassie.shepherd.events.ShepherdEvent;		public final class Shepherd extends LSSprite	{		public static var resourcePath:String = "../../";		public static var services:ServicePackage;		public static var gameEditor:GameEditor;		public static var roomEditor:RoomEditor;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function Shepherd():void		{			super();			trace("[Shell] loading application...");						if (parent != null)			{				// running locally				FileIO.LOCAL_HOST = true;				LibraryManager.LOCAL_HOST = true;								// prepend dev URL onto file services when running locally.				FileService.FILE_SERVICE = FileService.DEV_SERVICE_URL + FileService.FILE_SERVICE;				resourcePath = "";			}		}		protected override function launch():void		{			// configure stage display			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.quality = StageQuality.BEST;			stage.stageFocusRect = false;						// construct components			Shepherd.services = new ServicePackage(stage);			Shepherd.gameEditor = new GameEditor();			Shepherd.roomEditor = new RoomEditor();						// configure interfacing event listeners			gameEditor.addEventListener(ShepherdEvent.LOAD_ROOM, this._onLoadRoom);			gameEditor.addEventListener(ShepherdEvent.UNLOAD_ROOM, this._onUnloadRoom);			roomEditor.addEventListener(ShepherdEvent.OPEN_GAME_EDITOR, this._onOpenGameEditor);						addChild(roomEditor);			addChild(gameEditor);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				// called by GameEditor to launch a room layout		private function _onLoadRoom(evt:Event):void {			removeChild( gameEditor );			roomEditor.loadRoom();		}				// called by GameEditor to clear a room layout		private function _onUnloadRoom(evt:Event):void {			roomEditor.unloadRoom();		}				// called by RoomEditor to pop the GameEditor window		private function _onOpenGameEditor(evt:Event):void {			addChild( gameEditor );		}	}}
package com.lassie.shepherd.services.files{	import com.lassie.shepherd.services.ServiceWindow;	import com.lassie.shepherd.data.FileService;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.core.IServicePackage;	import com.lassie.shepherd.core.IDataCore;	import com.lassie.shepherd.ui.buttons.LabeledActionButton;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import com.lassie.shepherd.events.ServiceEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.controls.List;		public final class FileSelectorWindow extends ServiceWindow	{		public var filesList:List;		public var loadBttn:LabeledActionButton;		public var cancelBttn:LabeledActionButton;				private var _services:IServicePackage;		private var _database:IDataCore;		private var _extFilter:String = FileService.EXT_SWF;		private var _listPath:String;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function FileSelectorWindow(services:IServicePackage):void		{			super();						// store reference to service interface so that window can call lib loads			_services = services;						filesList.tabEnabled = false;			filesList.allowMultipleSelection = false;						loadBttn.label = "Add Selected";			loadBttn.icon = ActionButtonIcons.LOAD;			loadBttn.addEventListener(MouseEvent.CLICK, this._onAddFile);						cancelBttn.label = "Cancel"			cancelBttn.icon = ActionButtonIcons.CANCEL;			cancelBttn.addEventListener(MouseEvent.CLICK, this._onCancel);		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public override function redraw():void		{			var pad:int = 5;			loadBttn.y = cancelBttn.y = (filesList.y + filesList.height + pad);			loadBttn.x = filesList.x;			cancelBttn.x = loadBttn.x + loadBttn.width + (pad*2);						resizeWindow((filesList.x * 2)+filesList.width, loadBttn.y+loadBttn.height+pad);		}				public function populate(path:String, ext:String, db:IDataCore):void		{			_listPath = path;			_extFilter = ext;			_database = db;						filesList.removeAll();			filesList.enabled = false;						var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this._onFileListLoad);			io.request(FileService.FILE_SERVICE, _listPath);		}				private function _popFileList(files:String=""):void		{			// append path header to library file requests.			var path:String = (_listPath != FileService.PATH_RAW_DATA) ? _listPath : "";			var list:Array = FileService.filterReturn(files, _extFilter, path).split(",");						for (var j:int=0; j < list.length; j++)			{				filesList.addItem({label:list[j], data:list[j]});			}			filesList.enabled = true;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function _onFileListLoad(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onFileListLoad);			_popFileList(io.data);		}				private function _onAddFile(evt:Event):void		{			// if there is a library selected			if (filesList.selectedIndex > -1)			{				var sel:String = filesList.selectedItem.data;				var added:Boolean = false;				if (_database != null)				{					// if a database was provided,					// add selected item to data service					switch(_listPath)					{						case FileService.PATH_LIB_ROOT: added = _database.addCoreLib(sel); break;						case FileService.PATH_LIB_VOICE: added = _database.addVoiceLib(sel); break;						case FileService.PATH_RAW_DATA: added = _database.addRawData(sel); break;					}										// if item was added and library was a core library					if (added && _listPath == FileService.PATH_LIB_ROOT)					{						// load libraries into application						_services.loadLibs(_database.getCoreLibs());					}					else					{						// otherwise, close service window						close();					}					_listPath = "";					_database = null;				}				else				{					// if no database was provided,					// notify of selected file name via event.					var alert:ServiceEvent = new ServiceEvent(ServiceEvent.SELECT_FILE, true);					alert.selectedFile = sel;					dispatchEvent(alert);				}			}		}				private function _onCancel(evt:Event):void		{			close();		}	}}
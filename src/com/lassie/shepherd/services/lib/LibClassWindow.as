package com.lassie.shepherd.services.lib{	import com.lassie.shepherd.services.ServiceWindow;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.ui.buttons.LabeledActionButton;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import com.lassie.shepherd.core.ILibraryManager;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import fl.controls.List;		public final class LibClassWindow extends ServiceWindow	{		public var libraryList:List;		public var classList:List;		public var selectBttn:LabeledActionButton;		public var noneBttn:LabeledActionButton;		public var cancelBttn:LabeledActionButton;				private var _lib:String="";		private var _class:String="";		private var _classType:String;		private var _library:ILibraryManager;		private var _contentType:String = LibClassContent.MOVIE_CLIP_CONTENT;	// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function LibClassWindow():void		{			super();						libraryList.tabEnabled = classList.tabEnabled = false;			libraryList.allowMultipleSelection = classList.allowMultipleSelection = false;			libraryList.addEventListener(Event.CHANGE, this._onLibSelect);						selectBttn.label = "Select Class";			selectBttn.icon = ActionButtonIcons.LOAD;			selectBttn.addEventListener(MouseEvent.CLICK, this._onSelectClass);						noneBttn.label = "Clear Class";			noneBttn.icon = ActionButtonIcons.OMIT;			noneBttn.addEventListener(MouseEvent.CLICK, this._onClearClass);						cancelBttn.label = "Cancel";			cancelBttn.icon = ActionButtonIcons.CANCEL;			cancelBttn.addEventListener(MouseEvent.CLICK, this._onCancel);		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public override function redraw():void		{			var pad:int = 5;			selectBttn.y = noneBttn.y = cancelBttn.y = (libraryList.y + libraryList.height + pad);			selectBttn.x = libraryList.x;			noneBttn.x = selectBttn.x + selectBttn.width + (pad*2);			cancelBttn.x = noneBttn.x + noneBttn.width + (pad*2);						resizeWindow((libraryList.x * 2)+classList.x+classList.width, selectBttn.y+selectBttn.height+pad);		}				public function populate(lib:ILibraryManager, currentSelection:String, contentType:String=LibClassContent.MOVIE_CLIP_CONTENT):void		{			_library = lib;			_contentType = contentType;			var asset:Array = currentSelection.split(":");			var library:String = asset[0];			var libclass:String = (asset.length > 1) ? asset[1] : "";			_popLibraryList(library);			_popClassList(libclass);		}				private function _popLibraryList(selectLib:String=""):void		{			// update list of libraries						var list:Array = _library.getLibrariesList();			var selectIndex:int = -1;						libraryList.removeAll();						for (var j:int=0; j < list.length; j++)			{				libraryList.addItem({label:list[j], data:list[j]});				if (list[j] == selectLib) selectIndex = j;			}						// if there are any library options, force select one item in the list.			libraryList.selectedIndex = (j > 0) ? Math.max(0, selectIndex) : -1;		}				private function _popClassList(selectClass:String=""):void		{			classList.removeAll();						// if library list contains a valid selection			if (libraryList.selectedIndex > -1)			{				// update list of classes				var list:Array = _getContentsList(libraryList.selectedItem.label);				var selectIndex:int = -1;					for (var j:int=0; j < list.length; j++)				{					classList.addItem({label:list[j], data:list[j]});					if (list[j] == selectClass) selectIndex = j;				}								classList.selectedIndex = selectIndex;			}		}				private function _getContentsList(lib:String):Array		{			switch(_contentType)			{				case LibClassContent.MOVIE_CLIP_CONTENT: return _library.getLibraryMovieClips(lib);				case LibClassContent.SOUND_CONTENT: return _library.getLibrarySounds(lib);				case LibClassContent.XML_CONTENT: return _library.getLibraryXML(lib);			}			return null;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function _onLibSelect(evt:Event):void		{			_popClassList();		}				private function _onSelectClass(evt:Event):void		{			if (classList.selectedIndex > -1)			{				var mssg:ServiceEvent = new ServiceEvent(ServiceEvent.SELECT_LIBRARY_ASSET, true);				mssg.libraryAsset = libraryList.selectedItem.data +":"+ classList.selectedItem.data;				dispatchEvent(mssg);				close();			}		}				private function _onClearClass(evt:Event):void		{			var mssg:ServiceEvent = new ServiceEvent(ServiceEvent.SELECT_LIBRARY_ASSET, true);			mssg.libraryAsset = "";			dispatchEvent(mssg);			close();		}				private function _onCancel(evt:Event):void		{			close();		}	}}
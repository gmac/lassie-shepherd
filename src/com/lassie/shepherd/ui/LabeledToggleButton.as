package com.lassie.shepherd.ui{	import com.lassie.shepherd.core.LSSprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;		public class LabeledToggleButton extends LSSprite implements IToggle	{		public var value:String = "";		public var toggle:Boolean = true;		public var labelText:TextField;		private var _selected:Boolean = false;		private var _hovering:Boolean = false;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function LabeledToggleButton():void		{			super();						labelText.autoSize = TextFieldAutoSize.LEFT;			labelText.x = 3;						tabEnabled = false;			mouseChildren = false;			buttonMode = true;			useHandCursor = true;		}				protected override function init():void		{			addEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);			addEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);			addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);		}				protected override function uninit():void		{			removeEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);			removeEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);			removeEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);		}				private function redraw(hover:Boolean=false):void		{			var fill:uint = selected ? 0x90C1EF : 0xcccccc;			var stroke:uint = hover ? 0xFDD156 : (selected ? 0x2E579B : 0x666666);			var w:int = (labelText.x * 2) + labelText.width;			var h:int = labelText.height - 1;						graphics.clear();			graphics.lineStyle(1, stroke, (hover ? 1 : 0.5), true);			graphics.beginFill(fill, (selected ? 0.75 : 0.5));			graphics.drawRoundRect(0, 0, w, h, 6);			graphics.endFill();		}			// --------------------------------------------------	//  Getter / setters	// --------------------------------------------------				public function get label():String		{			return labelText.text;		}				public function set label(val:String):void		{			labelText.text = val;			redraw(_hovering);		}				public function get selected():Boolean		{			return _selected;		}				public function set selected(val:Boolean):void		{			_selected = val;			redraw(_hovering);		}				public function get enabled():Boolean		{			return mouseEnabled;		}				public function set enabled(val:Boolean):void		{			alpha = val ? 1 : 0.25;			mouseEnabled = val;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleMouseOver(evt:MouseEvent):void		{			_hovering = true;			redraw(true);		}				private function handleMouseOut(evt:MouseEvent):void		{			_hovering = false;			redraw(false);		}				private function handleMouseDown(evt:MouseEvent):void		{			if (toggle)			{				selected = !selected;				dispatchEvent(new Event(Event.CHANGE));			}		}	}}
package com.lassie.shepherd.ui{	import com.lassie.shepherd.core.LSSprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;		public class ToggleButton extends LSSprite implements IToggle	{		public static const ICON_LOCK:String = "lock";		public static const ICON_VISIBLE:String = "visible";				protected var colorOn:ColorTransform = new ColorTransform(0, 0, 0, 1, 144, 193, 239, 0);		protected var colorOff:ColorTransform = new ColorTransform(1, 1, 1, 1, 0, 0, 0, 0);			// --------------------------------------------------	//  Private members	// --------------------------------------------------				public var bgDisplay:MovieClip;		public var iconDisplay:MovieClip;		public var borderDisplay:MovieClip;				private var _selected:Boolean = false;		private var _icon:String = ToggleButton.ICON_LOCK;		private const ON:String = "_on";		private const OFF:String = "_off";			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function ToggleButton():void		{			super();			bgDisplay.stop();			iconDisplay.stop();			borderDisplay.stop();						tabEnabled = false;			mouseChildren = false;			buttonMode = true;			useHandCursor = true;		}				protected override function init():void		{			addEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);			addEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);			addEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);		}				protected override function uninit():void		{			removeEventListener(MouseEvent.MOUSE_OVER, this.handleMouseOver);			removeEventListener(MouseEvent.MOUSE_OUT, this.handleMouseOut);			removeEventListener(MouseEvent.MOUSE_DOWN, this.handleMouseDown);		}			// --------------------------------------------------	//  Getter / setters	// --------------------------------------------------				public function get selected():Boolean		{			return _selected;		}				public function set selected(val:Boolean):void		{			_selected = val;			bgDisplay.gotoAndStop(val ? 2 : 1);			iconDisplay.gotoAndStop(_icon + (val ? ON : OFF));			iconDisplay.transform.colorTransform = (val ? colorOn : colorOff);		}				public function get enabled():Boolean		{			return mouseEnabled;		}				public function set enabled(val:Boolean):void		{			alpha = val ? 1 : 0.25;			mouseEnabled = val;		}				public function get icon():String		{			return _icon;		}				public function set icon(val:String):void		{			_icon = val;			iconDisplay.gotoAndStop(_icon + (selected ? ON : OFF));		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleMouseOver(evt:MouseEvent):void		{			borderDisplay.gotoAndStop(2);		}				private function handleMouseOut(evt:MouseEvent):void		{			borderDisplay.gotoAndStop(1);		}				private function handleMouseDown(evt:MouseEvent):void		{			selected = !selected;			dispatchEvent(new Event(Event.CHANGE));		}	}}
package com.lassie.shepherd.ui{	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.ui.buttons.ActionButton;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import flash.filters.DropShadowFilter;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.*;		public class Window extends LSSprite	{		public static const HEADER_HEIGHT:int = 25;				public var sidebar:int = 0;				private var _minWidth:int = 150;		private var _minHeight:int = 100;		private var _header:WindowHeaderBar;		private var _panel:WindowPanel;		private var _close:ActionButton;		private var _resizer:WindowResizer;		private var _dragable:Boolean = false;		private var _title:TextField;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function Window():void		{			super();						_header = new WindowHeaderBar(HEADER_HEIGHT);			_panel = new WindowPanel();						_close = new ActionButton();			_close.icon = ActionButtonIcons.CANCEL;			_close.addEventListener(MouseEvent.CLICK, this._onClose);			_close.y = 2;						_resizer = new WindowResizer();			_resizer.addEventListener(MouseEvent.MOUSE_DOWN, this._onResizePress);			_resizer.buttonMode = true;			_resizer.useHandCursor = true;						// add all new display behind existing content.			addChildAt(_resizer, 0);			addChildAt(_close, 0);			addChildAt(_header, 0);			addChildAt(_panel, 0);						filters = new Array(new DropShadowFilter(5, 110, 0x000000, 1, 20, 20, 1, 2));		}			// --------------------------------------------------	//  Getters / setters	// --------------------------------------------------				public function get closable():Boolean		{			return this.contains(_close);		}				public function set closable(val:Boolean):void		{			if (val && !this.contains(_close))			{				addChild(_close);			}			else if (!val && this.contains(_close))			{				removeChild(_close);			}		}				public function get resizable():Boolean		{			return this.contains(_resizer);		}				public function set resizable(val:Boolean):void		{			if (val && !this.contains(_resizer))			{				addChild(_resizer);			}			else if (val && this.contains(_resizer))			{				setChildIndex(_resizer, numChildren-1);			}			else if (!val && this.contains(_resizer))			{				removeChild(_resizer);			}		}				public function get dragable():Boolean		{			return _dragable;		}				public function set dragable(val:Boolean):void		{			if (val && !_dragable)			{				_header.addEventListener(MouseEvent.MOUSE_DOWN, this._onStartWindowDrag);			}			else if (!val && _dragable)			{				_header.removeEventListener(MouseEvent.MOUSE_DOWN, this._onStartWindowDrag);			}			_dragable = val;		}				public function get title():String		{			return (_title != null) ? _title.text : "";		}				public function set title(val:String):void		{			if (_title == null)			{				_title = new TextField();				_title.type = TextFieldType.DYNAMIC;				_title.antiAliasType = AntiAliasType.ADVANCED;				_title.defaultTextFormat = new TextFormat("TradeGothic Bold", 13, 0xFFFFFF);				_title.embedFonts = true;				_title.selectable = false;				_title.mouseEnabled = false;				_title.x = 10;				_title.y = 5;				addChild(_title);			}			_title.text = val.toUpperCase();		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				public function close():void		{			// override in subclass		}				public function redraw():void		{			// override in subclass		}				public function resizeTo(w:int, h:int):void		{			resizeContent(w, h);			resizeWindow(w, h);						if (_resizer != null && this.contains(_resizer))			{				setChildIndex(_resizer, numChildren-1);			}		}				protected function setToMinSize(w:int, h:int):void		{			_minWidth = w;			_minHeight = h;			resizeTo(w, h);		}				protected function resizeContent(w:int, h:int):void		{			_redrawWindow(w, h);		}				protected function resizeWindow(w:int, h:int):void		{			_resizer.x = w;			_resizer.y = h;			_redrawWindow(w, h);		}				private function _redrawWindow(w:int, h:int):void		{			_header.redraw(w);			_panel.redraw(w, h, sidebar);			_close.x = (w - _close.width - 5);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function _onClose(evt:Event):void		{			close();		}				private function _onResizePress(evt:Event):void		{			stage.addEventListener(MouseEvent.MOUSE_UP, this._onResizeRelease);			addEventListener(Event.ENTER_FRAME, this._onResizeDrag);			_resizer.startDrag(false, new Rectangle(_minWidth, _minHeight, stage.stageWidth-_minWidth-x, stage.stageHeight-_minHeight-y));		}				private function _onResizeRelease(evt:Event):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, this._onResizeRelease);			removeEventListener(Event.ENTER_FRAME, this._onResizeDrag);			_onResizeDrag();			_resizer.stopDrag();		}				private function _onResizeDrag(evt:Event=null):void		{			resizeContent(_resizer.x, _resizer.y);		}				private function _onStartWindowDrag(evt:Event):void		{			stage.addEventListener(MouseEvent.MOUSE_UP, this._onStopWindowDrag);			parent.setChildIndex(this, parent.numChildren-1);			this.startDrag(false);		}				private function _onStopWindowDrag(evt:Event):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, this._onStopWindowDrag);			this.stopDrag();			x = Math.round(x);			y = Math.round(y);		}	}}import flash.display.Sprite;// PANEL BACKGROUNDfinal class WindowPanel extends Sprite{	private var _cornerRadius:int;		public function WindowPanel(headerHeight:int=25, radius:int=6):void	{		super();				y = headerHeight - radius;		_cornerRadius = radius*2;	}		public function redraw(w:int, h:int, sidebar:int=0):void	{		h = h-y;		graphics.clear();		graphics.lineStyle(1, 0x1E3171, 1, true);		graphics.beginFill(0xFFFFFF, 1);		graphics.drawRoundRect(0, 0, w, h, _cornerRadius);		graphics.endFill();				if (sidebar > 0)		{			graphics.beginFill(0xCEE7FF, 1);			graphics.moveTo(0, 0);			graphics.lineTo(0, h-(_cornerRadius/2));			graphics.curveTo(0, h, (_cornerRadius/2), h);			graphics.lineTo(sidebar, h);			graphics.lineTo(sidebar, 0);			graphics.lineTo(0, 0);			graphics.endFill();		}	}}// WINDOW RESIZERfinal class WindowResizer extends Sprite{	public function WindowResizer(size:int=22, radius:int=8):void	{		super();				var s:int = size;		var r:int = radius;		graphics.clear();		graphics.beginFill(0xcccccc, 0.5);		graphics.moveTo(-s, 0);		graphics.lineTo(0, -s);		graphics.lineTo(0, -r);		graphics.curveTo(0, 0, -r, 0);		graphics.lineTo(-s, 0);		graphics.endFill();	}}
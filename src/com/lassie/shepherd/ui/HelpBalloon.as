package com.lassie.shepherd.ui{	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.filters.DropShadowFilter;	import flash.geom.Point;		public class HelpBalloon extends Sprite	{	// --------------------------------------------------	//  Static interface.	// --------------------------------------------------			private static var _symbol:HelpBalloon;		private static function _getSymbol():HelpBalloon		{			if (_symbol == null) _symbol = new HelpBalloon(new HBEnforcer());			return _symbol;		}				public static function setHelp(caption:String, title:String="", over:Boolean=true):void		{			var inst:HelpBalloon = _getSymbol();			inst.textField.htmlText = caption;			inst.redraw(over);		}				public static function show(scope:DisplayObjectContainer, plot:Point):void		{			var inst:HelpBalloon = _getSymbol();			if (inst.parent != null)			{				inst.parent.removeChild(inst);			}			inst.x = plot.x;			inst.y = plot.y;			scope.addChild(inst);		}				public static function hide():void		{			var inst:HelpBalloon = _getSymbol();			if (inst.parent != null)			{				inst.parent.removeChild(inst);			}		}			// --------------------------------------------------	//  Instance.	// --------------------------------------------------			public var textField:TextField;				public function HelpBalloon(enforcer:HBEnforcer):void		{			super();			textField.autoSize = TextFieldAutoSize.LEFT;		}				protected function redraw(over:Boolean=true):void		{			var stemX:int = 10;			var stemW:int = 15;			var stemH:int = 15;			var pad:int = 6;			var w:int = textField.width+(pad*2); // width			var h:int = textField.height+(pad*2); // height			var c:int = 8; // corner			var t:int = over ? -(h+stemH) : stemH; // top			var b:int = t+h; // bottom			var l:int = -stemX; // left			var r:int = l+w; // right			graphics.clear();			graphics.beginFill(0xFFFFFF, 1);			graphics.lineStyle(1, 0x2E579B, 1, true);			graphics.moveTo(l+c, t);						if (!over)			{				graphics.lineTo(l+stemX, t);				graphics.lineTo(l+stemX, t-stemH);				graphics.lineTo(l+stemX+stemW, t);			}			graphics.lineTo(r-c, t);			graphics.curveTo(r, t, r, t+c); // upper-right			graphics.lineTo(r, b-c);			graphics.curveTo(r, b, r-c, b); // lower-right						if (over)			{				graphics.lineTo(l+stemX+stemW, b);				graphics.lineTo(l+stemX, b+stemH);				graphics.lineTo(l+stemX, b);			}			graphics.lineTo(l+c, b);			graphics.curveTo(l, b, l, b-c); // lower-left			graphics.lineTo(l, t+c);			graphics.curveTo(l, t, l+c, t); // upper-left			graphics.endFill();						textField.x = l+pad;			textField.y = t+pad;						filters = [new DropShadowFilter(3, 75, 0x000000, 0.4, 6, 6, 1, 2)];		}	}}internal final class HBEnforcer {}
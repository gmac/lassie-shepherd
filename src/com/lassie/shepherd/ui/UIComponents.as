package com.lassie.shepherd.ui{	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import fl.controls.ComboBox;	import fl.controls.Button;	import fl.controls.CheckBox;	import fl.controls.NumericStepper;	import fl.controls.ColorPicker;	import fl.events.ColorPickerEvent;	import fl.controls.Slider;		public class UIComponents	{		public static function getFieldStyle():TextFormat		{			var tf:TextFormat = new TextFormat("_sans", 12);			tf.leftMargin = 2;			tf.rightMargin = 2;			return tf;		}				public static function initSelector(sel:ComboBox, capture:Function=null):void		{			var txt:TextFormat = new TextFormat();			txt.indent = 3;			sel.setStyle("textPadding", 0);			sel.textField.setStyle("textFormat", txt);			sel.tabEnabled = false;			sel.focusEnabled = false;						if (capture != null)			{				sel.addEventListener(Event.CHANGE, capture);			}		}				public static function initTextField(tf:TextField, tab:int, rest:String, capture:Function, edit:Boolean=true):int		{			var format:TextFormat = getFieldStyle();						tf.tabIndex = setTabIndex(tab);			tf.embedFonts = true;			tf.defaultTextFormat = format;			tf.setTextFormat(format);			tf.antiAliasType = AntiAliasType.ADVANCED;			tf.restrict = rest;			tf.addEventListener(Event.CHANGE, capture);			return tf.tabIndex;		}				public static function enableTextField(tf:TextField, edit:Boolean=true, select:Boolean=true):void		{			tf.type = edit ? TextFieldType.INPUT : TextFieldType.DYNAMIC;			tf.selectable = select;			tf.backgroundColor = edit ? 0xFFFFFF : 0x7D7D7D;		}				public static function initButton(bttn:Button, trigger:Function):void		{			bttn.tabEnabled = false;			bttn.focusEnabled = false;			bttn.addEventListener(MouseEvent.CLICK, trigger);		}				public static function initNumerator(num:NumericStepper, tab:int, capture:Function):int		{			num.tabIndex = setTabIndex(tab);			num.addEventListener(Event.CHANGE, capture);			return num.tabIndex;		}				public static function initCheckBox(cb:CheckBox, capture:Function):void		{			var txt:TextFormat = new TextFormat();			txt.color = 0x2E579B;						cb.tabEnabled = false;			cb.setStyle("textFormat", txt);			cb.addEventListener(Event.CHANGE, capture);		}				public static function initColorPicker(col:ColorPicker, capture:Function):void		{			col.tabEnabled = false;			col.addEventListener(ColorPickerEvent.CHANGE, capture);		}				public static function initSlider(slide:Slider, capture:Function):void		{			slide.tabEnabled = false;			slide.addEventListener(Event.CHANGE, capture);		}				public static function initToggle(tog:Sprite, capture:Function):void		{			tog.tabEnabled = false;			tog.addEventListener(Event.CHANGE, capture);		}			// --------------------------------------------------	//  Private methods	// --------------------------------------------------				private static var _lastTabIndex:int=0;				private static function setTabIndex(index:int):int		{			// store running count of indexes			// this allows multiple forms can be indexed			if (index < 0)			{				return _lastTabIndex++			}			else			{				_lastTabIndex = index;			}			return index;		}	}}
package com.lassie.shepherd.ui{	import fl.controls.CheckBox;	import flash.display.Sprite;	import flash.events.Event;		public class CheckList extends Sprite	{		private var _contents:Array = new Array();		private var _lineSpacing:int = 5;		private var _width:int = 150;		private var _height:int = 200;				public function CheckList():void		{			super();			redraw();		}			// --------------------------------------------------	//  Public properties	// --------------------------------------------------				public override function get width():Number		{			return _width;		}				public override function set width(w:Number):void		{			_width = w;			redrawList();			redraw();		}				public override function get height():Number		{			return _height;		}				public override function set height(h:Number):void		{			_height = h;			redraw();		}				public function get lineSpacing():int		{			return _lineSpacing;		}				public function set lineSpacing(n:int):void		{			_lineSpacing = n;			redrawList();		}				public function get selectedLabels():Array		{			var list:Array = new Array();						// look through list items and collect all selected checkbox labels			for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);								if (item.checkBox.selected)				{					list.push(item.checkBox.label);				}			}			return list;		}				public function set selectedLabels(sel:Array):void		{			for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);				item.checkBox.selected = (sel.indexOf(item.checkBox.label) > -1);			}		}				public function get selectedValues():Array		{			var list:Array = new Array();						// look through list items and collect all checked values			for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);								if (item.checkBox.selected)				{					list.push(item.value);				}			}			return list;		}				public function set selectedValues(sel:Array):void		{			for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);				item.checkBox.selected = (sel.indexOf(item.value) > -1);			}		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public function addItem(label:String, value:String, selected:Boolean=false):void		{			_contents.push(new CheckListItem(label, value, selected));			redrawList();		}				public function removeAll():void		{			for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);				removeChild(item.checkBox);			}			_contents = new Array();		}			// --------------------------------------------------	//  Private methods	// --------------------------------------------------				private function redrawList():void		{			clearDisplay();			var yinc:int = 0;						for (var j:int = 0; j < _contents.length; j++)			{				var item:CheckListItem = CheckListItem(_contents[j]);				item.checkBox.y = yinc;				item.checkBox.width = width;				yinc += (item.checkBox.height + lineSpacing);				addChild(item.checkBox);			}		}				private function clearDisplay():void		{			while(numChildren > 0)			{				removeChildAt(0);			}		}				private function redraw():void		{			graphics.clear();			graphics.lineStyle(1, 0xCCCCCC);			graphics.beginFill(0xFFFFFF, 1);			graphics.drawRect(0, 0, width, height);			graphics.endFill();		}	}}import fl.controls.CheckBox;internal class CheckListItem{	public var checkBox:CheckBox;	public var value:*;		public function CheckListItem(lbl:String="", val:*="", sel:Boolean=false):void	{		checkBox = new CheckBox();		checkBox.label = lbl;		checkBox.selected = sel;		value = val;	}}
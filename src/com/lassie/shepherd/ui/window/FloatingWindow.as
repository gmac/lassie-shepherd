package com.lassie.shepherd.ui.window{	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.ui.UIComponents;	import com.lassie.shepherd.ui.buttons.CloseButton;	import com.lassie.shepherd.ui.tabs.TextTab;	import com.lassie.shepherd.ui.tabs.TabEvent;	import flash.display.DisplayObjectContainer;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Rectangle;	import fl.transitions.Tween;	import fl.transitions.easing.Strong;		public class FloatingWindow extends LSSprite	{	// --------------------------------------------------	//  Class constants	// --------------------------------------------------			public static const MINIMIZE_X:int = 195;		public static const TAB_HEIGHT:int = 20;		public static const PADDING_X:int = 8;		public static const PADDING_Y:int = 8;		public static const TOP_PADDING:int = 13;		public static const OPTIONS_HEIGHT:int = 22;		public static const MAIN_WINDOW_TABS:String = "MainWindowTabs";		public static const TAB_NULL:String = "";			// --------------------------------------------------	//  Private members	// --------------------------------------------------		protected var _active:Boolean = false;		protected var _closedX:int = MINIMIZE_X;		protected var _closedY:int = 10;		protected var _openedX:int = MINIMIZE_X;		protected var _openedY:int = 10;		protected var _minW:int=200;		protected var _minH:int=100;		protected var _bg:WindowBackground;		protected var _panel:WindowPanel;		protected var _close:CloseButton;		protected var _resizer:WindowResizer;		protected var _options:WindowOptionsBar;		protected var _tabLeft:int = 10;		protected var _activeTab:String = TAB_NULL;		protected var _tabsList:Array = new Array();		private var _scope:DisplayObjectContainer;		private var _tween:Tween;		private var _tweenVal:int = 0;		private var _dockIndex:int = -1;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function FloatingWindow():void		{			super();						createBackground();			createCloseButton();			createPanel();			createOptionsBar();						_bg.y = _close.y = 2;			_bg.visible = _close.visible = _active;			_bg.mouseEnabled = _close.mouseEnabled = _active;			_bg.alpha = _close.alpha = _active ? 1 : 0;		}			// --------------------------------------------------	//  Constructor methods	// --------------------------------------------------				protected function createBackground():void		{			_bg = new WindowBackground();			_bg.doubleClickEnabled = true;			_bg.addEventListener(MouseEvent.DOUBLE_CLICK, this.handleClose);			_bg.addEventListener(MouseEvent.MOUSE_DOWN, this.handleStartDrag);			addChildAt(_bg, 0);		}				protected function createCloseButton():void		{			_close = new CloseButton();			_close.addEventListener(MouseEvent.CLICK, this.handleClose);			addChildAt(_close, 1);		}				protected function createPanel():void		{			_panel = new WindowPanel();			_panel.x = 0;			_panel.y = TAB_HEIGHT;			addChildAt(_panel, 1);		}		protected function createOptionsBar():void		{			_options = new WindowOptionsBar();			_options.x = 0;			_options.y = TAB_HEIGHT + 1;			_options.addEventListener(Event.CHANGE, this.handleOptionSelect);			//addChild(_options);		}				protected function addWindowTab(label:String, dockIndex:int=0):void		{			var tab:TextTab = new TextTab();			tab.collection = MAIN_WINDOW_TABS;			tab.option = tab.label = label;			_dockIndex = dockIndex;						if (_tabsList.length > 0)			{				var lastTab:TextTab = _tabsList[_tabsList.length-1];				tab.x = lastTab.x + lastTab.width + 1;			}			else			{				tab.x = _tabLeft;			}			_tabsList.push(tab);			addChild(tab);		}				protected function addWindowOption(opt:String):void		{			if (!contains(_options))			{				addChild(_options);			}			_options.addItem(opt);		}				protected function selectWindowOption(opt:String):void		{			_options.selectItem(opt);		}				protected function enableResize(defaultW:int=400, defaultH:int=200, minW:int=0, minH:int=0):void		{			// set minimum window size based on defaults if no custom value is provided			_minW = (minW < 1) ? defaultW : minW;			_minH = (minH < 1) ? defaultH : minH;						// configure window resizer			_resizer = new WindowResizer();			_resizer.x = defaultW;			_resizer.y = defaultH;			_resizer.addEventListener(MouseEvent.MOUSE_DOWN, this.handleStartResize);			addChild(_resizer);			resize();		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				protected override function launch():void		{			x = _closedX;			y = _closedY = stage.stageHeight - TAB_HEIGHT;						if (_dockIndex > -1)			{				setDockIndex(_dockIndex);			}		}				protected override function init():void		{			addEventListener(MouseEvent.MOUSE_DOWN, this.handleBringToFront);			addEventListener(TabEvent.SELECT, this.handleWindowTabSelect);		}				protected override function uninit():void		{			removeEventListener(MouseEvent.MOUSE_DOWN, this.handleBringToFront);			removeEventListener(TabEvent.SELECT, this.handleWindowTabSelect);		}					// --------------------------------------------------	//  Methods	// --------------------------------------------------				public function redraw(w:int, h:int):void		{			_bg.redraw(w-_bg.x, h-_bg.y);			_panel.redraw(w-_panel.x, h-_panel.y);			_options.redraw(w);			_close.x = w;		}				public function open():void		{			if (!_active)			{				activate();				_active = _bg.mouseEnabled = _close.mouseEnabled = true;				tweenTo(1);			}		}				public function close():void		{			if (_active)			{				deactivate();				logWindowCoords();								dispatchEvent(new TabEvent(TabEvent.SELECT, MAIN_WINDOW_TABS, TAB_NULL));				_active = _bg.mouseEnabled = _close.mouseEnabled = false;				_openedX = x;				_openedY = y;				tweenTo(0);			}		}				public function show():void		{			if (parent == null && _scope != null)			{				_scope.addChild(this);				WindowDock.organizeTabs();			}		}				public function hide():void		{			if (parent != null)			{				_scope = parent;				_scope.removeChild(this);				WindowDock.organizeTabs();			}		}			// --------------------------------------------------	//  Dock positioning	// --------------------------------------------------				protected function setDockIndex(i:int, shareSlot:Boolean=false):void		{			WindowDock.setWindowIndex(this, i, shareSlot);		}				internal function get active():Boolean		{			return parent != null;		}				internal function setDockX(xpos:int):void		{			// set closed position			_closedX = xpos;						// if window is closed			if (!_active)			{				// update tab position				x = _closedX;			}		}				internal function get tabsLeftX():int		{			if (_tabsList.length > 0)			{				return _tabsList[0].x;			}			return 0; 		}				internal function get tabsRightX():int		{			if (_tabsList.length > 0)			{				var tab:TextTab = TextTab(_tabsList[_tabsList.length-1]);				return tab.x + tab.width;			}			return 0; 		}			// --------------------------------------------------	//  Window methods	// --------------------------------------------------				protected function onChangeWindowOption(opt:String):void		{			// override in subclasses		}				protected function selectWindowTab(tab:String):void		{			// override in sub-class		}				protected function logWindowCoords():void		{			// override in sub-class		}				protected function activate():void		{			// override in sub-class		}				protected function deactivate():void		{			// override in sub-class		}				protected function resize():void		{			redraw(_resizer.x, _resizer.y);		}			// --------------------------------------------------	//  Tween methods	// --------------------------------------------------				public function get tween():Number		{			return _tweenVal;		}				public function set tween(n:Number):void		{			_tweenVal = n;			x = _closedX + ((_openedX - _closedX) * n);			y = _closedY + ((_openedY - _closedY) * n);			_bg.alpha = _close.alpha = n;			_bg.visible = _close.visible = (n != 0);		}				private function tweenTo(tar:Number):void		{			if (_tween != null)			{				_tween.stop();			}			_tween = new Tween(this, "tween", Strong.easeInOut, tween, tar, 0.5, true);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleBringToFront(evt:MouseEvent):void		{			parent.setChildIndex(this, parent.numChildren-1);		}				private function handleClose(evt:MouseEvent):void		{			close();		}				private function handleStartDrag(evt:MouseEvent):void		{			startDrag(false);			stage.addEventListener(MouseEvent.MOUSE_UP, this.handleStopDrag);		}				private function handleStopDrag(evt:MouseEvent):void		{			stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleStopDrag);		}				private function handleWindowTabSelect(evt:TabEvent):void		{			if (evt.collection == MAIN_WINDOW_TABS)			{				if (_activeTab != evt.option)				{					selectWindowTab(evt.option);					open();				}			}		}				private function handleOptionSelect(evt:Event):void		{			onChangeWindowOption(_options.selectedOption);		}			// --------------------------------------------------	//  Resize event handlers	// --------------------------------------------------				private function handleStartResize(evt:MouseEvent):void		{			var rangeX:int = stage.stageWidth - x;			var rangeY:int = stage.stageHeight - y;			var bounds:Rectangle = new Rectangle(_minW, _minH, rangeX-_minW, rangeY-_minH);						_resizer.startDrag(false, bounds);			stage.addEventListener(MouseEvent.MOUSE_UP, this.handleStopResize);			addEventListener(Event.ENTER_FRAME, this.handleResize);		}				private function handleStopResize(evt:MouseEvent):void		{			removeEventListener(Event.ENTER_FRAME, this.handleResize);			stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleStopResize);			_resizer.stopDrag();			resize();		}				private function handleResize(evt:Event):void		{			resize();		}	}}
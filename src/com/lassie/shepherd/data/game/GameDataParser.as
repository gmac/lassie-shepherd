package com.lassie.shepherd.data.game{	import com.lassie.utils.ObjectUtil;	import com.lassie.shepherd.data.*;		public final class GameDataParser	{		public static function parse(g:GameData, dat:Object):void		{			// abort parsing if this is a fresh data file without any configuration.			if (!dat.hasOwnProperty("id")) return;						try			{				ObjectUtil.assimilate(g, dat);				ActionsDataParser.voiceIncrement = g.voiceInc;				ActionsDataParser.reassignVoiceIncrement = false;								// actors				g.actors = new Array();				for (var j:int = 0; j < dat.actors.length; j++)				{					g.actors.push(toCastRecord(dat.actors[j]));				}				trace("Actors: " + g.actors.length);												// collections				g.collections = new Array();				for (j = 0; j < dat.collections.length; j++)				{					g.collections.push(toCollectionRecord(dat.collections[j]));				}				trace("Collections: " + g.collections.length);												// combos				g.combos = new Array();				for (j = 0; j < dat.combos.length; j++)				{					g.combos.push(toComboRecord(dat.combos[j]));				}				g.combos = g.combos.sortOn("id");				trace("Combos: " + g.combos.length);												// items				g.items = new Array();				for (j = 0; j < dat.items.length; j++)				{					g.items.push(toItemRecord(dat.items[j]));				}				g.items = g.items.sortOn("id");				trace("Items: " + g.items.length);												// responses				g.responses = new Array();				for (j = 0; j < dat.responses.length; j++)				{					g.responses.push(toResponseRecord(dat.responses[j]));				}				trace("Responses: " + g.responses.length);												// scripts				g.scripts = new Array();				for (j = 0; j < dat.scripts.length; j++)				{					g.scripts.push(toScriptRecord(dat.scripts[j]));				}				g.scripts = g.scripts.sortOn("id");				trace("Scripts: " + g.scripts.length);								// set base action titles				g.setBaseActions(g.baseActions);				g.voiceInc = ActionsDataParser.voiceIncrement;			}			catch(e:Error)			{				trace("Could not create GameData");			}		}				public static function toCastRecord(dat:Object):CastRecord		{			try			{				var c:CastRecord = new CastRecord(dat.id);				ObjectUtil.assimilate(c, dat);				return c;			}			catch(e:Error)			{				trace("Could not create CastRecord");			}			return null;		}				public static function toCollectionRecord(dat:Object):CollectionRecord		{			try			{				var c:CollectionRecord = new CollectionRecord(dat.id);				ObjectUtil.assimilate(c, dat);				return c;			}			catch(e:Error)			{				trace("Could not create CollectionRecord");			}			return null;		}				public static function toComboRecord(dat:Object):ComboRecord		{			try			{				var c:ComboRecord = new ComboRecord(dat.id);				ObjectUtil.assimilate(c, dat);								c.action = ActionsDataParser.toInteractionData(dat.action);								return c;			}			catch(e:Error)			{				trace("Could not create ComboRecord");			}			return null;		}				public static function toItemRecord(dat:Object):ItemRecord		{			try			{				var i:ItemRecord = new ItemRecord(dat.id);				ObjectUtil.assimilate(i, dat);								// item actions				i.actions = new Array();				for (var j:int = 0; j < dat.actions.length; j++)				{					i.actions.push(ActionsDataParser.toInteractionData(dat.actions[j]));				}								return i;			}			catch(e:Error)			{				trace("Could not create ItemRecord");			}			return null;		}				public static function toResponseRecord(dat:Object):ResponseRecord		{			try			{				var r:ResponseRecord = new ResponseRecord(dat.id);				//ObjectUtil.assimilate(r, dat);								// item actions				r.actions = new Array();				for each (var j:Object in dat.actions)				{					r.actions.push(ActionsDataParser.toInteractionData(j));				}								return r;			}			catch(e:Error)			{				trace("Could not create ItemRecord");			}			return null;		}				public static function toScriptRecord(dat:Object):ScriptRecord		{			try			{				var s:ScriptRecord = new ScriptRecord(dat.id);				ObjectUtil.assimilate(s, dat);				return s;			}			catch(e:Error)			{				trace("Could not create ScriptRecord");			}			return null;		}		public static function toTreeRecord(dat:Object):TreeRecord		{			try			{				var t:TreeRecord = new TreeRecord(dat.id);				ObjectUtil.assimilate(t, dat);				t.root = toTierData(dat.root);				return t;			}			catch(e)			{				trace("Could not create TreeRecord");			}			return null;		}				public static function toTierData(dat:Object):TierData		{			try			{				var t:TierData = new TierData(dat.id);				ObjectUtil.assimilate(t, dat);								t.topics = new Array();				for (var j:int = 0; j < dat.topics.length; j++)				{					t.topics.push(toTopicData(dat.topics[j]));				}								return t;			}			catch(e)			{				trace("Could not create TierData");			}			return null;		}				public static function toTopicData(dat:Object):TopicData		{			try			{				var t:TopicData = new TopicData(dat.key);				ObjectUtil.assimilate(t, dat);				t.action = ActionsDataParser.toInteractionData(dat.action); 				t.tier = toTierData(dat.tier);				return t;			}			catch(e)			{				trace("Could not create TopicData");			}			return null;		}	}}
package com.lassie.shepherd.data.game{	import com.lassie.shepherd.data.DataCore;	import com.lassie.shepherd.events.ShepherdEvent;	import flash.events.IOErrorEvent;	import flash.events.Event;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.data.FileService;	import com.adobe.serialization.json.JSON;		public final class GameData extends DataCore	{		public static var actionTitles:String ="Look at,Talk to,Use";				// Setup Properties				public var title:String="";		public var author:String="";		public var serialKey:String="";		public var stageWidth:int=800;		public var stageHeight:int=600;		public var baseActions:String="Look at,Talk to,Use";		public var verbDialect:String="#verb# #noun#";		public var itemDialect:String="Use #item# with #noun#";		public var gameLang:String="en";		public var editorLang:String="en";		public var defaultActor:String="";		public var defaultRoom:String="ROOM_ID";		public var compactData:Boolean = false;		public var encryptData:Boolean = false;				// Record Sets				public var actors:Array = new Array(new CastRecord("main"));		public var collections:Array = new Array(new CollectionRecord("main"));		public var combos:Array = new Array();		public var items:Array = new Array();		public var responses:Array = new Array(new ResponseRecord("main"));		public var scripts:Array = new Array(new ScriptRecord("_onStartGame"));		public var isLoaded:Boolean = false;				public function GameData(enforcer:GameSingletonEnforcer):void		{			super();			id = "global";		}				private static var _instance:GameData;				public static function get instance():GameData		{			if (_instance == null) _instance = new GameData(new GameSingletonEnforcer());			return _instance;		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public override function getFiles():void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onFileList);			io.request(FileService.FILE_SERVICE, "./");		}				public override function load(file:String):void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onDataLoad);			io.load(FileService.FILE_SERVICE + file);		}				public override function save():void		{			dispatchEvent(new Event(ShepherdEvent.GAME_DATA_LOG));			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onDataSave);			io.save(FileService.FILE_SERVICE, "./", id + "." + FileService.EXT_GAME, JSON.encode(this));		}			// --------------------------------------------------	//  Record lists	// --------------------------------------------------			public function get actorList():Array		{			return _listRecords(actors);		}				public function get collectionList():Array		{			return _listRecords(collections);		}				public function get comboList():Array		{			return _listRecords(combos);		}				public function get itemList():Array		{			return _listRecords(items);		}				public function get responseList():Array		{			return _listRecords(responses);		}				public function get scriptList():Array		{			return _listRecords(scripts);		}				// search a list of records for a specific id		public function getRecordById(recordsList:Array, id:String):Record		{			for each (var j:Record in recordsList)			{				if (j.id == id)				{					return j;				}			}			return null;		}				// sets base actions on both class and instance		// value is needed on the class for the InteractionFactory		public function setBaseActions($csv:String):void		{			GameData.actionTitles = $csv;			baseActions = $csv;		}				// generate a list of records		private function _listRecords(dat:Array):Array		{			var list:Array = new Array();						for each (var j:Record in dat)			{				list.push(j.id);			}			return list;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function onFileList(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onFileList);			dispatchEvent(new Event(ShepherdEvent.GAME_LIST_LOAD));		}				public function onDataLoad(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onDataLoad);			GameDataParser.parse(this, JSON.decode(io.data));			isLoaded = true;			dispatchEvent(new Event(ShepherdEvent.GAME_DATA_LOADED));		}				public function onDataSave(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onDataSave);			dispatchEvent(new Event(ShepherdEvent.GAME_DATA_SAVED));		}	}}class GameSingletonEnforcer {}
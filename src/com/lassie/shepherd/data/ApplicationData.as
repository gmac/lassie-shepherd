package com.lassie.shepherd.data{	import flash.events.EventDispatcher;	import flash.events.Event;		public final class ApplicationData extends EventDispatcher	{		public static const APPLICATION_READY:String = "ApplicationReady";		public static const LANGUAGE_CHANGE:String = "LanguageChange";			// --------------------------------------------------	//  Singleton	// --------------------------------------------------			private static var _instance:ApplicationData;		private static var _language:String;		private static var _rawData:XML;		private static var _scripts:Object;		private static var _scriptsList:Array;		private static var _languageOptions:Array;				public static function get instance():ApplicationData {			if (_instance == null) _instance = new ApplicationData(new ApplicationDataEnforcer());			return _instance;		}				public static function get scriptsList():Array		{			return _scriptsList;		}				public static function getScriptByMethod(method:String):String		{			if (_scripts[method] != null) return _scripts[method];			return "";		}				public static function get languageOptions():Array		{			return _languageOptions;		}				public static function get language():String		{			return _language;		}				public static function set language(val:String):void		{			// if language is not already set and is a valid language option			if (val != _language && _languageOptions.indexOf(val) > -1)			{				// set language and notify of change				_language = val;				instance.dispatchEvent(new Event(ApplicationData.LANGUAGE_CHANGE));			}		}				public static function getHelpData(id:String):HelpData		{			var node:XMLList = _rawData.help[id][_language];			if (node.toXMLString() == "") node = _rawData.help[id]["en"];			return new HelpData(node.label, node.title, node.info);		}			// --------------------------------------------------	//  Instance configuration	// --------------------------------------------------			public function ApplicationData(enforcer:ApplicationDataEnforcer):void		{			super();		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------			public function load(path:String):void		{			var xml:FileIO = new FileIO();			xml.addEventListener(Event.COMPLETE, instance._onXMLComplete);			xml.load(path);		}			// --------------------------------------------------	//  Utility methods	// --------------------------------------------------			private function _parseXML(dat:String):void		{			_rawData = new XML(dat);			_scripts = new Object();			_scriptsList = new Array();			_languageOptions = (_rawData.settings.@languages).split(",");			_language = _languageOptions[0];						var scripts:XMLList = XML(_rawData.scripts).children();			for each (var j:XML in scripts)			{				_scriptsList.push(j.name());				_scripts[j.name()] = j.toXMLString();			}						dispatchEvent(new Event(ApplicationData.APPLICATION_READY));		}	// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function _onXMLComplete(evt:Event):void		{			var xml:FileIO = FileIO(evt.currentTarget);			xml.removeEventListener(Event.COMPLETE, instance._onXMLComplete);			_parseXML(xml.data);		}	}}internal final class ApplicationDataEnforcer {}
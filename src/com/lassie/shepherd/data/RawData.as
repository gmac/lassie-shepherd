package com.lassie.shepherd.data{	import flash.events.Event;	import flash.events.EventDispatcher;		public final class RawData extends EventDispatcher	{		public static const RAW_DATA_LIST:String = "RawDataFileList";		public static const RAW_DATA_LOAD:String = "RawDataLoad";		public static const RAW_DATA_SAVE:String = "RawDataSave";			// --------------------------------------------------	//  Singleton	// --------------------------------------------------			private static var _instance:RawData;		public static function get instance():RawData		{			if (_instance == null) _instance = new RawData(new RawDataEnforcer());			return _instance;		}			// --------------------------------------------------	//  Instance config	// --------------------------------------------------				private const EXCLUDE_REDUNDANT:String = "redundant";		private const EXCLUDE_MISSING:String = "missing";		private const EXCLUDE_NONE:String = "none";		private const LOAD_PATH:String = "data/raw/";				private var _data:Object;		private var _filesList:Array;				public function RawData(enforcer:RawDataEnforcer):void		{			super();			_data = new Object();			_filesList = new Array();		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public function getFiles():void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this._onFileList);			io.request(FileService.FILE_SERVICE, "raw");		}				public function get filesList():Array		{			return _filesList;		}				public function get filesLoaded():Array		{			var list:Array = new Array();			for (var j:String in _data)			{				list.push(j);			}			list.sort();			return list;		}				public function load(csv:String, reload:Boolean=false):void		{			var filter:String = reload ? EXCLUDE_NONE : EXCLUDE_REDUNDANT;			var list:Array = _parseFileList(csv, filter);						if (list.length > 0)			{				// has files to load.				var loader:RawDataBatchLoader = new RawDataBatchLoader();				loader.addEventListener(Event.COMPLETE, this._onDataLoad);				loader.load(list);			}			else			{				// no files to load. immediately dispatch complete.				dispatchEvent(new Event(RawData.RAW_DATA_LOAD));			}		}				public function remove(csv:String):void		{			var list:Array = _parseFileList(csv, EXCLUDE_MISSING);			for each (var j:String in list) delete _data[j];		}				public function save(file:String):void		{			if (_data[file] != null)			{				// save file!			}		}				public static function getRawData(file:String):String		{			if (instance._data[file] != null) return instance._data[file];			return "";		}				public static function getRawXML(file:String):XML		{			if (instance._data[file] != null)			{				var xml:XML = new XML(instance._data[file]);				xml.ignoreWhitespace = true;				xml.ignoreComments = true;				return xml;			}			return new XML("");		}				public static function getNodeInclude(address:String):String		{			address = address.split(" ").join("");			var path:Array = address.split(":");						if (path.length > 1)			{				var xml:XML = getRawXML(path[0]);				if (xml.hasOwnProperty(path[1])) return XML(xml[path[1]]).children().toXMLString();			}			return "";		}			// --------------------------------------------------	//  Private utility methods	// --------------------------------------------------			private function _parseFileList(csv:String, filter:String=EXCLUDE_NONE):Array		{			csv = csv.split(" ").join("");			var list:Array = csv.split(",");			var keep:Array = new Array();						for each (var j:String in list)			{				var exclude:Boolean = false;				if (filter == EXCLUDE_REDUNDANT && _data[j] != null) exclude = true;				if (filter == EXCLUDE_MISSING && _data[j] == null) exclude = true;				if (j != "" && !exclude) keep.push(LOAD_PATH + j);			}			return keep;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function _onFileList(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onFileList);			_filesList = FileService.filterReturn(io.data, FileService.EXT_XML).split(",");			dispatchEvent(new Event(RawData.RAW_DATA_LIST));		}				public function _onDataLoad(evt:Event):void		{			var loader:RawDataBatchLoader = RawDataBatchLoader(evt.currentTarget);			loader.removeEventListener(Event.COMPLETE, this._onDataLoad);						for (var j:String in loader.contents) 			{				_data[j.split(LOAD_PATH).join("")] = loader.contents[j];			}			loader.dispose();						// notify of complete.			dispatchEvent(new Event(RawData.RAW_DATA_LOAD));		}				public function _onDataSave(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onDataSave);			dispatchEvent(new Event(RawData.RAW_DATA_SAVE));		}	}}import flash.events.EventDispatcher;import flash.events.Event;import flash.net.*;// --------------------------------------------------//  RawDataBatchLoader// --------------------------------------------------	internal final class RawDataBatchLoader extends EventDispatcher{	private var _toLoad:int = 0;	private var _contents:Object;		public function RawDataBatchLoader():void	{		super();		_contents = new Object();	}		public function load(files:Array):void	{		for each (var j:String in files)		{			var loader:RawDataLoader = new RawDataLoader(j);			loader.addEventListener(Event.COMPLETE, this._onLoadComplete);			loader.load(new URLRequest(j));			_toLoad++;		}	}		public function dispose():void	{		for (var j:String in _contents)		{			delete _contents[j];		}		_contents = null;	}		public function get contents():Object	{		return _contents;	}		private function _onLoadComplete(evt:Event):void	{		var loader:RawDataLoader = RawDataLoader(evt.currentTarget);		loader.removeEventListener(Event.COMPLETE, this._onLoadComplete);		_contents[loader.id] = loader.data;		_toLoad--;		if (_toLoad <= 0)		{			dispatchEvent(new Event(Event.COMPLETE));		}	}}// --------------------------------------------------//  RawDataLoader// --------------------------------------------------internal final class RawDataLoader extends URLLoader{	public var id:String = "";		public function RawDataLoader(file:String):void	{		super();		id = file;	}}// --------------------------------------------------//  Singleton enforcer// --------------------------------------------------internal final class RawDataEnforcer {}
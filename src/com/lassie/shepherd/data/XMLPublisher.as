package com.lassie.shepherd.data{	import com.lassie.shepherd.core.IServicePackage;	import com.lassie.shepherd.data.game.GameData;	import com.lassie.utils.EncryptUtil;	import flash.events.Event;		public class XMLPublisher	{		private var _services:IServicePackage;				public function XMLPublisher(services:IServicePackage, rawList:String, mssg:String="Publishing..."):void		{			_services = services;			_services.status(mssg);			RawData.instance.addEventListener(RawData.RAW_DATA_LOAD, this._onRawDataLoad);			RawData.instance.load(rawList, true);		}			// --------------------------------------------------	// methods	// --------------------------------------------------				public function publish():void		{					}				protected function compileXML():void		{			// override in sub-class.			//saveXML(id, RoomXMLParser.parse(RoomData.instance));		}				protected final function saveXML(filename:String, xml:String):void		{			// Encrypt data, if enabled.			if (GameData.instance.encryptData) {				xml = EncryptUtil.encrypt(xml);			}						// send out compiled data for saving.			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this._onSaveComplete);			io.save(FileService.FILE_SERVICE, "../xml", filename + ".xml", xml);		}				protected final function saveTranscript(filename:String, transcript:String):void		{			// send out compiled transcript for saving.			var io:FileIO = new FileIO();			io.save(FileService.FILE_SERVICE, "../transcript", filename + ".txt", transcript);		}			// --------------------------------------------------	// Event handlers	// --------------------------------------------------				private function _onRawDataLoad(evt:Event):void		{			RawData.instance.removeEventListener(RawData.RAW_DATA_LOAD, this._onRawDataLoad);			compileXML();		}				private function _onSaveComplete(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onSaveComplete);			_services.close();			_services = null;		}	}}
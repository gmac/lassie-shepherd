package com.lassie.shepherd.data{	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.data.game.ScriptRecord;		public class XMLCompiler	{		protected var xmlHeader:String = '<?xml version="1.0" encoding="UTF-8"?>\n';		protected var actionIdList:Array;		protected var _transcript:String = "";		protected var _textRule:String = "--------------------------------------------------\n";		protected var _textIndent:String = "";		protected var _compact:Boolean = false;		protected var _defaultVoiceLib:String = "";		protected var _defaultVoiceClass:String = "";		protected var _dialogueCSV:String = "";		protected var _dialogueAS:String = "";				public function XMLCompiler():void		{			// do nothing.		}			// --------------------------------------------------	// Compiler methods	// --------------------------------------------------				protected final function compileAction(dat:InteractionData, t:int=0):String		{			var xml:String = tab(t) + '<action id="'+ dat.id +'">\n';			xml += compileActionBody(dat, t);			xml += tab(t) + '</action>\n';			return xml;		}				protected final function compileActionBody(dat:InteractionData, t:int=0, $puppets:Array=null):String		{			var xml:String = tab(t) + '<title>\n';			xml += tab(t+1) + compileLang(includeNode(dat.title)) +'\n';			xml += tab(t) + '</title>\n';			xml += tab(t) + '<dialog>\n';			for (var j:int = 0; j < dat.dialogue.length; j++)			{				xml += compileDialogue(dat.dialogue[j], t+1, $puppets);			}						xml += tab(t) + '</dialog>\n';			xml += tab(t) + '<script>\n';			xml += includeNode(unescape(dat.command)) +'\n';			xml += tab(t) + '</script>\n';			return xml;		}				protected final function compileDialogue(dat:Object, t:int=0, $puppets:Array=null):String		{			var $puppetId:String = dat.puppet;						if (!!$puppets) {				// If a puppets array was provided,				// then parse the action puppet to a numeric index,				// and pull the corresponding puppet reference from the array.				// Used while compiling dialogue trees.				var $index:Number = parseInt($puppetId);				if (!isNaN($index) && $index >= 0 && $index < $puppets.length) {					$puppetId = $puppets[ $index ];				}			}						var $voice:String = voiceSound(dat.sound);			_transcript += '   - Dialog [puppet: ' + $puppetId +', voice:' + $voice +']\n';			_transcript += '   "'+ dat.caption +'"\n\n';			_dialogueCSV += $puppetId +',"'+ dat.caption +'",'+ $voice +'\n';						var xml:String = tab(t) + '<dia puppet="'+ $puppetId +'" ';			xml += 'frame="'+ dat.frame +'" ';			xml += 'sound="'+ voiceSound(dat.sound, true) +'">\n';			xml += tab(t+1) + compileLang(includeNode(dat.caption)) +'\n';			xml += tab(t) + '</dia>\n';			return xml;		}				protected final function compileScript(dat:ScriptRecord, t:int=2):String		{			var xml:String = tab(t) +'<script id="'+ dat.id +'">\n';			xml += dat.getValue() +'\n';			xml += tab(t) +'</script>\n';			return xml;		}				protected function compileLang(val:String):String		{			if (val.indexOf('<') != 0)			{				var lang:String = GameData.instance.gameLang;				return '<'+ lang +'><![CDATA['+ val + ']]></'+ lang +'>';			}			return val;		}			// --------------------------------------------------	// Utilities	// --------------------------------------------------				protected function reset():void		{			// reset list of action Id's			actionIdList = new Array();			var $list:Array = GameData.instance.baseActions.split(",");						// add a generic action key for each base action			for (var j:int = 0; j < $list.length; j++) {				actionIdList.push("act"+j);			}						// push a specific key for item interactions.			actionIdList.push("item");			_transcript = "";			_dialogueCSV = "";			_dialogueAS = "";			_compact = GameData.instance.compactData;		}				protected function includeNode(val:String):String		{			// input is formatted as: #node test.xml:testNode			if (val.indexOf("#node") == 0)			{				return RawData.getNodeInclude(val.substr(6));			}			return val;		}				protected function tab(n:int):String		{			if (_compact) return "";			var tab:String = "";						while (n > 0) {				tab += "\t";				n--;			}			return tab;		}				protected function boolean(val:Boolean):String		{			return val ? "1" : "0";		}				protected function color(hex:uint):String		{			var r:Number = (hex >> 16);			var g:Number = (hex >> 8 ^ r << 8);			var b:Number = (hex ^ (r << 16 | g << 8));						var red:String   = r.toString(16);			var green:String = g.toString(16);			var blue:String  = b.toString(16);						red = (red.length < 2) ? '0' + red : red;			green = (green.length < 2) ? '0' + green : green;			blue = (blue.length < 2) ? '0' + blue : blue;						return "0x"+(red + green + blue).toUpperCase();		}				protected function vars(raw:String):String		{			if (raw.indexOf("=") > -1)			{				raw = raw.split('"').join('');				var list:Array = raw.split(",");				var keep:Array = new Array();								for each (var j:String in list)				{					keep.push((j.split('=').join('="')) +'"');				}				return keep.join(" ");			}			return "";		}				protected function normalize(csv:String):String		{			var $list:Array = csv.split(",");			var $valid:Array = new Array();			for each (var $j:String in $list) {				if ($j != "") $valid.push($j);			}			return $valid.join(",");		}				protected function voiceSound($id:String, $hardRef:Boolean=false):String		{			// return a pre-formatted voice include.			if ($id.indexOf("voice/") == 0) return $id;			else if (_defaultVoiceLib == "" && $hardRef) return "";			else if (!isNaN(parseInt($id))) {				while ($id.length < 4) $id = "0"+$id;				if ($hardRef) _dialogueAS += "addSound( "+ _defaultVoiceClass + $id +" );\n";				return _defaultVoiceLib +":"+ _defaultVoiceClass + $id;			}			if ($id != "" && $hardRef) _dialogueAS += "addSound( "+ $id +" );\n";			return $id;		}	}}
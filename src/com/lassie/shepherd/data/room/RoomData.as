package com.lassie.shepherd.data.room{	import com.lassie.shepherd.data.DataCore;	import com.lassie.shepherd.data.game.ScriptRecord;	import com.lassie.shepherd.events.ShepherdEvent;	import flash.events.IOErrorEvent;	import flash.events.Event;	import com.lassie.utils.ObjectUtil;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.data.FileService;	import com.adobe.serialization.json.JSON;		public final class RoomData extends DataCore	{		public var layers:Array;		public var walkareas:Array;		public var filters:Array;		public var diaTrees:Array;		public var scripts:Array;		public var enterRoom:String="_enter";		public var exitRoom:String="_exit";		public var grid:String="main";		public var music:String="";		public var sound:String="";				// editor data fields		public var notes:String="Notes to team:";		public var viewWinX:int = 200;		public var viewWinY:int = 10;		public var scriptWinX:int = 250;		public var scriptWinY:int = 20;		public var gridWinX:int = 300;		public var gridWinY:int = 30;		public var puppetWinX:int = 300;		public var puppetWinY:int = 30;		public var isLoaded:Boolean=false;				private var _fileList:Array = new Array();			// --------------------------------------------------	//  Constructor / instance	// --------------------------------------------------				public function RoomData(enforcer:RoomSingletonEnforcer):void		{			super();						layers = new Array();			walkareas = new Array();			filters = new Array();			diaTrees = new Array();			scripts = new Array();					// add a default walkarea			var $grid:WalkareaData = new WalkareaData(grid);			walkareas.push($grid);						// add default enter script			var $script:ScriptRecord = new ScriptRecord(enterRoom);			$script.setValue('<curtain blackout="0"/>');			scripts.push($script);						// add default exit script			$script = new ScriptRecord(exitRoom);			$script.setValue('<library unloadRoom="_current"/><curtain blackout="1"/>');			scripts.push($script);		}				private static var _instance:RoomData;				public static function get instance():RoomData		{			if (_instance == null) _instance = new RoomData(new RoomSingletonEnforcer());			return _instance;		}				public static function refresh():void {			RoomDataParser.parse( instance, ObjectUtil.clone( new RoomData(new RoomSingletonEnforcer()) ) );			instance.dispatchEvent(new Event(ShepherdEvent.ROOM_DATA_CLEAR));			instance.dispatchEvent(new Event(ShepherdEvent.ROOM_DATA_LOADED));		}	// --------------------------------------------------	//  Public methods	// --------------------------------------------------			public override function getFiles():void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onFileList);			io.request(FileService.FILE_SERVICE, "rooms");		}				public override function load(file:String):void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onDataLoad);			io.load(FileService.FILE_SERVICE + "rooms/" + file);		}				public override function remove(file:String):void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onFileList);			io.remove(FileService.FILE_SERVICE, "rooms", file);		}				public override function save():void		{			dispatchEvent(new Event(ShepherdEvent.ROOM_DATA_LOG));			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this.onDataSave);			io.addEventListener(Event.COMPLETE, this.onFileList);			io.save(FileService.FILE_SERVICE, "rooms", id + "." + FileService.EXT_ROOM, JSON.encode(this));		}				public static function get fileList():Array {			return instance._fileList;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function onFileList(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onFileList);			_fileList = FileService.filterReturn(io.data, FileService.EXT_ROOM).split(",");			dispatchEvent(new Event(ShepherdEvent.ROOM_LIST_LOAD));		}				private function onDataLoad(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onDataLoad);			RoomDataParser.parse(this, JSON.decode(io.data));			isLoaded = true;			dispatchEvent(new Event(ShepherdEvent.ROOM_DATA_LOADED));		}				private function onDataSave(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this.onDataSave);			dispatchEvent(new Event(ShepherdEvent.ROOM_DATA_SAVED));		}	}}class RoomSingletonEnforcer {}
package com.lassie.shepherd.editors.game.combo{	import com.lassie.shepherd.data.game.ComboRecord;	import com.lassie.shepherd.editors.game.GameController;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.actions.GameDialogueEditor;	import com.lassie.shepherd.editors.game.actions.GameScriptEditor;	import com.lassie.shepherd.ui.buttons.ActionButton;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import com.lassie.shepherd.ui.ToggleButton;	import fl.controls.List;	import fl.controls.ComboBox;	import fl.controls.TextInput;	import flash.events.Event;	import flash.events.MouseEvent;		public final class ComboPanel extends RecordsPanel	{		public var textId:TextInput;		public var lockId:ToggleButton;		public var primarySelect:ComboBox;		public var poolSelect:ComboBox;		public var addButton:ActionButton;		public var removeButton:ActionButton;		public var itemsList:List;		public var dialogueEditor:GameDialogueEditor;		public var scriptEditor:GameScriptEditor;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function ComboPanel():void		{			super(new ComboRecordSet(), "Inventory Item Combos", PanelDisplays.COMBO);						addButton.icon = ActionButtonIcons.ADD;			removeButton.icon = ActionButtonIcons.DELETE;			textId.addEventListener(Event.CHANGE, this.onCaptureId);			lockId.addEventListener(Event.CHANGE, this.onCaptureLockId);			primarySelect.addEventListener(Event.CHANGE, this.onCapturePrimary);			addButton.addEventListener(MouseEvent.CLICK, this.onAddItem);			removeButton.addEventListener(MouseEvent.CLICK, this.onRemoveItem);			itemsList.allowMultipleSelection = false;		}				internal function get selectedCombo():ComboRecord		{			return dataProvider.selectedRecord as ComboRecord;		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			textId.enabled = val;			lockId.enabled = val;			primarySelect.enabled = val;			poolSelect.enabled = val;			addButton.enabled = val;			removeButton.enabled = val;			itemsList.enabled = val;			//itemsList.alpha = val ? 1 : 0.25;			dialogueEditor.enabled = val;			scriptEditor.enabled = val;						if (!val)			{				textId.text = "";				primarySelect.removeAll();				poolSelect.removeAll();				itemsList.removeAll();			}		}				protected override function populateRecord():void		{			var record:ComboRecord = selectedCombo;			textId.text = record.id;			textId.enabled = !record.lockId;			lockId.selected = record.lockId;			dialogueEditor.data = record.action;			scriptEditor.data = record.action;						var itemsMenu:Array = GameController.itemData.recordsMenu;						// primary item select			primarySelect.removeAll();			primarySelect.addItem({label:"[pool]", data:""});			primarySelect.dataProvider.concat(itemsMenu);			var sel:int = 0;						for (var j:int = 0; j < itemsMenu.length; j++)			{				if (itemsMenu[j].label == record.primary)				{					sel = j+1;					break;				}			}			primarySelect.selectedIndex = sel;			record.primary = primarySelect.selectedLabel;						// pool item select			poolSelect.removeAll();			poolSelect.dataProvider.concat(itemsMenu);						if (itemsMenu.length < 1)			{				addButton.enabled = false;			}						populateItemsList(0);		}				private function populateItemsList(select:int):void		{			var itemList:Array = GameController.itemData.recordsList;			var list:Array = selectedCombo.items;			itemsList.removeAll();						// populate list of items			for (var j:int = 0; j < list.length; j++)			{				var item:String = list[j];								// check if item record still exists				if (itemList.indexOf(item) > -1)				{					itemsList.addItem({label:item, data:item});				}				else				{					// weed out redundant items					selectedCombo.items.splice(j, 1);					j--;				}			}						// set list selection			if (list.length < 1)			{				itemsList.selectedIndex = -1;				removeButton.enabled = false;			}			else			{				itemsList.selectedIndex = Math.max(0, Math.min(select, list.length-1));				removeButton.enabled = true;			}		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------			private function onCaptureId(evt:Event):void		{			selectedCombo.id = textId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockId(evt:Event):void		{			selectedCombo.lockId = lockId.selected;			textId.enabled = !lockId.selected;		}				private function onCapturePrimary(evt:Event):void		{			selectedCombo.primary = primarySelect.selectedItem.data;		}				private function onAddItem(evt:Event):void		{			var item:String = poolSelect.selectedLabel;						// if item is not already contained within pool			if (selectedCombo.items.indexOf(item) < 0)			{				// add item to pool				selectedCombo.items.push(item);				populateItemsList(selectedCombo.items.length-1);			}		}				private function onRemoveItem(evt:Event):void		{			selectedCombo.items.splice(itemsList.selectedIndex, 1);			populateItemsList(itemsList.selectedIndex-1);		}	}}
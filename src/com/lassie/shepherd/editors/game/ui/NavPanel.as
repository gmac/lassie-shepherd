package com.lassie.shepherd.editors.game.ui{	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.Sprite;	import flash.text.TextField;	import fl.controls.Button;	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.events.ShepherdEvent;		public final class NavPanel extends LSSprite	{		public var globalTitle:TextField;		public var localTitle:TextField;		public var saveGlobal:Button;		public var saveRoom:Button;				private var _displayMode:String = "";		private var _buttons:Object = new Object();		private var _globals:Array;		private var _locals:Array;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function NavPanel():void		{			super();						x = 10;			y = 45;						_globals = [				new ButtonAttributes(PanelDisplays.SETUP),				new ButtonAttributes(PanelDisplays.SETTINGS),				//new ButtonAttributes(PanelDisplays.MEDIA),				new ButtonAttributes(PanelDisplays.CAST),				new ButtonAttributes(PanelDisplays.RESPONSE),				new ButtonAttributes(PanelDisplays.ITEM),				new ButtonAttributes(PanelDisplays.COMBO),				new ButtonAttributes(PanelDisplays.COLLECTION),				new ButtonAttributes(PanelDisplays.GLOBAL_SCRIPT)];						_locals = [				new ButtonAttributes(PanelDisplays.ROOM),				new ButtonAttributes(PanelDisplays.ROOM_LAYOUT, false),				new ButtonAttributes(PanelDisplays.TREE, false),				new ButtonAttributes(PanelDisplays.LOCAL_SCRIPT, false)];						var yinc:int = 0;			var padT:int = 17;			var padB:int = 15;			var padBttn:int = 3;			yinc = _addButtons(_globals, globalTitle.y + padT);			yinc = saveGlobal.y = yinc + padBttn;			yinc = localTitle.y = Math.round(yinc + saveGlobal.height + padB);			yinc = _addButtons(_locals, localTitle.y + padT);			yinc = saveRoom.y = yinc + padBttn;						// listen for first room load; at which time, activate local nav buttons.			lsRoomData.addEventListener(ShepherdEvent.ROOM_DATA_LOADED, this.onLoadRoom);			saveRoom.addEventListener(MouseEvent.CLICK, this._onSaveRoomData);			saveGlobal.addEventListener(MouseEvent.CLICK, this._onSaveGameData);		}				protected override function init():void		{			_setSaveControls();		}				private function _addButtons(ids:Array, yinc:int=0):int		{			var cellSize:int = 45;						for (var j:int = 0; j < ids.length; j++)			{				var alt:Boolean = (j % 2 != 0);				var bttn:ButtonAttributes = ButtonAttributes(ids[j]);				var inst:NavButton = new NavButton(bttn.id);				inst.x = alt ? cellSize : 0;				inst.y = yinc;				inst.enabled = bttn.enable;				inst.addEventListener(MouseEvent.CLICK, (bttn.handler == null) ? onSelectButton : bttn.handler);				addChild(inst);								if (alt) yinc += cellSize;				_buttons[bttn.id] = inst;			}			if (!alt) yinc += cellSize;			return yinc;		}				private function _setSaveControls():void		{			// show save button if game data is loaded			saveGlobal.visible = lsGameData.isLoaded;			// show room editor button if room data is loaded			saveRoom.visible = lsRoomData.isLoaded;		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------		public function get displayMode():String		{			return _displayMode;		}				public function changeTo(newMode:String):void		{			if (newMode != _displayMode)			{				// deselect previous button				if (_buttons[_displayMode] != null)				{					NavButton(_buttons[_displayMode]).selected = false;				}				// select new button				if (_buttons[newMode] != null)				{					NavButton(_buttons[newMode]).selected = true;				}				_displayMode = newMode;				dispatchEvent(new Event(Event.CHANGE));			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function onSelectButton(evt:Event):void		{			changeTo(NavButton(evt.currentTarget).value);		}				private function onLoadRoom(evt:Event):void		{			// upon first room load, activate all local nav buttons.			lsRoomData.removeEventListener(ShepherdEvent.ROOM_DATA_LOADED, this.onLoadRoom);						for each (var j:ButtonAttributes in _locals)			{				NavButton(_buttons[ButtonAttributes(j).id]).enabled = true;			}			saveRoom.visible = true;		}				private function _onEditRoomLayout(evt:Event):void		{			// dispatch bubbling event up to shell application			dispatchEvent(new ShepherdEvent(ShepherdEvent.LOAD_ROOM, true));		}				// save game data				private function _onSaveGameData(evt:Event):void		{			lsServices.status("Saving...");			lsGameData.addEventListener(ShepherdEvent.GAME_DATA_SAVED, this._onSaveGameDataComplete);			lsGameData.save();		}				private function _onSaveGameDataComplete(evt:Event):void		{			// clean up game data save process			lsGameData.removeEventListener(ShepherdEvent.GAME_DATA_SAVED, this._onSaveGameDataComplete);			lsServices.close();		}				// save room data				private function _onSaveRoomData(evt:Event):void		{			lsServices.status("Saving room...");			lsRoomData.addEventListener(ShepherdEvent.ROOM_DATA_SAVED, this._onSaveRoomDataComplete);			lsRoomData.save();		}				private function _onSaveRoomDataComplete(evt:Event):void		{			// clean up room data save process			lsRoomData.removeEventListener(ShepherdEvent.ROOM_DATA_SAVED, this._onSaveRoomDataComplete);			lsServices.close();		}	}}internal final class ButtonAttributes{	public var id:String = "";	public var enable:Boolean;	public var handler:Function;		public function ButtonAttributes(i:String, e:Boolean=true, h:Function=null):void	{		id = i;		enable = e;		handler = h;	}}
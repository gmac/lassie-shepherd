package com.lassie.shepherd.editors.game.ui{	import com.lassie.shepherd.display.RegistrationPoint;	import com.lassie.shepherd.display.TransparencyTile;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.Sprite;	import flash.geom.Rectangle;		public class AssetPreview extends Sprite	{	// --------------------------------------------------	//  Private members	// --------------------------------------------------				protected var _assetKey:String = "";		protected var _artwork:AssetArtwork;		protected var _regPt:RegistrationPoint;		protected var _bounds:Rectangle;		protected var _artRect:Rectangle;		private var _enabled:Boolean = false;		private var _editableReg:Boolean = false;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function AssetPreview():void		{			super();						_artwork = new AssetArtwork();			addChild(_artwork);						_regPt = new RegistrationPoint();			addChild(_regPt);		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				// window appearance		public function resize(w:int, h:int):void		{			_bounds = new Rectangle(0, 0, w, h);						graphics.clear();			graphics.lineStyle(1, 0x000000, 1, true);			graphics.beginBitmapFill(new TransparencyTile());			graphics.drawRoundRect(_bounds.x, _bounds.y, _bounds.width, _bounds.height, 15);			graphics.endFill();						_artwork.x = _bounds.x;			_artwork.y = _bounds.y;			_regPt.x = _bounds.x + (_bounds.width / 2);			_regPt.y = _bounds.y + (_bounds.height / 2);		}				// field enabled		public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(val:Boolean):void		{			_enabled = val;			_regPt.visible = _artwork.visible = val;		}				// editable registration		public function get editableReg():Boolean		{			return _editableReg;		}				public function set editableReg(val:Boolean):void		{			if (val && !_editableReg)			{				_regPt.addEventListener(MouseEvent.MOUSE_DOWN, this.handleRegDrag);				_regPt.buttonMode = true;				_regPt.useHandCursor = true;				_regPt.alpha = 1;			}			else			{				_regPt.removeEventListener(MouseEvent.MOUSE_DOWN, this.handleRegDrag);				_regPt.buttonMode = false;				_regPt.useHandCursor = false;				_regPt.alpha = 0.5;			}						_editableReg = val;		}				// regX		public function get regX():int		{			return (_regPt.x - _artwork.x) * _artwork.scaleX;		}				public function set regX(val:int):void		{			_regPt.x = Math.max(0, Math.min(_artwork.x + (val * _artwork.scaleX), _bounds.width));			//_regPt.visible = (_assetKey != "");		}				// regY		public function get regY():int		{			return (_regPt.y - _artwork.y) * _artwork.scaleY;		}				public function set regY(val:int):void		{			_regPt.y = Math.max(0, Math.min(_artwork.y + (val * _artwork.scaleY), _bounds.width));			//_regPt.visible = (_assetKey != "");		}				// value		public function get value():String		{			return _assetKey;		}				public function set value(val:String):void		{			if (_assetKey != val)			{				// load artwork image				_assetKey = _artwork.load(val);				_regPt.visible = (_assetKey != "");								if (_assetKey == "")				{					dispatchEvent(new Event(Event.CHANGE));					return;				}				// reset artwork scale				_artwork.scaleX = _artwork.scaleY = 1;				var margin:int = 16;								// restrict height to bounds				if (_artwork.height > _bounds.height-margin)				{					_artwork.height = _bounds.height-margin;					_artwork.scaleX = _artwork.scaleY;				}								// restrict width to bounds				if (_artwork.width > _bounds.width-margin)				{					_artwork.width = _bounds.width-margin;					_artwork.scaleY = _artwork.scaleX;				}								// get artwork rect and registration offset				_artRect = _artwork.getRect(this);				var xoffset:int = _artRect.x - _artwork.x;				var yoffset:int = _artRect.y - _artwork.y;								// position artwork within preview area				_artRect.x = _bounds.x + Math.round((_bounds.width - _artRect.width) / 2);				_artRect.y = _bounds.y + Math.round((_bounds.height - _artRect.height) / 2);				_artwork.x = _artRect.x - xoffset;				_artwork.y = _artRect.y - yoffset;								if (!editableReg)				{					_regPt.x = _artwork.x;					_regPt.y = _artwork.y;				}			}		}		// current frame		public function get frame():String		{			return _artwork.frame;		}				public function set frame(val:String):void		{			_artwork.frame = val;		}				// get a list of all frame labels		public function getFrames():Array		{			return _artwork.framesList;		}					// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleRegDrag(evt:Event):void		{			stage.addEventListener(MouseEvent.MOUSE_UP, this.handleRegDrop);			_regPt.startDrag(true, _artRect);		}				private function handleRegDrop(evt:Event):void		{			stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleRegDrop);			_regPt.stopDrag();			dispatchEvent(new Event(Event.CHANGE));		}	}}import flash.display.Sprite;import flash.display.MovieClip;import com.lassie.shepherd.core.LSSprite;internal final class AssetArtwork extends LSSprite{	// --------------------------------------------------//  Private members// --------------------------------------------------		private var _asset:String="";	private var _img:MovieClip;	// --------------------------------------------------//  Constructor// --------------------------------------------------	public function AssetArtwork():void	{		super();	}	// --------------------------------------------------//  Populate methods// --------------------------------------------------	public function load(asset:String):String	{		// abort if asset is already set		if (asset == _asset)		{			return asset;		}				// clear existing image asset		if (_img != null)		{			removeChild(_img);			_img = null;		}				if (asset.indexOf(":") > 0)		{			// try to set new asset			try			{				_asset = asset;				_img = lsLibrary.getMovieClipByAddress(asset);				_img.stop();				addChild(_img);				return asset;			}			catch(e:Error)			{				_asset = "";				return _asset;			}		}		return (_asset = "");	}		public function get frame():String	{		if (_img != null)		{			try			{				return _img.currentLabel;			}			catch(e:Error)			{				return "";			}		}		return "";	}		public function set frame(f:String):void	{		if (_img != null)		{			try			{				_img.gotoAndStop(f);			}			catch(e:Error)			{				trace("[AssetArtwork] could not set image frame.");			}		}	}		public function get framesList():Array	{		if (_img != null)		{			try			{				return _img.currentLabels;			}			catch(e:Error)			{				return new Array();			}		}		return new Array();	}}
package com.lassie.shepherd.editors.game.tree{	import com.lassie.shepherd.editors.game.actions.GameDialogueEditor;	import com.lassie.shepherd.data.DialogueData;	import com.lassie.shepherd.ui.UIComboBox;	import flash.events.Event;		public final class TreeDialogueEditor extends GameDialogueEditor	{		private var _puppets:Array;		private var _selectPuppet:UIComboBox;				public function TreeDialogueEditor():void		{			super();			isRoomEditor = true;						_selectPuppet = new UIComboBox();			_selectPuppet.addEventListener(Event.CHANGE, this._onCapturePuppet);			_selectPuppet.x = puppetId.x;			_selectPuppet.y = puppetId.y;			_selectPuppet.width = puppetId.width;			_selectPuppet.height = puppetId.height;			removeChild(puppetId);			addChild(_selectPuppet);		}			// --------------------------------------------------	//  Override methods	// --------------------------------------------------				override public function set enabled(val:Boolean):void		{			super.enabled = val;			_selectPuppet.enabled = val;			if (!val) _selectPuppet.selectedIndex = 0;		}				override public function populate():void		{			super.populate();						if (data != null && dialogueList.length > 0)			{				var sel:int = _defaultPuppetIndex(dialogueData);				_selectPuppet.selectedIndex = Math.max(0, Math.min(sel, _selectPuppet.dataProvider.length));			}			else			{				_selectPuppet.selectedIndex = -1;			}		}				override protected function compileListDisplay(dat:DialogueData, index:int=-1):String		{			var i:int = _defaultPuppetIndex(dat);			return (index >= 0 ? index+" : " : "") + _puppets[i] +": "+ dat.caption;		}			// --------------------------------------------------	//  Puppet option controls	// --------------------------------------------------			public function setPuppetOptions(csv:String):void		{			_puppets = csv.split(",");			_selectPuppet.removeAll();						for (var j:int = 0; j< _puppets.length; j++)			{				_selectPuppet.addItem({label:_puppets[j], data:j});			}		}				public function clearPuppetOptions():void		{			_selectPuppet.removeAll();			_puppets = new Array();		}				private function _defaultPuppetIndex(dat:DialogueData):int		{			var sel:Number = parseInt(dat.puppet);			if (isNaN(sel)) sel = 0;			dat.puppet = sel.toString();			return sel;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function _onCapturePuppet(evt:Event):void		{			dialogueData.puppet = _selectPuppet.selectedIndex.toString();		}	}}
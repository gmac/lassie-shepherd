package com.lassie.shepherd.editors.game.tree{	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.actions.GameScriptEditor;	import com.lassie.shepherd.editors.actions.Editor;	import com.lassie.shepherd.data.game.*;	import com.lassie.shepherd.data.ActionsDataParser;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.ui.SimpleNavButton;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.events.UIEvent;	import fl.controls.TextInput;	import fl.controls.Button;	import fl.controls.List;	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.controls.NumericStepper;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.StyleSheet;	import flash.events.MouseEvent;	import flash.events.TextEvent;	import flash.events.FocusEvent;	import flash.events.Event;		public final class TreePanel extends RecordsPanel	{		private const EDIT_DIALOGUE:String = "dialogue";		private const EDIT_SCRIPT:String = "script";				public var treeId:TextInput;		public var lockTreeId:ToggleButton;		public var tierId:TextInput;		public var lockTierId:ToggleButton;		public var topicId:TextInput;		public var lockTopicId:ToggleButton;		public var manageTier:AddDeleteClone;		public var prevTier:Button;		public var nextTier:Button;		public var tierTopics:List;		public var topicNum:NumericStepper;		public var topicHidden:CheckBox;		public var topicAction:ComboBox;		public var tierAction:ComboBox;		public var topicMenuText:TextInput;		public var topicActionTarget:TextInput;		public var tierActionTarget:TextInput;		public var puppetsText:TextInput;		public var toggleDialogue:SimpleNavButton;		public var toggleScript:SimpleNavButton;		public var dialogueEditor:TreeDialogueEditor;		public var scriptEditor:GameScriptEditor;		public var breadcrumbs:TextField;				private var _currentEditor:Editor;		private var _currentTier:TierData;		private var _currentTopic:TopicData;		private var _topicIndex:int = -1;		private var _selectedTopic:String = "";		private var _breadcrumbs:Array;				public function TreePanel():void		{			super(new TreeRecordSet(),"Room Dialogue Trees", PanelDisplays.TREE);						dialogueEditor = new TreeDialogueEditor();			dialogueEditor.x = scriptEditor.x;			dialogueEditor.y = scriptEditor.y;			dialogueEditor.height = 112;			dialogueEditor.addEventListener(Event.CHANGE, this.onUpdateDialogue);			removeChild(scriptEditor);						treeId.addEventListener(Event.CHANGE, this.onCaptureTreeId);			lockTreeId.addEventListener(Event.CHANGE, this.onCaptureLockTreeId);						tierId.addEventListener(Event.CHANGE, this.onCaptureTierId);			lockTierId.addEventListener(Event.CHANGE, this.onCaptureLockTierId);						topicId.addEventListener(Event.CHANGE, this.onCaptureTopicId);			lockTopicId.addEventListener(Event.CHANGE, this.onCaptureLockTopicId);			puppetsText.addEventListener(FocusEvent.FOCUS_OUT, this.onCapturePuppets);						// tier controls			breadcrumbs.addEventListener(TextEvent.LINK, this.onSelectTreePoint);			manageTier.addEventListener(UIEvent.ADD, this.onAddTopic);			manageTier.addEventListener(UIEvent.COPY, this.onCopyTopic);			manageTier.addEventListener(UIEvent.DELETE, this.onRemoveTopic);			prevTier.addEventListener(MouseEvent.CLICK, this.onGoPrevTier);			nextTier.addEventListener(MouseEvent.CLICK, this.onGoNextTier);			topicHidden.addEventListener(Event.CHANGE, this.onCaptureTopicHidden);			topicNum.addEventListener(Event.CHANGE, this.onOrderTopics);			topicNum.stepSize = -1;						var tf:TextFormat = new TextFormat();			tf.tabStops = new Array(5, 120, 505);			tierTopics.addEventListener(Event.CHANGE, this.onSelectTierTopic);			tierTopics.setRendererStyle("textFormat", tf);			tierTopics.allowMultipleSelection = false;						// next-action selectors			topicMenuText.addEventListener(Event.CHANGE, this.onCaptureTopicMenu);			topicAction.addEventListener(Event.CHANGE, this.onCaptureTopicNext);			tierAction.addEventListener(Event.CHANGE, this.onCaptureTierNext);						// next-action targets			topicActionTarget.addEventListener(Event.CHANGE, this.onCaptureTopicTarget);			tierActionTarget.addEventListener(Event.CHANGE, this.onCaptureTierTarget);						// topic content editor option buttons			toggleDialogue.addEventListener(MouseEvent.CLICK, this.onSelectEditor);			toggleDialogue.value = EDIT_DIALOGUE;			toggleDialogue.icon = PanelDisplays.TREE;			toggleScript.addEventListener(MouseEvent.CLICK, this.onSelectEditor);			toggleScript.value = EDIT_SCRIPT;			toggleScript.icon = PanelDisplays.LOCAL_SCRIPT;			_setBreadcrumbs();		}		private function _setBreadcrumbs():void		{			var styles:StyleSheet = new StyleSheet();			styles.setStyle(".current", {fontSize:"14px", color:"#666666"});			styles.setStyle(".divider", {color:"#666666"});			styles.setStyle("a", {color:"#2E579B"});			styles.setStyle("a:hover", {textDecoration:"underline"});			breadcrumbs.styleSheet = styles;		}				override protected function launch():void		{			//idHelp.key = "tree_id";			_selectEditor(EDIT_DIALOGUE);			populate();		}			// --------------------------------------------------	//  Class methods	// --------------------------------------------------			internal function get selectedTree():TreeRecord		{			return dataProvider.selectedRecord as TreeRecord;		}				internal function get selectedTier():TierData		{			return _currentTier;		}				internal function get selectedTopic():TopicData		{			if (tierTopics.selectedIndex >= 0)			{				return selectedTier.getTopicByIndex(tierTopics.selectedIndex);			}			return null;		}			// --------------------------------------------------	//  RECORD methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			treeId.enabled = val;			lockTreeId.enabled = val;			tierId.enabled = val;			lockTierId.enabled = val;			manageTier.enabled = val;			dialogueEditor.enabled = val;			scriptEditor.enabled = val;						if (!val)			{				treeId.text = "";				tierId.text = "";				breadcrumbs.htmlText = "";				tierTopics.removeAll();				dialogueEditor.clearPuppetOptions();				dialogueEditor.data = null;				scriptEditor.data = null;				prevTier.enabled = false;				_setTopicEnabled(val);			}		}				protected override function populateRecord():void		{			var record:TreeRecord = selectedTree;			treeId.text = record.id;			treeId.enabled = !record.lockId;			lockTreeId.selected = record.lockId;			dialogueEditor.setPuppetOptions(record.puppets);			puppetsText.text = record.puppets;						// flush tier path and populate new tier display			_breadcrumbs = new Array();			_populateTier();		}			// --------------------------------------------------	//  TIER methods	// --------------------------------------------------				private function _populateTier(index:int=0):void		{			_setTier();						var tier:TierData = selectedTier;			tierTopics.removeAll();						for (var j:int = 0; j < tier.topics.length; j++)			{				var topic:TopicData = tier.getTopicByIndex(j);				tierTopics.addItem({label:_getTierListItem(j), data:topic.key});			}						// populate tier data			tierId.text = tier.id;			tierId.enabled = !tier.lockId;			lockTierId.selected = tier.lockId;						// set selected topic and topic ordering restraints			tierTopics.selectedIndex = (tier.numTopics > 0) ? Math.max(0, Math.min(index, tier.numTopics-1)) : -1;			topicNum.minimum = 0;			topicNum.maximum = tier.numTopics-1;							// enable "previous" button in all tiers but root.			prevTier.enabled = (_breadcrumbs.length > 0);			_populateTopic();		}				private function _setTier():void		{			var tier:TierData = selectedTree.root;			breadcrumbs.htmlText = '<b><a href="'+(_breadcrumbs.length < 1 ? "" : "event:-1")+'">root</a></b>';						// run through tier path and update tier by index.			for (var j:int = 0; j < _breadcrumbs.length; j++)			{				var num:int = _breadcrumbs[j];				var topic:TopicData = tier.getTopicByIndex(num);				var crumb:String;								if (j < _breadcrumbs.length-1)				{					// heirarchy.					crumb = '<a href="event:'+j+'">'+ topic.id +'</a>';				}				else				{					// current.					crumb = '<span class="current">'+topic.id+'</span>';				}				breadcrumbs.htmlText += '<span class="divider"> / </span>'+crumb;				// always end display with a "current" space to hold vertical placement.				breadcrumbs.htmlText += '<span class="current"> </span>';				tier = topic.tier;			}						// set final tier as the current tier data;			_currentTier = tier;		}				private function _popTopicSelection():void		{			if (tierTopics.selectedIndex > -1)			{				tierTopics.selectedItem.label = _getTierListItem(tierTopics.selectedIndex);				tierTopics.invalidateItemAt(tierTopics.selectedIndex);			}		}				private function _getTierListItem(index:int):String		{			var tier:TierData = selectedTier;			var topic:TopicData = tier.getTopicByIndex(index);			var txt:String = "id : "+topic.id+"\t";			txt += "| "+topic.getDialogue()+"\t";			txt += "["+(topic.hidden ? "  " : "x")+"]";			return txt;		}			// --------------------------------------------------	//  TOPIC methods	// --------------------------------------------------				private function _populateTopic():void		{			var topic:TopicData = selectedTopic;			_setTopicEnabled(topic != null);						if (topic != null)			{				topicId.text = topic.id;				topicId.enabled = !topic.lockId;				lockTopicId.selected = topic.lockId;				topicHidden.selected = !topic.hidden;				dialogueEditor.data = topic.action;				scriptEditor.data = topic.action;				topicMenuText.text = topic.action.title;				topicActionTarget.text = topic.topicTarget;				tierActionTarget.text = topic.tierTarget;				topicNum.value = tierTopics.selectedIndex;								var topicOptions:Array = new Array(					TreeActionKeys.LINE_STATIC,					TreeActionKeys.LINE_HIDE,					TreeActionKeys.LINE_REVEAL,					TreeActionKeys.LINE_REPLACE				);				var tierOptions:Array = new Array(					TreeActionKeys.TOPIC_STATIC,					TreeActionKeys.TOPIC_NEXT,					TreeActionKeys.TOPIC_PREV,					TreeActionKeys.TOPIC_JUMP,					TreeActionKeys.TOPIC_EXIT				);								topicAction.selectedIndex = topicOptions.indexOf(topic.topicAction);				tierAction.selectedIndex = tierOptions.indexOf(topic.tierAction);				_enableTopicTarget();				_enableTierTarget();			}		}				private function _setTopicEnabled(val:Boolean):void		{			topicId.enabled = val;			lockTopicId.enabled = val;			nextTier.enabled = val;			topicAction.enabled = val;			tierAction.enabled = val;			topicActionTarget.enabled = val;			tierActionTarget.enabled = val;			topicNum.enabled = val;			topicHidden.enabled = val;			dialogueEditor.enabled = val;			scriptEditor.enabled = val;						if (!val)			{				topicId.text = "";				topicActionTarget.text = "";				tierActionTarget.text = "";				tierAction.selectedIndex = 0;				topicAction.selectedIndex = 0;			}		}				private function _enableTopicTarget():void		{			var val:int = topicAction.selectedItem.data;			topicActionTarget.enabled = (val == TreeActionKeys.LINE_REVEAL || val == TreeActionKeys.LINE_REPLACE);			if (!topicActionTarget.enabled) topicActionTarget.text = "";		}				private function _enableTierTarget():void		{			var val:int = tierAction.selectedItem.data;			tierActionTarget.enabled = (val == TreeActionKeys.TOPIC_JUMP);			if (!tierActionTarget.enabled) tierActionTarget.text = "";		}			// --------------------------------------------------	//  Private utility methods	// --------------------------------------------------			private function _selectEditor(key:String):void		{			// clear any existing editor.			if (_currentEditor != null && this.contains(_currentEditor))			{				removeChild(_currentEditor);				_currentEditor = null;			}						// toggle nav buttons accordingly, get new editor reference.			switch (key)			{				case EDIT_DIALOGUE:					toggleDialogue.selected = true;					toggleScript.selected = false;					_currentEditor = dialogueEditor;					break;									case EDIT_SCRIPT:					toggleDialogue.selected = false;					toggleScript.selected = true;					_currentEditor = scriptEditor;					break;			}						// display new editor.			if (_currentEditor != null)			{				addChild(_currentEditor);				_currentEditor.populate();			}		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function onCaptureTreeId(evt:Event):void		{			selectedTree.id = treeId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockTreeId(evt:Event):void		{			selectedTree.lockId = lockTreeId.selected;			treeId.enabled = !lockTreeId.selected;		}				private function onCaptureTierId(evt:Event):void		{			selectedTier.id = tierId.text;		}				private function onCaptureLockTierId(evt:Event):void		{			selectedTier.lockId = lockTierId.selected;			tierId.enabled = !lockTierId.selected;		}				private function onCaptureTopicId(evt:Event):void		{			selectedTopic.id = topicId.text;			_popTopicSelection();		}				private function onCaptureLockTopicId(evt:Event):void		{			selectedTopic.lockId = lockTopicId.selected;			topicId.enabled = !lockTopicId.selected;		}				private function onCaptureTopicHidden(evt:Event):void		{			selectedTopic.hidden = !topicHidden.selected;			_popTopicSelection();		}				private function onCaptureTopicMenu(evt:Event):void		{			selectedTopic.action.title = topicMenuText.text;		}				private function onCaptureTopicNext(evt:Event):void		{			selectedTopic.topicAction = topicAction.selectedItem.data;			_enableTopicTarget();		}				private function onCaptureTierNext(evt:Event):void		{			selectedTopic.tierAction = tierAction.selectedItem.data;			_enableTierTarget();		}				private function onCaptureTopicTarget(evt:Event):void		{			selectedTopic.topicTarget = topicActionTarget.text;		}				private function onCaptureTierTarget(evt:Event):void		{			selectedTopic.tierTarget = tierActionTarget.text;		}				private function onCapturePuppets(evt:Event):void		{			selectedTree.puppets = puppetsText.text;			dialogueEditor.setPuppetOptions(selectedTree.puppets);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------		private function onAddTopic(evt:Event):void		{			var $topic:TopicData = selectedTier.addTopic();			$topic.id = "_"+ selectedTree.spawn++;			_populateTier( selectedTier.topics.length-1 );		}				private function onCopyTopic(evt:Event):void		{			ActionsDataParser.voiceIncrement = lsRoomData.voiceInc;			ActionsDataParser.reassignVoiceIncrement = true;						var $topic:TopicData = selectedTier.copyTopic(tierTopics.selectedIndex);						ActionsDataParser.reassignVoiceIncrement = false;			lsRoomData.voiceInc = ActionsDataParser.voiceIncrement;						$topic.id = "_"+ selectedTree.spawn++;			_populateTier( selectedTier.topics.length-1 );		}				private function onRemoveTopic(evt:Event):void		{			var index:int = selectedTier.deleteTopic(tierTopics.selectedIndex);			_populateTier(index);		}				private function onOrderTopics(evt:Event):void		{			var index:int = selectedTier.setTopicIndex(tierTopics.selectedIndex, topicNum.value);			_populateTier(index);		}				private function onGoPrevTier(evt:Event):void		{			var index:int = _breadcrumbs.pop();			_populateTier(index);		}				private function onGoNextTier(evt:Event):void		{			_breadcrumbs.push(tierTopics.selectedIndex);			_populateTier();		}				private function onSelectTierTopic(evt:Event):void		{			_selectedTopic = tierTopics.selectedItem.data;			_populateTopic();		}				private function onSelectTreePoint(evt:TextEvent):void		{			var index:int = parseInt(evt.text);			var trim:Array = _breadcrumbs.splice(index+1);			index = _breadcrumbs[_breadcrumbs.length-1];			_populateTier(index);		}				private function onSelectEditor(evt:Event):void		{			_selectEditor(SimpleNavButton(evt.currentTarget).value);		}				private function onUpdateDialogue(evt:Event):void		{			_popTopicSelection();		}	}}
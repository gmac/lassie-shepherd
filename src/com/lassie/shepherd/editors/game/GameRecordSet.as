package com.lassie.shepherd.editors.game{	import com.lassie.shepherd.core.LSDispatcher;	import com.lassie.shepherd.data.game.Record;	import com.lassie.shepherd.events.UIEvent;	import flash.events.EventDispatcher;	import flash.events.Event;		public class GameRecordSet extends LSDispatcher	{		// private		private var _selectedIndex:int = -1;				// protected		protected var _records:Array = new Array();				// public		public var enabled:Boolean = true;				public function GameRecordSet():void		{			super();		}			// --------------------------------------------------	//  Public properties	// --------------------------------------------------				public function get records():Array		{			return _records;		}				public function set records(val:Array):void		{			_records = val;		}				public function get numRecords():int		{			return _records.length;		}				public function get selectedIndex():int		{			if (numRecords < 1)			{				_selectedIndex = -1;			}			else			{				_selectedIndex = Math.max(0, Math.min(_selectedIndex, numRecords-1));			}			return _selectedIndex;		}				public function set selectedIndex(val:int):void		{			var prev:int = _selectedIndex;						if (numRecords == 0)			{				// no records: set index to -1				_selectedIndex = -1;			}			else			{				// restrict index to records range				_selectedIndex = Math.max(0, Math.min(val, numRecords-1));			}						// notify if changed			if (prev != _selectedIndex)			{				dispatchEvent(new Event(Event.CHANGE));			}		}				public function get recordsMenu():Array		{			// returns an array of combobox menu items			// formatted as {label:"", data:""};						var menu:Array = new Array();						for each (var i:Record in _records)			{				menu.push({label:i.id, data:i.id});			}			return menu;		}				public function get recordsList():Array		{			// returns an array of combobox menu items			// formatted as {label:"", data:""};						var list:Array = new Array();						for each (var i:Record in _records)			{				list.push(i.id);			}			return list;		}				public function get selectedRecord():Record		{			if (numRecords > 0)			{				return Record(records[selectedIndex]);			}			return null;		}				public function refreshDisplay():void		{			dispatchEvent(new UIEvent(UIEvent.REFRESH));		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------			public function addRecord():void		{			// override			fileNewRecord(new Record("Untyped Record"));		}				public function copyRecord():void		{			// override		}				public function removeRecord():void		{			if (numRecords > 0)			{				var i:Number = selectedIndex;				_records.splice(i, 1);				selectedIndex = Math.max(0, i-1);				//dispatchEvent(new UIEvent(UIEvent.DELETE));				refreshDisplay();			}		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------			protected function fileNewRecord(dat:Object):void		{			_records.push(dat);			selectedIndex = numRecords-1;			refreshDisplay();		}	}}
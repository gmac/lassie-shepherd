package com.lassie.shepherd.editors.game.room{	import com.lassie.shepherd.editors.game.ui.Panel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.ui.IncludeManager;	import com.lassie.shepherd.data.room.RoomPublisher;	import com.lassie.shepherd.data.FileService;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.events.ShepherdEvent;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.events.UIEvent;	import fl.controls.TextInput;	import fl.controls.Button;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		public final class RoomPanel extends Panel	{		public var startRoom:TextInput;		public var selectRoom:Button;		public var roomId:TextInput;		public var lockRoomId:ToggleButton;		public var mediaLibs:IncludeManager;		public var voiceLibs:IncludeManager;		public var editRoom:Button;		public var saveRoom:Button;		public var publishRoom:Button;				public var roomIdHelp:HelpLabel;		public var includesHelp:HelpLabel;				private var _currentRoomId:String;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function RoomPanel():void		{			super("Rooms Manager", PanelDisplays.ROOM);						startRoom.addEventListener(Event.CHANGE, this._onCaptureStartRoom);			selectRoom.addEventListener(MouseEvent.CLICK, this._onManageRoomFiles);			roomId.addEventListener(Event.CHANGE, this._onCaptureRoomId);			lockRoomId.addEventListener(MouseEvent.CLICK, this._onLockRoomId);			editRoom.addEventListener(MouseEvent.CLICK, this._onEditRoom);			saveRoom.addEventListener(MouseEvent.CLICK, this._onSaveRoom);			publishRoom.addEventListener(MouseEvent.CLICK, this._onPublishRoom);			mediaLibs.addEventListener(UIEvent.ADD, this._onAddArtLib);			mediaLibs.addEventListener(UIEvent.DELETE, this._onRemoveArtLib);			voiceLibs.addEventListener(UIEvent.ADD, this._onAddVoiceLibs);			voiceLibs.addEventListener(UIEvent.DELETE, this._onRemoveVoiceLibs);						mediaLibs.title = "Media Libraries";			voiceLibs.title = "Voice Libraries";		}		protected override function launch():void		{			roomIdHelp.key = "room_id";			includesHelp.key = "room_includes";		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				public override function populate():void		{			setFieldEnable(lsRoomData.isLoaded);			startRoom.text = lsGameData.defaultRoom;			roomId.text = lsRoomData.id;			lockRoomId.selected = lsRoomData.lockId;			mediaLibs.value = lsRoomData.coreLibs;			voiceLibs.value = lsRoomData.voiceLibs;						// if a new room has been loaded, then unload any existing layout.			if (_currentRoomId != lsRoomData.id)			{				dispatchEvent(new ShepherdEvent(ShepherdEvent.UNLOAD_ROOM, true));			}						// set room ID as the currently loaded room.			_currentRoomId = lsRoomData.id;		}				protected override function setFieldEnable(val:Boolean):void		{			selectRoom.enabled = true;			roomId.enabled = val ? !lsRoomData.lockId : false;			lockRoomId.enabled = val;			mediaLibs.enabled = val;			voiceLibs.enabled = val;			editRoom.enabled = val;			saveRoom.enabled = val;			publishRoom.enabled = val;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function _onCaptureStartRoom(evt:Event):void		{			lsGameData.defaultRoom = startRoom.text;		}				private function _onCaptureRoomId(evt:Event):void		{			lsRoomData.id = roomId.text;		}				private function _onLockRoomId(evt:Event):void		{			lsRoomData.lockId = lockRoomId.selected;			roomId.enabled = !lockRoomId.selected;		}				private function _onManageRoomFiles(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			lsServices.getRoomFiles();		}				// Core libs				private function _onAddArtLib(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			lsServices.selectCoreLib(lsRoomData);		}				private function _onRemoveArtLib(evt:Event):void		{			lsRoomData.coreLibs = mediaLibs.value;		}				// Raw data				private function _onAddVoiceLibs(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			lsServices.selectVoiceLib(lsRoomData);		}				private function _onRemoveVoiceLibs(evt:Event):void		{			lsRoomData.voiceLibs = voiceLibs.value;		}				private function _onUpdateAfterService(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			populate();		}				private function _onEditRoom(evt:Event):void		{			dispatchEvent(new ShepherdEvent(ShepherdEvent.LOAD_ROOM, true));		}				private function _onSaveRoom(evt:Event):void		{			lsRoomData.addEventListener(ShepherdEvent.ROOM_DATA_SAVED, this._onRoomSaved);			lsRoomData.save();			lsServices.status("Saving...");		}				private function _onRoomSaved(evt:Event):void		{			lsRoomData.removeEventListener(ShepherdEvent.ROOM_DATA_SAVED, this._onRoomSaved);			lsServices.close();		}				private function _onPublishRoom(evt:Event):void		{			var pub:RoomPublisher = new RoomPublisher(lsServices);		}	}}
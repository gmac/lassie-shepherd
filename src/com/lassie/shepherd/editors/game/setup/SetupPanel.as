package com.lassie.shepherd.editors.game.setup{	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.data.game.GamePublisher;	import com.lassie.shepherd.data.ApplicationData;	import com.lassie.shepherd.display.EditorDimensions;	import com.lassie.shepherd.editors.game.ui.Panel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.ui.IncludeManager;	import com.lassie.shepherd.ui.buttons.ActionButton;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.events.UIEvent;	import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.controls.TextInput;	import fl.controls.NumericStepper;	import fl.controls.Button;	import flash.events.Event;	import flash.events.MouseEvent;		public final class SetupPanel extends Panel	{		public var gameTitle:TextInput;		public var gameAuthor:TextInput;		public var serialKey:TextInput;		public var baseActions:TextInput;		public var verbDialect:TextInput;		public var itemDialect:TextInput;		public var languageKey:TextInput;		public var editorLanguage:ComboBox;		public var viewWidth:NumericStepper;		public var viewHeight:NumericStepper;		public var mediaLibs:IncludeManager;		public var voiceLibs:IncludeManager;		public var publishBttn:Button;		public var compactCheck:CheckBox;		public var encryptCheck:CheckBox;				public var titleHelp:HelpLabel;		public var authorHelp:HelpLabel;		public var serialHelp:HelpLabel;		public var dimensionsHelp:HelpLabel;		public var baseActionsHelp:HelpLabel;		public var verbDialectHelp:HelpLabel;		public var itemDialectHelp:HelpLabel;		public var langKeyHelp:HelpLabel;		public var editorLangHelp:HelpLabel;				private var _resizer:StageResizer;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function SetupPanel():void		{			super("Global Setup", PanelDisplays.SETUP);		}				protected override function launch():void		{			mediaLibs.title = "Media Libraries";			voiceLibs.title = "Voice Libraries";						_resizer = new StageResizer(stage);			gameTitle.addEventListener(Event.CHANGE, this._captureTitle);			gameAuthor.addEventListener(Event.CHANGE, this._captureAuthor);			serialKey.addEventListener(Event.CHANGE, this._captureSerial);			viewWidth.addEventListener(Event.CHANGE, this._captureWidth);			viewHeight.addEventListener(Event.CHANGE, this._captureHeight);			baseActions.addEventListener(Event.CHANGE, this._captureActions);			verbDialect.addEventListener(Event.CHANGE, this._captureVerbDialect);			itemDialect.addEventListener(Event.CHANGE, this._captureItemDialect);			mediaLibs.addEventListener(UIEvent.ADD, this._onAddArtLib);			mediaLibs.addEventListener(UIEvent.DELETE, this._onRemoveArtLib);			voiceLibs.addEventListener(UIEvent.ADD, this._onAddVoiceLib);			voiceLibs.addEventListener(UIEvent.DELETE, this._onRemoveVoiceLib);			publishBttn.addEventListener(MouseEvent.CLICK, this._onPublishXML);			languageKey.addEventListener(Event.CHANGE, this._captureLanguageKey);			editorLanguage.addEventListener(Event.CHANGE, this._setEditorLanguage);			compactCheck.addEventListener(Event.CHANGE, this._onToggleData);			encryptCheck.addEventListener(Event.CHANGE, this._onToggleData);			_popEditorLanguages();						// set help fields			titleHelp.key = "setup_title";			authorHelp.key = "setup_author";			serialHelp.key = "setup_serial";			dimensionsHelp.key = "setup_dimensions";			baseActionsHelp.key = "setup_base_actions";			verbDialectHelp.key = "setup_verb_dialect";			itemDialectHelp.key = "setup_item_dialect";			langKeyHelp.key = "setup_language_key";			editorLangHelp.key = "setup_editor_language";		}				private function _popEditorLanguages():void		{			var list:Array = ApplicationData.languageOptions;			var sel:int = 0;			//editorLanguage.removeAll();						for (var j:int = 0; j < list.length; j++)			{				editorLanguage.addItem({label:list[j], data:list[j]});				if (ApplicationData.language == list[j]) sel = j;			}			editorLanguage.selectedIndex = sel;		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			// do nothing		}				public override function populate():void		{			var dat:GameData = lsGameData;			gameTitle.text = dat.title;			gameAuthor.text = dat.author;			serialKey.text = dat.serialKey;			viewWidth.value = dat.stageWidth;			viewHeight.value = dat.stageHeight;			baseActions.text = dat.baseActions;			mediaLibs.value = dat.coreLibs;			voiceLibs.value = dat.voiceLibs;			verbDialect.text = dat.verbDialect;			itemDialect.text = dat.itemDialect;			languageKey.text = dat.gameLang;			compactCheck.selected = dat.compactData;			encryptCheck.selected = dat.encryptData;			_updateStageSize();		}				private function _updateStageSize():void		{			var dat:GameData = GameData.instance;			_resizer.resize(EditorDimensions.ROOM_EDITOR_SIDEBAR+dat.stageWidth, EditorDimensions.ROOM_EDITOR_HEADER+dat.stageHeight);		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------			private function _captureTitle(evt:Event):void {			GameData.instance.title = gameTitle.text;		}				private function _captureAuthor(evt:Event):void {			GameData.instance.author = gameAuthor.text;		}				private function _captureSerial(evt:Event):void {			GameData.instance.serialKey = serialKey.text;		}				private function _captureWidth(evt:Event):void {			GameData.instance.stageWidth = viewWidth.value;			_updateStageSize();		}				private function _captureHeight(evt:Event):void {			GameData.instance.stageHeight = viewHeight.value;			_updateStageSize();		}				private function _captureActions(evt:Event):void {			//GameData.instance.baseActions = baseActions.text;			GameData.instance.setBaseActions(baseActions.text);		}				private function _captureVerbDialect(evt:Event):void {			GameData.instance.verbDialect = verbDialect.text;		}				private function _captureItemDialect(evt:Event):void {			GameData.instance.itemDialect = itemDialect.text;		}				private function _captureLanguageKey(evt:Event):void {			GameData.instance.gameLang = languageKey.text;		}				private function _setEditorLanguage(evt:Event):void {			GameData.instance.editorLang = editorLanguage.selectedItem.data;			ApplicationData.language = editorLanguage.selectedItem.data;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				// Art libs				private function _onAddArtLib(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			lsServices.selectCoreLib(GameData.instance);		}				private function _onRemoveArtLib(evt:Event):void		{			GameData.instance.coreLibs = mediaLibs.value;		}				// Sound libs				private function _onAddVoiceLib(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			lsServices.selectVoiceLib(GameData.instance);		}				private function _onRemoveVoiceLib(evt:Event):void		{			GameData.instance.voiceLibs = voiceLibs.value;		}				private function _onUpdateAfterService(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onUpdateAfterService);			populate();		}				private function _onPublishXML(evt:Event):void		{			var pub:GamePublisher = new GamePublisher(lsServices);		}				private function _onToggleData(evt:Event):void {			GameData.instance.compactData = compactCheck.selected;			GameData.instance.encryptData = encryptCheck.selected;		}	}}
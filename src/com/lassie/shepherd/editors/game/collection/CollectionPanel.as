package com.lassie.shepherd.editors.game.collection{	import com.lassie.shepherd.data.game.CollectionRecord;	import com.lassie.shepherd.editors.game.GameController;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.ui.buttons.ActionButton;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import fl.controls.ComboBox;	import fl.controls.TextInput;	import fl.controls.List;	import fl.controls.CheckBox;	import fl.controls.ColorPicker;	import flash.events.Event;	import flash.events.MouseEvent;	public final class CollectionPanel extends RecordsPanel	{		public var textId:TextInput;		public var lockId:ToggleButton;		public var hoverColor:ColorPicker;		public var hoverMode:CheckBox;		public var itemSelect:ComboBox;		public var addButton:ActionButton;		public var removeButton:ActionButton;		public var itemsList:List;				public var idHelp:HelpLabel;		public var hoverColorHelp:HelpLabel;		public var itemSelectHelp:HelpLabel;		public var contentsHelp:HelpLabel;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function CollectionPanel():void		{			super(new CollectionRecordSet(), "Inventory Collections", PanelDisplays.COLLECTION);						addButton.icon = ActionButtonIcons.ADD;			removeButton.icon = ActionButtonIcons.DELETE;			textId.addEventListener(Event.CHANGE, this.onCaptureId);			lockId.addEventListener(Event.CHANGE, this.onCaptureLockId);			hoverColor.addEventListener(Event.CHANGE, this.onCaptureColor);			hoverMode.addEventListener(Event.CHANGE, this.onCaptureMode);			addButton.addEventListener(MouseEvent.CLICK, this.onAddItem);			removeButton.addEventListener(MouseEvent.CLICK, this.onRemoveItem);			itemsList.allowMultipleSelection = false;		}				internal function get selectedCollection():CollectionRecord		{			return dataProvider.selectedRecord as CollectionRecord;		}				protected override function launch():void		{			idHelp.key = "collection_id";			hoverColorHelp.key = "collection_hover_color";			itemSelectHelp.key = "collection_item_select";			contentsHelp.key = "collection_contents";		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			textId.enabled = val;			lockId.enabled = val;			hoverMode.enabled = val;			hoverColor.enabled = val;			itemSelect.enabled = val;			addButton.enabled = val;			removeButton.enabled = val;			itemsList.enabled = val;			itemsList.alpha = val ? 1 : 0.25;						if (!val)			{				textId.text = "";				lockId.selected = true;				hoverMode.selected = false;				hoverColor.selectedColor = 0x000000;				itemSelect.removeAll();				itemsList.removeAll();			}		}				protected override function populateRecord():void		{			var record:CollectionRecord = selectedCollection;			textId.text = record.id;			textId.enabled = !record.lockId;			lockId.selected = record.lockId;			hoverMode.selected = record.hoverMode;			hoverColor.selectedColor = record.hoverColor;						var itemMenu:Array = GameController.itemData.recordsMenu;			itemSelect.removeAll();			itemSelect.dataProvider.concat(itemMenu);			addButton.enabled = (itemMenu.length > 0);						populateItemsList(0);		}				private function populateItemsList(select:int):void		{			var itemList:Array = GameController.itemData.recordsList;			var list:Array = selectedCollection.items;			itemsList.removeAll();						// populate list of items			for (var j:int = 0; j < list.length; j++)			{				var item:String = list[j];								// check if item record still exists				if (itemList.indexOf(item) > -1)				{					itemsList.addItem({label:item, data:item});				}				else				{					// weed out redundant items					selectedCollection.items.splice(j, 1);					j--;				}			}						// set list selection			if (list.length < 1)			{				itemsList.selectedIndex = -1;				removeButton.enabled = false;			}			else			{				itemsList.selectedIndex = Math.max(0, Math.min(select, list.length-1));				removeButton.enabled = true;			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function onCaptureId(evt:Event):void		{			selectedCollection.id = textId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockId(evt:Event):void		{			selectedCollection.lockId = lockId.selected;			textId.enabled = !lockId.selected;		}				private function onCaptureColor(evt:Event):void		{			selectedCollection.hoverColor = hoverColor.selectedColor;		}				private function onCaptureMode(evt:Event):void		{			selectedCollection.hoverMode = hoverMode.selected;		}				private function onAddItem(evt:Event):void		{			selectedCollection.items.push(itemSelect.selectedItem.data);			populateItemsList(selectedCollection.items.length-1);		}				private function onRemoveItem(evt:Event):void		{			selectedCollection.items.splice(itemsList.selectedIndex, 1);			populateItemsList(itemsList.selectedIndex-1);		}	}}
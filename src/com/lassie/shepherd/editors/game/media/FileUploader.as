package com.lassie.shepherd.editors.game.media{	import com.lassie.shepherd.core.LSDispatcher;	import com.lassie.shepherd.data.FileService;	import flash.events.*;	import flash.net.FileReference;	import flash.net.URLRequest;	import flash.net.FileFilter;		public final class FileUploader extends LSDispatcher	{		private var _file:FileReference;		private var _fileName:String = "";				public function FileUploader():void		{			super();						_file = new FileReference();			_file.addEventListener(Event.SELECT, _onSelectFile);			_file.addEventListener(Event.CANCEL, _onCancel);			_file.addEventListener(Event.COMPLETE, _onComplete);			_file.addEventListener(Event.OPEN, _onStartUpload);			_file.addEventListener(ProgressEvent.PROGRESS, _onProgress);			_file.addEventListener(IOErrorEvent.IO_ERROR, _onError);			_file.addEventListener(SecurityErrorEvent.SECURITY_ERROR, _onError);		}				public function get selectedFile():String		{			return _fileName;		}				public function browse():void		{			var success:Boolean = false;						try			{				success = _file.browse();							}			catch (e:Error)			{				trace("Unable to browse for files.");			}						if (success) lsServices.modal();		}				public function uploadTo(path:String):void		{			try			{				_file.upload(new URLRequest(FileService.FILE_SERVICE+"upload.php?path="+path));			}			catch (e:Error)			{				trace("Unable to upload file");			}		}				private function _resetFile():void		{			_fileName = "";			dispatchEvent(new Event(Event.CHANGE));		}				private function _onSelectFile(event:Event):void		{			_fileName = _file.name;			dispatchEvent(new Event(Event.CHANGE));			lsServices.close();		}				private function _onCancel(evt:Event):void		{			//trace("[FileUploader] cancel.");			lsServices.close();		}				private function _onComplete(evt:Event):void		{			//trace("[FileUploader] complete.");			lsServices.close();		}				private function _onStartUpload(evt:Event):void		{			//trace("[FileUploader] start upload.");			lsServices.showProgress(0);			_resetFile();		}				private function _onProgress(evt:ProgressEvent):void		{			//trace("[FileUploader] progress: " + (evt.bytesLoaded / evt.bytesTotal));			lsServices.showProgress(evt.bytesLoaded / evt.bytesTotal);		}				private function _onError(evt:Event):void		{			trace("[FileUploader] error.");			lsServices.close();		}	}}
package com.lassie.shepherd.editors.game.media{	import com.lassie.shepherd.editors.game.ui.Panel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.data.FileService;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.ui.HelpLabel;	import fl.controls.TextInput;	import fl.controls.TextArea;	import fl.controls.ComboBox;	import fl.controls.Button;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;		public final class MediaPanel extends Panel	{		public var uploadFileName:TextInput;		public var browseBttn:Button;		public var uploadBttn:Button;		public var uploadPath:ComboBox;				public var newRawData:Button;		public var loadRawData:Button;		public var saveRawData:Button;		public var validateRawData:MovieClip;		public var rawFileName:TextInput;		public var rawDataText:TextArea;				public var uploadSelectHelp:HelpLabel;		public var uploadTypeHelp:HelpLabel;		public var rawFileHelp:HelpLabel;				private var _fileUpload:FileUploader;		private var _loadingFile:String = "";			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function MediaPanel():void		{			super("Media Manager", PanelDisplays.MEDIA);			_fileUpload = new FileUploader();			_fileUpload.addEventListener(Event.CHANGE, this._onChangeFileSelection);			browseBttn.addEventListener(MouseEvent.CLICK, this._onBrowseFiles);			uploadBttn.addEventListener(MouseEvent.CLICK, this._onUploadFile);			uploadFileName.enabled = false;						newRawData.addEventListener(MouseEvent.CLICK, this._onNewRawData);			loadRawData.addEventListener(MouseEvent.CLICK, this._onLoadRawData);			saveRawData.addEventListener(MouseEvent.CLICK, this._onSaveRawData);			validateRawData.addEventListener(MouseEvent.CLICK, this._onValidateRawData);			validateRawData.stop();			_newRawData();		}		protected override function launch():void		{			uploadSelectHelp.key = "media_upload_select";			uploadTypeHelp.key = "media_upload_type";			rawFileHelp.key = "media_raw_filename";		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				public override function populate():void		{			uploadFileName.text = _fileUpload.selectedFile;		}				protected override function setFieldEnable(val:Boolean):void		{					}			// --------------------------------------------------	//  Media uploader	// --------------------------------------------------				private function _onChangeFileSelection(evt:Event):void		{			uploadFileName.text = _fileUpload.selectedFile;		}				private function _onBrowseFiles(evt:Event):void		{			_fileUpload.browse();		}				private function _onUploadFile(evt:Event):void		{			_fileUpload.uploadTo(uploadPath.selectedItem.data);		}			// --------------------------------------------------	//  Raw Data	// --------------------------------------------------				private function _newRawData():void		{			rawDataText.text = '<?xml version="1.0" encoding="UTF-8"?>\n<raw>\n</raw>';			rawFileName.text = "new_raw_data";		}				private function _onNewRawData(evt:Event):void		{			_newRawData();		}				private function _onLoadRawData(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.SELECT_FILE, this._onSelectRawFile);			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseFileSelect);			lsServices.selectRawData(null);		}				private function _onCloseFileSelect(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.SELECT_FILE, this._onSelectRawFile);			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseFileSelect);		}				private function _onSelectRawFile(evt:ServiceEvent):void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this._onRawLoadComplete);			io.load(FileService.FILE_SERVICE + "/raw/" + evt.selectedFile);			lsServices.status("Loading raw data...");			rawFileName.text = evt.selectedFile.split(".")[0];		}				private function _onRawLoadComplete(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onRawLoadComplete);			rawDataText.text = io.data;			lsServices.close();		}				private function _onSaveRawData(evt:Event):void		{			var io:FileIO = new FileIO();			io.addEventListener(Event.COMPLETE, this._onRawSaveComplete);			io.save(FileService.FILE_SERVICE, "raw", rawFileName.text+".xml", rawDataText.text);			lsServices.status("Saving raw data...");		}				private function _onRawSaveComplete(evt:Event):void		{			var io:FileIO = FileIO(evt.currentTarget);			io.removeEventListener(Event.COMPLETE, this._onRawSaveComplete);			lsServices.close();		}				private function _onValidateRawData(evt:Event):void		{			var valid:Boolean = true;						try			{				new XML(rawDataText.text);			}			catch(e:Error)			{				valid = false;			}			lsServices.alert((valid ? "OK: valid" : "ERROR: invalid") + " XML structure.");		}	}}
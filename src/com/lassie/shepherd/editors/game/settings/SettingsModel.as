package com.lassie.shepherd.editors.game.settings{	import com.lassie.player.system.SystemParams;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;		public final class SettingsModel extends EventDispatcher	{		// menu		public var allowXMLCache:Boolean = true;		public var staticWindow:Boolean = true;		public var menuSubtitle:Boolean = true;		public var menuSubtitleSpeed:Boolean = true;		public var menuVoice:Boolean = true;		public var menuFullscreen:Boolean = true;		public var menuGraphicsQuality:Boolean = true;		public var menuHelp:Boolean = true;		public var menuQuit:Boolean = true;		public var menuHelpText:String = "";		public var menuLegalText:String = "";		public var mediaBaseURL:String = "";		public var xmlBaseURL:String = "";		public var language:String = "";				// UI		public var invenMode:String = "static";		public var invenShow:Number = 0.4;		public var invenHide:Number = 0.4;		public var actionMode:String = "disc";		public var actionShow:Number = 0.35;		public var actionHide:Number = 0.35;		public var tweenEngine:String = "tweener";		public var fileIOType:String = "sharedObject";		public var fileIOService:String = "save/fileio.php";		public var skipControl:String = "tab";		public var skipDiaControl:String = "mouse";		public var subtitleShow:Number = 0.4;		public var subtitleHide:Number = 0.4;		public var subtitleOverhead:int = 10;		public var subtitlePadding:int = 15;		public var contextOff:uint = 0xFFFFFF;		public var contextOn:uint = 0xFF0000;		public var treeOff:uint = 0xFFFFFF;		public var treeOn:uint = 0xFF0000;		public var curtainColor:uint = 0x000000;				private var _loaded:Boolean = false;				public function SettingsModel():void {			super();		}				public function load():void {			var $loader:URLLoader = new URLLoader();			$loader.addEventListener(Event.COMPLETE, this._onLoadComplete);			$loader.addEventListener(IOErrorEvent.IO_ERROR, this._onLoadComplete);			$loader.load( new URLRequest("xml/system.xml") );		}			private function _onLoadComplete($event:Event):void {				var $loader:URLLoader = $event.target as URLLoader;				$loader.removeEventListener(Event.COMPLETE, this._onLoadComplete);				$loader.removeEventListener(IOErrorEvent.IO_ERROR, this._onLoadComplete);								var $xml:XML = new XML( $loader.data );								if (!!$xml) {					allowXMLCache = ($xml[ SystemParams.ALLOW_XML_CACHE ].toString() == "1");					staticWindow = ($xml[ SystemParams.STATIC_WINDOW ].toString() == "1");					mediaBaseURL = $xml[ SystemParams.MEDIA_BASE_URL ].toString();					xmlBaseURL = $xml[ SystemParams.XML_BASE_URL ].toString();					language = $xml[ SystemParams.LANGUAGE ].toString();					fileIOType = $xml[ SystemParams.FILE_IO_TYPE ].toString();					fileIOService = $xml[ SystemParams.FILE_IO_SERVICE ].toString();					tweenEngine = $xml[ SystemParams.TWEEN_ENGINE ].toString();					invenMode = $xml[ SystemParams.INVENTORY_MODE ].toString();					invenShow = parseFloat( $xml[ SystemParams.INVENTORY_SHOW_TIME ].toString() );					invenHide = parseFloat( $xml[ SystemParams.INVENTORY_HIDE_TIME ].toString() );					actionMode = $xml[ SystemParams.ACTION_MODE ].toString();					actionShow = parseFloat( $xml[ SystemParams.ACTION_SHOW_TIME ].toString() );					actionHide = parseFloat( $xml[ SystemParams.ACTION_HIDE_TIME ].toString() );					skipControl = $xml[ SystemParams.SKIP_CONTROL ].toString();					skipDiaControl = $xml[ SystemParams.SKIP_DIALOGUE_CONTROL ].toString();					subtitleShow = parseFloat( $xml[ SystemParams.SUBTITLE_SHOW_TIME ].toString() );					subtitleHide = parseFloat( $xml[ SystemParams.SUBTITLE_HIDE_TIME ].toString() );					subtitleOverhead = parseInt( $xml[ SystemParams.SUBTITLE_OVERHEAD ].toString() );					subtitlePadding = parseInt( $xml[ SystemParams.SUBTITLE_PADDING ].toString() );					contextOff = parseInt( $xml[ SystemParams.CONTEXT_OFF_COLOR ].toString() );					contextOn = parseInt( $xml[ SystemParams.CONTEXT_ON_COLOR ].toString() );					treeOff = parseInt( $xml[ SystemParams.TREE_OFF_COLOR ].toString() );					treeOn = parseInt( $xml[ SystemParams.TREE_ON_COLOR ].toString() );					curtainColor = parseInt( $xml[ SystemParams.CURTAIN_COLOR ].toString() );					menuSubtitle = ($xml[ SystemParams.MENU_SUBTITLE ].toString() == "1");					menuSubtitleSpeed = ($xml[ SystemParams.MENU_SUBTITLE_SPEED ].toString() == "1");					menuVoice = ($xml[ SystemParams.MENU_VOICE ].toString() == "1");					menuFullscreen = ($xml[ SystemParams.MENU_FULLSCREEN ].toString() == "1");					menuGraphicsQuality = ($xml[ SystemParams.MENU_GRAPHICS_QUALITY ].toString() == "1");					menuQuit = ($xml[ SystemParams.MENU_QUIT ].toString() == "1");					menuHelp = ($xml[ SystemParams.MENU_HELP ].toString() == "1");					menuHelpText = $xml[ SystemParams.MENU_HELP_TEXT ].toString();					menuLegalText = $xml[ SystemParams.LEGAL_TEXT ].toString();				}								_loaded = true;				dispatchEvent(new Event(Event.COMPLETE));			}				/**		* Specifies if settings data has been loaded yet.		*/		public function get loaded():Boolean {			return _loaded;		}				/**		* Generates XML of the data.		*/		public function getXML():String {			var $xml:String = '<?xml version="1.0" encoding="UTF-8"?>\n';			$xml += '<system>\n';			$xml += '\t<'+ SystemParams.MEDIA_BASE_URL +'>'+ mediaBaseURL +'</'+ SystemParams.MEDIA_BASE_URL +'>\n';			$xml += '\t<'+ SystemParams.XML_BASE_URL +'>'+ xmlBaseURL +'</'+ SystemParams.XML_BASE_URL +'>\n';			$xml += '\t<'+ SystemParams.ALLOW_XML_CACHE +'>'+ _boolean(allowXMLCache) +'</'+ SystemParams.ALLOW_XML_CACHE +'>\n';			$xml += '\t<'+ SystemParams.STATIC_WINDOW +'>'+ _boolean(staticWindow) +'</'+ SystemParams.STATIC_WINDOW +'>\n';			$xml += '\t<'+ SystemParams.LANGUAGE +'>'+ language +'</'+ SystemParams.LANGUAGE +'>\n';			$xml += '\t<'+ SystemParams.FILE_IO_TYPE +'>'+ fileIOType +'</'+ SystemParams.FILE_IO_TYPE +'>\n';			$xml += '\t<'+ SystemParams.FILE_IO_SERVICE +'>'+ fileIOService +'</'+ SystemParams.FILE_IO_SERVICE +'>\n';			$xml += '\t<'+ SystemParams.TWEEN_ENGINE +'>'+ tweenEngine +'</'+ SystemParams.TWEEN_ENGINE +'>\n';			$xml += '\t<'+ SystemParams.INVENTORY_MODE +'>'+ invenMode +'</'+ SystemParams.INVENTORY_MODE +'>\n';			$xml += '\t<'+ SystemParams.INVENTORY_SHOW_TIME +'>'+ invenShow +'</'+ SystemParams.INVENTORY_SHOW_TIME +'>\n';			$xml += '\t<'+ SystemParams.INVENTORY_HIDE_TIME +'>'+ invenHide +'</'+ SystemParams.INVENTORY_HIDE_TIME +'>\n';			$xml += '\t<'+ SystemParams.ACTION_MODE +'>'+ actionMode +'</'+ SystemParams.ACTION_MODE +'>\n';			$xml += '\t<'+ SystemParams.ACTION_SHOW_TIME +'>'+ actionShow +'</'+ SystemParams.ACTION_SHOW_TIME +'>\n';			$xml += '\t<'+ SystemParams.ACTION_HIDE_TIME +'>'+ actionHide +'</'+ SystemParams.ACTION_HIDE_TIME +'>\n';			$xml += '\t<'+ SystemParams.SKIP_CONTROL +'>'+ skipControl +'</'+ SystemParams.SKIP_CONTROL +'>\n';			$xml += '\t<'+ SystemParams.SKIP_DIALOGUE_CONTROL +'>'+ skipDiaControl +'</'+ SystemParams.SKIP_DIALOGUE_CONTROL +'>\n';			$xml += '\t<'+ SystemParams.SUBTITLE_SHOW_TIME +'>'+ subtitleShow +'</'+ SystemParams.SUBTITLE_SHOW_TIME +'>\n';			$xml += '\t<'+ SystemParams.SUBTITLE_HIDE_TIME +'>'+ subtitleHide +'</'+ SystemParams.SUBTITLE_HIDE_TIME +'>\n';			$xml += '\t<'+ SystemParams.SUBTITLE_OVERHEAD +'>'+ subtitleOverhead +'</'+ SystemParams.SUBTITLE_OVERHEAD +'>\n';			$xml += '\t<'+ SystemParams.SUBTITLE_PADDING +'>'+ subtitlePadding +'</'+ SystemParams.SUBTITLE_PADDING +'>\n';			$xml += '\t<'+ SystemParams.CONTEXT_OFF_COLOR +'>'+ _hex(contextOff) +'</'+ SystemParams.CONTEXT_OFF_COLOR +'>\n';			$xml += '\t<'+ SystemParams.CONTEXT_ON_COLOR +'>'+ _hex(contextOn) +'</'+ SystemParams.CONTEXT_ON_COLOR +'>\n';			$xml += '\t<'+ SystemParams.TREE_OFF_COLOR +'>'+ _hex(treeOff) +'</'+ SystemParams.TREE_OFF_COLOR +'>\n';			$xml += '\t<'+ SystemParams.TREE_ON_COLOR +'>'+ _hex(treeOn) +'</'+ SystemParams.TREE_ON_COLOR +'>\n';			$xml += '\t<'+ SystemParams.CURTAIN_COLOR +'>'+ _hex(curtainColor) +'</'+ SystemParams.CURTAIN_COLOR +'>\n';			$xml += '\t<'+ SystemParams.MENU_SUBTITLE +'>'+ _boolean(menuSubtitle) +'</'+ SystemParams.MENU_SUBTITLE +'>\n';			$xml += '\t<'+ SystemParams.MENU_SUBTITLE_SPEED +'>'+ _boolean(menuSubtitleSpeed) +'</'+ SystemParams.MENU_SUBTITLE_SPEED +'>\n';			$xml += '\t<'+ SystemParams.MENU_VOICE +'>'+ _boolean(menuVoice) +'</'+ SystemParams.MENU_VOICE +'>\n';			$xml += '\t<'+ SystemParams.MENU_FULLSCREEN +'>'+ _boolean(menuFullscreen) +'</'+ SystemParams.MENU_FULLSCREEN +'>\n';			$xml += '\t<'+ SystemParams.MENU_GRAPHICS_QUALITY +'>'+ _boolean(menuGraphicsQuality) +'</'+ SystemParams.MENU_GRAPHICS_QUALITY +'>\n';			$xml += '\t<'+ SystemParams.MENU_QUIT +'>'+ _boolean(menuQuit) +'</'+ SystemParams.MENU_QUIT +'>\n';			$xml += '\t<'+ SystemParams.MENU_HELP +'>'+ _boolean(menuHelp) +'</'+ SystemParams.MENU_HELP +'>\n';			$xml += '\t<'+ SystemParams.MENU_HELP_TEXT +'><![CDATA['+ menuHelpText +']]></'+ SystemParams.MENU_HELP_TEXT +'>\n';			$xml += '\t<'+ SystemParams.LEGAL_TEXT +'><![CDATA['+ menuLegalText +']]></'+ SystemParams.LEGAL_TEXT +'>\n';			$xml += '</system>';			return $xml;		}				/**		* Converts a number to a hex code.		*/		private function _hex(hex:uint):String {			var r:Number = (hex >> 16);			var g:Number = (hex >> 8 ^ r << 8);			var b:Number = (hex ^ (r << 16 | g << 8));						var red:String   = r.toString(16);			var green:String = g.toString(16);			var blue:String  = b.toString(16);						red = (red.length < 2) ? '0' + red : red;			green = (green.length < 2) ? '0' + green : green;			blue = (blue.length < 2) ? '0' + blue : blue;						return "0x"+(red + green + blue).toUpperCase();		}				/**		* Converts a boolean to an output value.		*/		private function _boolean($value:Boolean):String {			return $value ? "1" : "0";		}	}}
package com.lassie.shepherd.editors.game.settings{	import com.lassie.shepherd.editors.game.ui.Panel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.data.FileIO;	import com.lassie.shepherd.data.FileService;	//import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.ui.HelpLabel;	import fl.controls.ComboBox;	import fl.controls.NumericStepper;	import fl.controls.ColorPicker;	import fl.controls.TextInput;	import fl.controls.TextArea;	import fl.controls.CheckBox;	import fl.controls.Button;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.MovieClip;		public final class SettingsPanel extends Panel	{		public var menuSubtitle:CheckBox;		public var menuSubtitleSpeed:CheckBox;		public var menuVoice:CheckBox;		public var menuFullscreen:CheckBox;		public var menuGraphics:CheckBox;		public var menuHelp:CheckBox;		public var menuHelpText:TextArea;		public var menuQuit:CheckBox;				public var selectInvenMode:ComboBox;		public var numInvenShow:NumericStepper;		public var numInvenHide:NumericStepper;		public var selectActionMode:ComboBox;		public var numActionShow:NumericStepper;		public var numActionHide:NumericStepper;		public var selectTweenEngine:ComboBox;		public var selectFileIOType:ComboBox;		public var inputFileIOService:TextInput;		public var inputSkip:TextInput;		public var inputDiaSkip:TextInput;		public var numSubtitleShow:NumericStepper;		public var numSubtitleHide:NumericStepper;		public var numSubtitleOverhead:NumericStepper;		public var numSubtitlePadding:NumericStepper;		public var colorContextOff:ColorPicker;		public var colorContextOn:ColorPicker;		public var colorTreeOff:ColorPicker;		public var colorTreeOn:ColorPicker;		public var colorCurtain:ColorPicker;		public var buttonSave:Button;				public var helpInvenMode:HelpLabel;		public var helpInvenShow:HelpLabel;		public var helpActionMode:HelpLabel;		public var helpActionShow:HelpLabel;		public var helpTweenEngine:HelpLabel;		public var helpFileIOType:HelpLabel;		public var helpFileIOService:HelpLabel;		public var helpSkip:HelpLabel;		public var helpSubtitleShow:HelpLabel;		//public var helpSubtitleHide:HelpLabel;		public var helpSubtitleOverhead:HelpLabel;		public var helpSubtitlePadding:HelpLabel;		public var helpContextOff:HelpLabel;		public var helpContextOn:HelpLabel;		public var helpTreeOff:HelpLabel;		public var helpTreeOn:HelpLabel;		public var helpCurtainColor:HelpLabel;				private var _model:SettingsModel;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function SettingsPanel():void		{			super("Engine Settings", PanelDisplays.SETTINGS);						_model = new SettingsModel();						// menu controls			menuSubtitle.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuSubtitleSpeed.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuVoice.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuFullscreen.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuGraphics.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuHelp.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuQuit.addEventListener(Event.CHANGE, this._onSetMenuConfig);			menuHelpText.addEventListener(Event.CHANGE, this._onSetHelpText);						// UI controls			selectInvenMode.addEventListener(Event.CHANGE, this._onSetInventory);			numInvenShow.addEventListener(Event.CHANGE, this._onSetInventory);			numInvenHide.addEventListener(Event.CHANGE, this._onSetInventory);			selectActionMode.addEventListener(Event.CHANGE, this._onSetActionSelect);			numActionShow.addEventListener(Event.CHANGE, this._onSetActionSelect);			numActionHide.addEventListener(Event.CHANGE, this._onSetActionSelect);			selectTweenEngine.addEventListener(Event.CHANGE, this._onSelectTweenEngine);			selectFileIOType.addEventListener(Event.CHANGE, this._onSelectFileIOType);			inputFileIOService.addEventListener(Event.CHANGE, this._onSetFileIOService);			inputSkip.addEventListener(Event.CHANGE, this._onSetSkip);			inputDiaSkip.addEventListener(Event.CHANGE, this._onSetSkip);			numSubtitleShow.addEventListener(Event.CHANGE, this._onSetSubtitle);			numSubtitleHide.addEventListener(Event.CHANGE, this._onSetSubtitle);			numSubtitleOverhead.addEventListener(Event.CHANGE, this._onSetSubtitle);			numSubtitlePadding.addEventListener(Event.CHANGE, this._onSetSubtitle);			colorContextOff.addEventListener(Event.CHANGE, this._onSetColors);			colorContextOn.addEventListener(Event.CHANGE, this._onSetColors);			colorTreeOff.addEventListener(Event.CHANGE, this._onSetColors);			colorTreeOn.addEventListener(Event.CHANGE, this._onSetColors);			colorCurtain.addEventListener(Event.CHANGE, this._onSetColors);			buttonSave.addEventListener(MouseEvent.CLICK, this._onSaveSettings);		}	// --------------------------------------------------	//  Main API	// --------------------------------------------------				public override function populate():void		{			if (!_model.loaded) {				// first time populating data...				// load model data then repopulate.				lsServices.status("Loading...");				_model.addEventListener(Event.COMPLETE, this._onLoadComplete);				_model.load();			}			else			{				var $j:int = 0;				// inventory mode selector.				for ($j = 0; $j < selectInvenMode.dataProvider.length; $j++) {					if (selectInvenMode.dataProvider.getItemAt($j).label == _model.invenMode) {						selectInvenMode.selectedIndex = $j;						break;					}				}								// action mode selector.				for ($j = 0; $j < selectActionMode.dataProvider.length; $j++) {					if (selectActionMode.dataProvider.getItemAt($j).label == _model.actionMode) {						selectActionMode.selectedIndex = $j;						break;					}				}								// tween engine selector.				for ($j = 0; $j < selectTweenEngine.dataProvider.length; $j++) {					if (selectTweenEngine.dataProvider.getItemAt($j).label == _model.tweenEngine) {						selectTweenEngine.selectedIndex = $j;						break;					}				}								// fileIO type selector.				for ($j = 0; $j < selectFileIOType.dataProvider.length; $j++) {					if (selectFileIOType.dataProvider.getItemAt($j).label == _model.fileIOType) {						selectFileIOType.selectedIndex = $j;						break;					}				}								numInvenShow.value = _model.invenShow * 1000;				numInvenHide.value = _model.invenHide * 1000;				numActionShow.value = _model.actionShow * 1000;				numActionHide.value = _model.actionHide * 1000;				inputFileIOService.text = _model.fileIOService;				inputSkip.text = _model.skipControl;				inputDiaSkip.text = _model.skipDiaControl;				numSubtitleShow.value = _model.subtitleShow * 1000;				numSubtitleHide.value = _model.subtitleHide * 1000;				numSubtitleOverhead.value = _model.subtitleOverhead;				numSubtitlePadding.value = _model.subtitlePadding;				colorContextOff.selectedColor = _model.contextOff;				colorContextOn.selectedColor = _model.contextOn;				colorTreeOff.selectedColor = _model.treeOff;				colorTreeOn.selectedColor = _model.treeOn;				colorCurtain.selectedColor = _model.curtainColor;				menuSubtitle.selected = _model.menuSubtitle;				menuSubtitleSpeed.selected = _model.menuSubtitleSpeed;				menuVoice.selected = _model.menuVoice;				menuFullscreen.selected = _model.menuFullscreen;				menuGraphics.selected = _model.menuGraphicsQuality;				menuHelp.selected = _model.menuHelp;				menuQuit.selected = _model.menuQuit;				menuHelpText.text = _model.menuHelpText;			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function _onLoadComplete($event:Event):void {			_model.removeEventListener(Event.COMPLETE, this._onLoadComplete);			lsServices.close();			populate();		}					// inventory.		private function _onSetInventory($event:Event):void {			_model.invenMode = selectInvenMode.selectedLabel;			_model.invenShow = numInvenShow.value / 1000;			_model.invenHide = numInvenHide.value / 1000;		}				// action selector.		private function _onSetActionSelect($event:Event):void {			_model.actionMode = selectActionMode.selectedLabel;			_model.actionShow = numActionShow.value / 1000;			_model.actionHide = numActionHide.value / 1000;		}				// tween / fileIO.		private function _onSelectTweenEngine($event:Event):void {			_model.tweenEngine = selectTweenEngine.selectedLabel;		}		private function _onSelectFileIOType($event:Event):void {			_model.fileIOType = selectFileIOType.selectedLabel;		}		private function _onSetFileIOService($event:Event):void {			_model.fileIOService = inputFileIOService.text;		}				// skip, subtitle, colors		private function _onSetSkip($event:Event):void {			_model.skipControl = inputSkip.text;			_model.skipDiaControl = inputDiaSkip.text;		}		private function _onSetSubtitle($event:Event):void {			_model.subtitleShow = numSubtitleShow.value / 1000;			_model.subtitleHide = numSubtitleHide.value / 1000;			_model.subtitleOverhead = numSubtitleOverhead.value;			_model.subtitlePadding = numSubtitlePadding.value;		}		private function _onSetColors($event:Event):void {			_model.contextOff = colorContextOff.selectedColor;			_model.contextOn = colorContextOn.selectedColor;			_model.treeOff = colorTreeOff.selectedColor;			_model.treeOn = colorTreeOn.selectedColor;			_model.curtainColor = colorCurtain.selectedColor;		}		private function _onSetMenuConfig($event:Event):void {			_model.menuSubtitle = menuSubtitle.selected;			_model.menuSubtitleSpeed = menuSubtitleSpeed.selected;			_model.menuVoice = menuVoice.selected;			_model.menuFullscreen = menuFullscreen.selected;			_model.menuGraphicsQuality = menuGraphics.selected;			_model.menuHelp = menuHelp.selected;			_model.menuQuit = menuQuit.selected;		}		private function _onSetHelpText($event:Event):void {			_model.menuHelpText = menuHelpText.text;		}				private function _onSaveSettings($event:Event):void {			lsServices.status("Saving...");						var $io:FileIO = new FileIO();			$io.addEventListener(Event.COMPLETE, this._onSaveComplete);			$io.save(FileService.FILE_SERVICE, "../xml", "system.xml", _model.getXML());		}			private function _onSaveComplete($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onSaveComplete);				lsServices.close();			}	}}
package com.lassie.shepherd.editors.game.cast{	import com.lassie.shepherd.data.game.CastRecord;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.editors.game.GameController;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import flash.geom.Rectangle;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.controls.TextInput;	import fl.controls.Button;	import fl.controls.ColorPicker;	public final class CastPanel extends RecordsPanel	{		private static const VIEW_ANGLES:Array = new Array("default", 			"rest1", "rest2", "rest3", "rest4", "rest5", "rest6", "rest7", "rest8",			"move1", "move2", "move3", "move4", "move5", "move6", "move7", "move8",			"talk1", "talk2", "talk3", "talk4", "talk5", "talk6", "talk7", "talk8");				public var textId:TextInput;		public var lockId:ToggleButton;		public var textTitle:TextInput;		public var textLibAsset:TextInput;		public var setLibAsset:Button;		public var selectCollection:ComboBox;		public var selectResponse:ComboBox;		public var selectPreviewFrame:ComboBox;		public var diaColor:ColorPicker;		public var checkDefault:CheckBox;				public var actorIdHelp:HelpLabel;		public var assetHelp:HelpLabel;		public var nameHelp:HelpLabel;		public var collectionHelp:HelpLabel;		public var responseHelp:HelpLabel;		public var diaColorHelp:HelpLabel;		public var anglePreviewHelp:HelpLabel;				private var _preview:ActorPreview;		private var _forceLoad:Boolean = true;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function CastPanel():void		{			super(new CastRecordSet(), "Actors", PanelDisplays.CAST);						textId.addEventListener(Event.CHANGE, this.onCaptureId);			lockId.addEventListener(Event.CHANGE, this.onCaptureLockId);			textTitle.addEventListener(Event.CHANGE, this.onCaptureTitle);			selectCollection.addEventListener(Event.CHANGE, this.onCaptureCollection);			selectResponse.addEventListener(Event.CHANGE, this.onCaptureResponse);			diaColor.addEventListener(Event.CHANGE, this.onCaptureDiaColor);			checkDefault.addEventListener(Event.CHANGE, this.onCaptureDefault);			setLibAsset.addEventListener(MouseEvent.CLICK, this._onSelectLibAsset);						_preview = new ActorPreview();			_preview.addEventListener(Event.CHANGE, this._onPreviewChange);			addChild(_preview);		}				internal function get selectedCast():CastRecord		{			return dataProvider.selectedRecord as CastRecord;		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				protected override function launch():void		{			// populate preview selector with view angles			for each (var j:String in VIEW_ANGLES)			{				selectPreviewFrame.addItem({label:j, data:j});			}			selectPreviewFrame.addEventListener(Event.CHANGE, this._onSelectPreviewFrame);						actorIdHelp.key = "actor_id";			assetHelp.key = "actor_asset";			nameHelp.key = "actor_name";			collectionHelp.key = "actor_collection";			responseHelp.key = "actor_response";			diaColorHelp.key = "actor_dia_color";			anglePreviewHelp.key = "actor_angle_preview";		}				protected override function init():void		{			super.init();			selectPreviewFrame.selectedIndex = 0;		}				protected override function uninit():void		{			// force load on next populate after leaving panel			_forceLoad = true;		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			textId.enabled = val;			lockId.enabled = val;			textLibAsset.enabled = false;			setLibAsset.enabled = val;			textTitle.enabled = val;			selectCollection.enabled = val;			selectResponse.enabled = val;			diaColor.enabled = val;			checkDefault.enabled = val;			_preview.enabled = val;						// clear field values if disabling			if (!val)			{				textId.text = "";				lockId.selected = false;				textLibAsset.text = "";				textTitle.text = "";				selectCollection.removeAll();				selectResponse.removeAll();				diaColor.selectedColor = 0x000000;			}		}				protected override function populateRecord():void		{			if (_forceLoad)			{				// force loads all libraries on each initial to-stage view of the panel.				_forceLoad = false; // << IMPORTANT: Set this BEFORE attempting load. Otherwise you get a stack overflow.				setFieldEnable(false);				lsServices.addEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);				lsServices.loadLibs(lsGameData.coreLibs);			}			else			{				var record:CastRecord = selectedCast;				textId.text = record.id;				textId.enabled = !record.lockId;				lockId.selected = record.lockId;				textLibAsset.text = record.asset;				_preview.value = record.asset;				_preview.regX = record.regX;				_preview.regY = record.regY;				textTitle.text = record.title;				diaColor.selectedColor = record.diaColor;				populateCollectionMenu(record);				populateResponseMenu(record);								var $default:Boolean = (lsGameData.defaultActor == record.id);				checkDefault.selected = $default;				checkDefault.enabled = !$default;			}		}				private function populateCollectionMenu(record:CastRecord):void		{			// populate collection menu selector			var collectionMenu:Array = GameController.collectionData.recordsMenu;			selectCollection.removeAll();						// if there are collections to populate			if (collectionMenu.length > 0)			{				// add all collections to menu display				selectCollection.dataProvider.concat(collectionMenu);				var sel:int = 0;								// loop through all menu items and search for the item to populate				for (var j:int = 0; j < collectionMenu.length; j++)				{					if (collectionMenu[j].label == record.inventory)					{						sel = j;						break;					}				}				// select current record				selectCollection.selectedIndex = sel;				record.inventory = selectCollection.selectedLabel;			}			else if (selectCollection.dataProvider.length > 0)			{				selectCollection.selectedIndex = 0;				record.inventory = selectCollection.selectedLabel;			}			else			{				selectCollection.selectedIndex = -1;				record.inventory = "";			}		}				private function populateResponseMenu(record:CastRecord):void		{			// populate response menu selector			var responseMenu:Array = GameController.responseData.recordsMenu;			selectResponse.removeAll();						if (responseMenu.length > 0)			{				// add all collections to menu display				selectResponse.dataProvider.concat(responseMenu);				var sel:int = 0;								// loop through all menu items and search for the item to populate				for (var j:int = 0; j < responseMenu.length; j++)				{					if (responseMenu[j].label == record.response)					{						sel = j;						break;					}				}				// select current record				selectResponse.selectedIndex = sel;				record.response = selectResponse.selectedLabel;			}			else if (selectResponse.dataProvider.length > 0)			{				selectResponse.selectedIndex = 0;				record.response = selectResponse.selectedLabel;			}			else			{				selectResponse.selectedIndex = -1;				record.response = "";			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function onCaptureId(evt:Event):void		{			selectedCast.id = textId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockId(evt:Event):void		{			selectedCast.lockId = lockId.selected;			textId.enabled = !lockId.selected;		}				private function onCaptureTitle(evt:Event):void		{			selectedCast.title = textTitle.text;		}				private function onCaptureCollection(evt:Event):void		{			selectedCast.inventory = selectCollection.selectedLabel;		}				private function onCaptureResponse(evt:Event):void		{			selectedCast.response = selectResponse.selectedLabel;		}				private function onCaptureDiaColor(evt:Event):void		{			selectedCast.diaColor = diaColor.selectedColor;		}				private function onCaptureDefault(evt:Event):void		{			lsGameData.defaultActor = selectedCast.id;			checkDefault.enabled = false;			_controller.populate();		}				private function _onSelectPreviewFrame(evt:Event):void		{			_preview.frame = selectPreviewFrame.selectedLabel;		}				private function _onPreviewChange(evt:Event):void		{			selectedCast.asset = _preview.value;			selectedCast.regX = _preview.regX;			selectedCast.regY = _preview.regY;		}				private function _onSelectLibAsset(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);			lsServices.browseLibs(selectedCast.asset);		}				private function _onSetLibAsset(evt:ServiceEvent):void		{			selectedCast.asset = evt.libraryAsset;			populate();		}				private function _onCloseAssetSelect(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);		}				private function _onLibsLoad(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);		}				private function _onLibLoadComplete(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);			setFieldEnable(true);			populate();		}	}}
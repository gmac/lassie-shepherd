package com.lassie.shepherd.editors.game.script{	import com.lassie.shepherd.data.game.ScriptRecord;	import com.lassie.shepherd.data.ApplicationData;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.actions.GameDialogueEditor;	import com.lassie.shepherd.editors.game.actions.GameScriptEditor;	//import com.lassie.shepherd.display.SyntaxColoring;	import com.lassie.shepherd.ui.buttons.ActionButton;	import com.lassie.shepherd.ui.ToggleButton;	import flash.display.SimpleButton;	import fl.controls.List;	import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.controls.TextInput;	import fl.controls.TextArea;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FocusEvent;	import flash.text.TextFormat;		public class ScriptPanel extends RecordsPanel	{		public var textId:TextInput;		public var lockId:ToggleButton;		public var scriptText:TextArea;		public var checkEnter:CheckBox;		public var checkExit:CheckBox;		public var selectScript:ComboBox;		public var addScript:ActionButton;		public var bttnValidate:SimpleButton;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function ScriptPanel(title:String="Scripts", icon:String=PanelDisplays.GLOBAL_SCRIPT):void		{			var $recordSet:ScriptRecordSet = new ScriptRecordSet();			super($recordSet, title, icon);			$recordSet.type = title;						textId.addEventListener(Event.CHANGE, this.onCaptureId);			lockId.addEventListener(Event.CHANGE, this.onCaptureLockId);			checkEnter.addEventListener(Event.CHANGE, this.onSelectEnter);			checkExit.addEventListener(Event.CHANGE, this.onSelectExit);			scriptText.addEventListener(Event.CHANGE, this.onCaptureScript);			scriptText.textField.multiline = true;			addScript.addEventListener(MouseEvent.CLICK, this.onAddScript);			bttnValidate.addEventListener(MouseEvent.CLICK, this.onValidateScript);		}				protected override function launch():void		{			// populate scripts list.			selectScript.removeAll();			var list:Array = ApplicationData.scriptsList;						for each (var j:String in list)			{				selectScript.addItem({label:j, data:j});			}		}				internal function get selectedScript():ScriptRecord		{			return dataProvider.selectedRecord as ScriptRecord;		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			textId.enabled = val;			lockId.enabled = val;			scriptText.enabled = val;						if (!val)			{				textId.text = "";				scriptText.text = "";			}		}				protected override function populateRecord():void		{			var record:ScriptRecord = selectedScript;			textId.text = record.id;			textId.enabled = !record.lockId;			lockId.selected = record.lockId;			scriptText.text = unescape(selectedScript.script);			//SyntaxColoring.renderField(scriptText.textField);		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------			private function onCaptureId(evt:Event):void		{			selectedScript.id = textId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockId(evt:Event):void		{			selectedScript.lockId = lockId.selected;			textId.enabled = !lockId.selected;		}				private function onCaptureScript(evt:Event):void		{			selectedScript.script = escape(scriptText.text);			//SyntaxColoring.renderLine(scriptText.textField, scriptText.textField.caretIndex);		}				private function onAddScript(evt:Event):void		{			selectedScript.script += escape("\n"+ ApplicationData.getScriptByMethod(selectScript.selectedLabel));			populate();		}				private function onValidateScript(evt:Event):void		{			var $valid:Boolean = true;						try {				new XML('<script>'+ scriptText.text +'</script>');			}			catch(e:Error) {				$valid = false;			}			lsServices.alert(($valid ? "OK: valid" : "ERROR: invalid") + " XML structure.");		}				protected function onSelectEnter(evt:Event):void		{			// override in subclass		}				protected function onSelectExit(evt:Event):void		{			// override in subclass		}	}}
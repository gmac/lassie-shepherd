package com.lassie.shepherd.editors.game.item{	import com.lassie.shepherd.data.game.ItemRecord;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.editors.game.ui.RecordsPanel;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.actions.GameActionController;	import com.lassie.shepherd.editors.game.actions.GameDialogueEditor;	import com.lassie.shepherd.editors.game.actions.GameScriptEditor;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.controls.ComboBox;	import fl.controls.TextInput;	import fl.controls.Button;	public final class ItemPanel extends RecordsPanel	{		public var textId:TextInput;		public var lockId:ToggleButton;		public var itemTitle:TextInput;		public var actionTitle:TextInput;		public var libAsset:TextInput;		public var selectAsset:Button;		public var selectFrame:ComboBox;		public var selectHoverFrame:ComboBox;		public var interactionController:GameActionController;		public var dialogueEditor:GameDialogueEditor;		public var scriptEditor:GameScriptEditor;				public var idHelp:HelpLabel;		public var titleHelp:HelpLabel;		public var assetHelp:HelpLabel;		public var imgFrameHelp:HelpLabel;		public var hoverFrameHelp:HelpLabel;				private var _preview:ItemPreview;		private var _forceLoad:Boolean = true;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function ItemPanel():void		{			super(new ItemRecordSet(), "Inventory Items", PanelDisplays.ITEM);						textId.addEventListener(Event.CHANGE, this.onCaptureId);			lockId.addEventListener(Event.CHANGE, this.onCaptureLockId);			itemTitle.addEventListener(Event.CHANGE, this.onCaptureTitle);			actionTitle.addEventListener(Event.CHANGE, this.onCaptureActionTitle);			selectFrame.addEventListener(Event.CHANGE, this.onCaptureFrame);			selectHoverFrame.addEventListener(Event.CHANGE, this.onCaptureHoverFrame);			selectAsset.addEventListener(MouseEvent.CLICK, this._onSelectLibAsset);			interactionController.addEventListener(Event.CHANGE, this.onChangeAction);			interactionController.dialogue = dialogueEditor;			interactionController.script = scriptEditor;						_preview = new ItemPreview();			_preview.addEventListener(Event.CHANGE, this._onPreviewChange);			addChild(_preview);		}				protected override function launch():void		{			idHelp.key = "item_id";			titleHelp.key = "item_title";			assetHelp.key = "item_asset";			imgFrameHelp.key = "item_img_frame";			hoverFrameHelp.key = "item_hover_frame";		}				protected override function uninit():void		{			// force libs to load on each new panel view			_forceLoad = true;		}				internal function get selectedItem():ItemRecord		{			return dataProvider.selectedRecord as ItemRecord;		}			// --------------------------------------------------	//  Protected methods	// --------------------------------------------------				protected override function setFieldEnable(val:Boolean):void		{			textId.enabled = val;			lockId.enabled = val;			itemTitle.enabled = val;			libAsset.enabled = false;			selectAsset.enabled = val;			selectFrame.enabled = val;			interactionController.enabled = val;			dialogueEditor.enabled = val;			scriptEditor.enabled = val;						// clear field values when disabling panel			if (!val)			{				textId.text = "";				lockId.selected = false;				itemTitle.text = "";				libAsset.text = "";				selectFrame.removeAll();			}		}				protected override function populateRecord():void		{			if (_forceLoad)			{				// force loads all libraries on each initial to-stage view of the panel.				_forceLoad = false; // << IMPORTANT: Set this BEFORE attempting load. Otherwise you get a stack overflow.				setFieldEnable(false);				lsServices.addEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);				lsServices.loadLibs(lsGameData.coreLibs);			}			else			{				var record:ItemRecord = selectedItem;				textId.text = record.id;				textId.enabled = !record.lockId;				lockId.selected = record.lockId;				itemTitle.text = record.title;				libAsset.text = record.asset;				_preview.value = record.asset;				interactionController.data = record.actions;				interactionController.populate();				actionTitle.text = interactionController.actionData.title;								_popFrameSelects();			}		}				private function _popFrameSelects():void		{			selectFrame.removeAll();			selectHoverFrame.removeAll();						var record:ItemRecord = selectedItem;			var frames:Array = _preview.getFrames();			var frameIndex:Number = -1;			var hoverIndex:Number = -1;			for (var j:int = 0; j < frames.length; j++)			{				selectFrame.addItem({label:frames[j].name, data:frames[j].name});				selectHoverFrame.addItem({label:frames[j].name, data:frames[j].name});				if (frames[j].name == record.frame) frameIndex = j;				if (frames[j].name == record.hoverFrame) hoverIndex = j;			}						// Frame Select						if (frameIndex == -1 && frames.length > 0)			{				// default to first available frame.				record.frame = frames[0];				selectFrame.selectedIndex = frameIndex = 0;			}			else if (frameIndex == -1)			{				// clear frame setting.				record.frame = "";				selectFrame.selectedIndex = frameIndex = -1;			}			else			{				// otherwise, select the configured frame option.				selectFrame.selectedIndex = frameIndex;			}						// Hover Frame Select						if (hoverIndex == -1 && record.frame != "")			{				// If frame does not exist within the MovieClip				// default to use the same value as main frame				record.hoverFrame = record.frame;				selectHoverFrame.selectedIndex = frameIndex;			}			else if (hoverIndex == -1 && frames.length > 0)			{				// otherwise, default to first available frame.				record.hoverFrame = frames[0];				selectHoverFrame.selectedIndex = 0;			}			else if (frameIndex == -1)			{				// clear frame setting.				record.hoverFrame = "";				selectHoverFrame.selectedIndex = -1;			}			else			{				// otherwise, select the configured frame option.				selectHoverFrame.selectedIndex = hoverIndex;			}						_popFrameImage();		}				private function _popFrameImage():void		{			// if item has a frame setting, populate the display.			if (selectedItem.frame != "")			{				_preview.frame = selectedItem.frame;			}		}	// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function onCaptureId(evt:Event):void {			selectedItem.id = textId.text;			dataProvider.refreshDisplay();		}				private function onCaptureLockId(evt:Event):void {			selectedItem.lockId = lockId.selected;			textId.enabled = !lockId.selected;		}				private function onCaptureTitle(evt:Event):void {			selectedItem.title = itemTitle.text;		}				private function onCaptureActionTitle(evt:Event):void {			interactionController.actionData.title = actionTitle.text;			interactionController.populate();		}				private function onCaptureFrame(evt:Event):void {			selectedItem.frame = selectFrame.selectedLabel;			_popFrameImage();		}				private function onCaptureHoverFrame(evt:Event):void {			selectedItem.hoverFrame = selectHoverFrame.selectedLabel;		}				private function onChangeAction(evt:Event):void {			actionTitle.text = interactionController.actionData.title;		}				private function _onPreviewChange(evt:Event):void {			selectedItem.asset = _preview.value;		}				private function _onSelectLibAsset(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);			lsServices.browseLibs(selectedItem.asset);		}				private function _onSetLibAsset(evt:ServiceEvent):void {			selectedItem.asset = evt.libraryAsset;			populate();		}				private function _onCloseAssetSelect(evt:Event):void {			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);		}				private function _onLibsLoad(evt:Event):void {			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSetLibAsset);			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onCloseAssetSelect);		}				private function _onLibLoadComplete(evt:Event):void {			lsServices.removeEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);			setFieldEnable(true);			populate();		}	}}
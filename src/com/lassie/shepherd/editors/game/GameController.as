package com.lassie.shepherd.editors.game{	import flash.events.EventDispatcher;	import flash.events.Event;	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.core.LSDispatcher;	import com.lassie.shepherd.events.ShepherdEvent;	import com.lassie.shepherd.editors.game.ui.PanelDisplays;	import com.lassie.shepherd.editors.game.setup.SetupPanel;	import com.lassie.shepherd.editors.game.room.RoomPanel;	import com.lassie.shepherd.editors.game.room.RoomLayoutPanel;	import com.lassie.shepherd.editors.game.settings.SettingsPanel;	import com.lassie.shepherd.editors.game.cast.CastPanel;	import com.lassie.shepherd.editors.game.collection.CollectionPanel;	import com.lassie.shepherd.editors.game.combo.ComboPanel;	import com.lassie.shepherd.editors.game.tree.TreePanel;	import com.lassie.shepherd.editors.game.item.ItemPanel;	import com.lassie.shepherd.editors.game.response.ResponsePanel;	import com.lassie.shepherd.editors.game.script.*;		public final dynamic class GameController extends LSDispatcher	{	// --------------------------------------------------	//  Singleton	// --------------------------------------------------				private static var _instance:GameController;				public static function get instance():GameController		{			if (_instance == null)			{				_instance = new GameController(new SingletonEnforcer());			}			return _instance;		}			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function GameController(enforcer:SingletonEnforcer):void		{			super();			this[PanelDisplays.SETUP] = new SetupPanel();			this[PanelDisplays.SETTINGS] = new SettingsPanel();			//this[PanelDisplays.MEDIA] = new MediaPanel();			this[PanelDisplays.CAST] = new CastPanel();			this[PanelDisplays.RESPONSE] = new ResponsePanel();			this[PanelDisplays.COLLECTION] = new CollectionPanel();			this[PanelDisplays.COMBO] = new ComboPanel();			this[PanelDisplays.ITEM] = new ItemPanel();			this[PanelDisplays.GLOBAL_SCRIPT] = new GlobalScriptPanel();			this[PanelDisplays.ROOM] = new RoomPanel();			this[PanelDisplays.ROOM_LAYOUT] = new RoomLayoutPanel();			this[PanelDisplays.LOCAL_SCRIPT] = new LocalScriptPanel();			this[PanelDisplays.TREE] = new TreePanel();						// update editor upon new data			lsGameData.addEventListener(ShepherdEvent.GAME_DATA_LOADED, this._onGameDataRefresh);			lsRoomData.addEventListener(ShepherdEvent.ROOM_DATA_LOADED, this._onRoomDataRefresh);						// update database upon export			lsGameData.addEventListener(ShepherdEvent.GAME_DATA_LOG, this._onLogAllGameData);			lsRoomData.addEventListener(ShepherdEvent.ROOM_DATA_LOG, this._onLogAllRoomData);		}			// --------------------------------------------------	//  Expose data providers	// --------------------------------------------------				public static function get castData():GameRecordSet		{			return CastPanel(instance[PanelDisplays.CAST]).dataProvider;		}				public static function get collectionData():GameRecordSet		{			return CollectionPanel(instance[PanelDisplays.COLLECTION]).dataProvider;		}				public static function get comboData():GameRecordSet		{			return ComboPanel(instance[PanelDisplays.COMBO]).dataProvider;		}				public static function get itemData():GameRecordSet		{			return ItemPanel(instance[PanelDisplays.ITEM]).dataProvider;		}		public static function get responseData():GameRecordSet		{			return ResponsePanel(instance[PanelDisplays.RESPONSE]).dataProvider;		}				public static function get globalScriptData():GameRecordSet		{			return ScriptPanel(instance[PanelDisplays.GLOBAL_SCRIPT]).dataProvider;		}				public static function get localScriptData():GameRecordSet		{			return ScriptPanel(instance[PanelDisplays.LOCAL_SCRIPT]).dataProvider;		}				public static function get treeData():GameRecordSet		{			return TreePanel(instance[PanelDisplays.TREE]).dataProvider;		}			// --------------------------------------------------	//  JUNK THIS STUFF!! (below)	// --------------------------------------------------				public static function getRecordIndex(id:String, menu:Array):int		{			for (var j:int=0; j < menu.length; j++)			{				if (menu.label == id)				{					return j;				}			}			return -1;		}			// --------------------------------------------------	//  Instance methods	// --------------------------------------------------				/*public function configure():void		{			trace("[GameController]: configure()");			gameData.actors = GameController.castData.records;			gameData.collections = GameController.collectionData.records;			gameData.combos = GameController.comboData.records;			gameData.items = GameController.itemData.records;			gameData.responses = GameController.responseData.records;			gameData.scripts = GameController.globalScriptData.records;		}*/				public function _onGameDataRefresh(evt:Event):void		{			GameController.castData.records = lsGameData.actors;			GameController.collectionData.records = lsGameData.collections;			GameController.comboData.records = lsGameData.combos;			GameController.itemData.records = lsGameData.items;			GameController.responseData.records = lsGameData.responses;			GameController.globalScriptData.records = lsGameData.scripts;		}				public function _onRoomDataRefresh(evt:Event):void		{			GameController.localScriptData.records = lsRoomData.scripts;			GameController.treeData.records = lsRoomData.diaTrees;		}				public function _onLogAllGameData(evt:Event):void		{			lsGameData.actors = GameController.castData.records;			lsGameData.collections = GameController.collectionData.records;			lsGameData.combos = GameController.comboData.records;			lsGameData.items = GameController.itemData.records;			lsGameData.responses = GameController.responseData.records;			lsGameData.scripts = GameController.globalScriptData.records;		}				public function _onLogAllRoomData(evt:Event):void		{			lsRoomData.scripts = GameController.localScriptData.records;			lsRoomData.diaTrees = GameController.treeData.records;		}	}}class SingletonEnforcer {}
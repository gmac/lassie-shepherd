package com.lassie.shepherd.editors.actions{	import flash.events.Event;	import flash.display.Sprite;	import fl.controls.ComboBox;	import com.lassie.shepherd.data.InteractionData;		public class BaseActionEditor extends Editor	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------			public var interactionSelect:ComboBox;		public var dialogueEditor:BaseDialogueEditor;		public var commandEditor:BaseScriptEditor;				private var _data:Array = new Array();		private var _dataIndex:int = 0;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function BaseActionEditor():void		{			super();						interactionSelect.addEventListener(Event.CHANGE, this.onSelectInteraction);		}			// --------------------------------------------------	//  Control toggles	// --------------------------------------------------			public function get dialogueEnabled():Boolean		{			return (dialogueEditor != null) && contains(dialogueEditor);		}				public function set dialogueEnabled(enable:Boolean):void		{			if (enable && !contains(dialogueEditor))			{				addChild(dialogueEditor);			}			else if (!enable && contains(dialogueEditor))			{				removeChild(dialogueEditor);			}		}				public function get commandsEnabled():Boolean		{			return (commandEditor != null) && contains(commandEditor);		}				public function set commandsEnabled(enable:Boolean):void		{			if (enable && !contains(commandEditor))			{				addChild(commandEditor);			}			else if (!enable && contains(commandEditor))			{				removeChild(commandEditor);			}		}			// --------------------------------------------------	//  Data accessors	// --------------------------------------------------				public function get data():Array		{			return _data;		}				public function set data(dat:Array):void		{			_data = dat;		}				public function get actionIndex():int		{			return (data.length < 1) ? -1 : Math.max(0, Math.min(_dataIndex, data.length-1));		}				public function set actionIndex(n:int):void		{			_dataIndex = (data.length < 1) ? -1 : Math.max(0, Math.min(n, data.length-1));		}				public function get actionData():InteractionData		{			return data[actionIndex] as InteractionData;		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				public override function populate():void		{			popInteractionsList();						if (dialogueEditor)			{				dialogueEditor.data = actionData;			}			if (commandEditor)			{				commandEditor.data = actionData;			}		}				protected function popInteractionsList():void		{			interactionSelect.removeAll();						if (data.length > 0)			{				for (var j:int = 0; j < data.length; j++)				{					var dat:InteractionData = data[j] as InteractionData;					interactionSelect.addItem({label:j +": "+ dat.title, data:j});				}								interactionSelect.selectedIndex = actionIndex;			}			else			{				interactionSelect.addItem({label:"[none]", data:0});			}		}				protected function addInteraction(title:String="newAction"):void		{			data.push(new InteractionData(title));			actionIndex = data.length-1;			populate();		}				protected function copyInteraction(i:int):void		{			// override in sub-class		}				protected function removeInteraction(i:int):void		{			if (data.length > 0)			{				data.splice(i, 1);				actionIndex = 0;				populate();			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function onSelectInteraction(evt:Event):void		{			actionIndex = interactionSelect.selectedIndex;			populate();			dispatchEvent( new Event(Event.CHANGE) );		}	}}
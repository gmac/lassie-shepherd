package com.lassie.shepherd.editors.actions{	import flash.events.Event;	import flash.events.FocusEvent;	import flash.display.Sprite;	import fl.controls.List;	import fl.controls.NumericStepper;	import fl.controls.TextArea;	import fl.controls.TextInput;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.data.InteractionData;	import com.lassie.shepherd.data.DialogueData;	import com.lassie.shepherd.data.ActionsDataParser;	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.events.UIEvent;	import com.lassie.utils.ObjectUtil;		public class BaseDialogueEditor extends Editor	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------			public var diaList:List;		public var diaActions:AddDeleteClone;		public var diaOrder:NumericStepper;		public var puppetId:TextInput;		public var puppetFrame:TextInput;		public var soundClass:TextInput;		public var subtitleText:TextArea;				// specifies if this editor manages room data or global data		public var isRoomEditor:Boolean = false;			// --------------------------------------------------	//  private members	// --------------------------------------------------			private var _data:InteractionData;		private var _editablePuppetId:Boolean = true;		private var _enabled:Boolean = true;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function BaseDialogueEditor():void		{			super();						diaList.allowMultipleSelection = false;			diaList.addEventListener(Event.CHANGE, this.onSelectDialogue);			diaOrder.addEventListener(Event.CHANGE, this.onReorderDialogue);						diaActions.addEventListener(UIEvent.ADD, this.onAddDialogue);			diaActions.addEventListener(UIEvent.COPY, this.onCopyDialogue);			diaActions.addEventListener(UIEvent.DELETE, this.onDeleteDialogue);						puppetId.addEventListener(Event.CHANGE, this.capturePuppetId);			puppetFrame.addEventListener(Event.CHANGE, this.capturePuppetFrame);			soundClass.addEventListener(Event.CHANGE, this.captureSoundClass);						subtitleText.addEventListener(Event.CHANGE, this.captureSubtitle);			subtitleText.addEventListener(FocusEvent.FOCUS_OUT, this.onBlurSubtitle);		}			// --------------------------------------------------	//  Data accessors	// --------------------------------------------------				public function get data():InteractionData		{			return _data;		}				public function set data(dat:InteractionData):void		{			_data = dat;			populate();		}				public function get editablePuppetId():Boolean		{			return _editablePuppetId;		}				public function set editablePuppetId(val:Boolean):void		{			_editablePuppetId = val;			puppetId.enabled = val;		}		public function get dataIndex():int		{			_data.activeDia = (dialogueList.length < 1) ? -1 : Math.max(0, Math.min(_data.activeDia, dialogueList.length-1));			return _data.activeDia;		}				public function set dataIndex(i:int):void		{			_data.activeDia = (dialogueList.length < 1) ? -1 : Math.max(0, Math.min(i, dialogueList.length-1));		}				public function get dialogueList():Array		{			try			{				return _data.dialogue;			}			catch(e:Error)			{				trace("Could not access dialogue list.");			}			return null;		}				public function get dialogueData():DialogueData		{			try			{				return _data.dialogue[dataIndex];			}			catch(e:Error)			{				trace("Could not access dialogue data.");			}			return null;		}			// --------------------------------------------------	//  Appearance	// --------------------------------------------------				public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(val:Boolean):void		{			_enabled = val;			diaList.enabled = val;			diaActions.enabled = val;			diaOrder.enabled = val;			puppetId.enabled = (val && _editablePuppetId);			puppetFrame.enabled = val;			soundClass.enabled = val;			subtitleText.enabled = val;						if (!val)			{				diaList.removeAll();				diaOrder.value = 0;			}		}				public override function set width(w:Number):void		{			subtitleText.width = (w - subtitleText.x);		}				public override function set height(h:Number):void		{			diaList.height = subtitleText.height = (h - diaList.y);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------			public override function populate():void		{			var enable:Boolean = (data != null);			diaActions.enabled = enable;			popDialogueList(enable);						if (enable)			{				// only enable the rest of the component if there is dialogue.				enable = (dialogueList.length > 0);			}						diaOrder.enabled = puppetFrame.enabled = soundClass.enabled = subtitleText.enabled = enable;			diaOrder.stepSize = -1;			diaOrder.minimum = 0;			diaOrder.maximum = enable ? dialogueList.length-1 : 0;			diaOrder.value = enable ? dataIndex : 0;			puppetId.text = enable ? dialogueData.puppet : "";			puppetFrame.text = enable ? dialogueData.frame : "";			soundClass.text = enable ? dialogueData.sound : "";			subtitleText.text = enable ? dialogueData.caption : "";			diaActions.cloneButton.enabled = enable;			diaActions.deleteButton.enabled = enable;			//popPuppetList(enable);		}				protected function popDialogueList(enable:Boolean=true):void		{			diaList.removeAll();			diaList.enabled = enable;						if (enable)			{				for (var j:int = 0; j < dialogueList.length; j++)				{					var dat:DialogueData = dialogueList[j] as DialogueData;					diaList.addItem({label:compileListDisplay(dat, j), data:j});				}								diaList.selectedIndex = dataIndex;			}		}				protected function compileListDisplay(dat:DialogueData, index:int=-1):String		{			return (index >= 0 ? index+" : " : "") + dat.puppet +": "+ dat.caption;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				protected function capturePuppetId(evt:Event):void		{			dialogueData.puppet = puppetId.text;		}				protected function capturePuppetFrame(evt:Event):void		{			dialogueData.frame = puppetFrame.text;		}				protected function captureSoundClass(evt:Event):void		{			dialogueData.sound = soundClass.text;		}				protected function captureSubtitle(evt:Event):void		{			dialogueData.caption = subtitleText.text;		}		private function _getVoiceIncrement():String {			if (isRoomEditor) return (lsRoomData.voiceInc++).toString();			return (GameData.instance.voiceInc++).toString();		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				protected function onSelectDialogue(evt:Event):void		{			dataIndex = diaList.selectedIndex;			populate();		}				protected function onReorderDialogue(evt:Event):void		{			var i:int = diaOrder.value;						if (i >= 0 && i <= dialogueList.length-1)			{				var dat:Array = dialogueList.splice(dataIndex, 1);				dialogueList.splice(i, 0, dat[0]);				dataIndex = i;				populate();			}		}				protected function onAddDialogue(evt:Event):void		{			var $dia:DialogueData = new DialogueData();			$dia.sound = _getVoiceIncrement();						dialogueList.push( $dia );			dataIndex = dialogueList.length;			populate();			dispatchEvent(new Event(Event.CHANGE));		}				protected function onCopyDialogue(evt:Event):void		{			var $dia:DialogueData = ActionsDataParser.toDialogueData(ObjectUtil.clone(dialogueData));			$dia.sound = _getVoiceIncrement();						dialogueList.push($dia);			dataIndex = dialogueList.length;			populate();			dispatchEvent(new Event(Event.CHANGE));		}				protected function onDeleteDialogue(evt:Event):void		{			dialogueList.splice(dataIndex, 1);			dataIndex--;			populate();			dispatchEvent(new Event(Event.CHANGE));		}				protected function onBlurSubtitle(evt:Event):void		{			popDialogueList();			dispatchEvent(new Event(Event.CHANGE));		}	}}
package com.lassie.shepherd.editors.actions{	import com.lassie.shepherd.data.ApplicationData;	import com.lassie.shepherd.data.InteractionData;	import com.lassie.shepherd.ui.buttons.ActionButton;	import fl.controls.TextArea;	import fl.controls.ComboBox;	import flash.display.SimpleButton;	import flash.events.Event;	import flash.events.MouseEvent;		public class BaseScriptEditor extends Editor	{		public var addScript:ActionButton;		public var selectScript:ComboBox;		public var textCommands:TextArea;		public var bttnValidate:SimpleButton;				private var _data:InteractionData;		private var _enabled:Boolean = true;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function BaseScriptEditor():void {			super();		}				protected override function launch():void		{			// populate scripts list.			selectScript.removeAll();			var list:Array = ApplicationData.scriptsList;						for each (var j:String in list)			{				selectScript.addItem({label:j, data:j});			}						// configure capture event listeners.			bttnValidate.addEventListener(MouseEvent.CLICK, this._onValidateScript);			addScript.addEventListener(MouseEvent.CLICK, this._onAddScript);			textCommands.addEventListener(Event.CHANGE, this.captureCommands);		}			// --------------------------------------------------	//  Data accessors	// --------------------------------------------------				public function get data():InteractionData		{			return _data;		}				public function set data(dat:InteractionData):void		{			_data = dat;			populate();		}			// --------------------------------------------------	//  Appearance	// --------------------------------------------------				public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(val:Boolean):void		{			_enabled = val;			textCommands.enabled = val;			selectScript.enabled = val;			addScript.enabled = val;						if (!val)			{				textCommands.text = "";			}		}				public override function set width(w:Number):void		{			textCommands.width = (w - textCommands.x);		}				public override function set height(h:Number):void		{			textCommands.height = (h - textCommands.y);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				public override function populate():void		{			var enable:Boolean = (data != null);			textCommands.enabled = enable;			textCommands.text = enable ? unescape(data.command) : "";		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function captureCommands(evt:Event):void		{			try			{				data.command = escape(textCommands.text);			}			catch(e:Error)			{				// do nothing			}		}				private function _onAddScript(evt:Event):void		{			data.command += escape("\n"+ ApplicationData.getScriptByMethod(selectScript.selectedLabel));			populate();		}				private function _onValidateScript(evt:Event):void		{			var $valid:Boolean = true;						try {				new XML('<script>'+ textCommands.text +'</script>');			}			catch(e:Error) {				$valid = false;			}			lsServices.alert(($valid ? "OK: valid" : "ERROR: invalid") + " XML structure.");		}	}}
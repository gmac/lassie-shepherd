package com.lassie.shepherd.editors.room{	import flash.events.Event;	import flash.geom.Rectangle;	import flash.display.DisplayObjectContainer;	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.core.IRoomEditor;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.display.TransparencyTile;	import com.lassie.shepherd.editors.room.controls.RoomControls;	import com.lassie.shepherd.editors.room.layout.RoomLayout;	public final class RoomEditor extends LSSprite implements IRoomEditor	{		private var _controller:RoomController;		private var _controls:RoomControls;		private var _layout:RoomLayout;		private var _debugMode:Boolean = false;				public function RoomEditor():void		{			super();			_controller = RoomController.instance;			//RoomController.library = this.lsLibrary;			//RoomController.services = this.lsServices;						_controls = new RoomControls();			_layout = new RoomLayout();		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				protected override function init():void		{			stage.addEventListener(Event.RESIZE, this._updateDisplay);			_updateDisplay();		}				protected override function uninit():void		{			stage.removeEventListener(Event.RESIZE, this._updateDisplay);		}			// --------------------------------------------------	//  Load process:	// --------------------------------------------------				public function loadRoom():void		{			// library should already be loaded			_controller.configure();			lsServices.addEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);			lsServices.loadLibs(lsRoomData.coreLibs+","+lsGameData.coreLibs, true);		}				public function unloadRoom():void		{			_enableControls(false);		}			// --------------------------------------------------	//  Private methods	// --------------------------------------------------				private function _updateDisplay(evt:Event=null):void		{			if (stage != null)			{				// draw transparent background checker				graphics.clear();				graphics.beginBitmapFill(new TransparencyTile());				graphics.drawRect(0, 0, stage.stageWidth-x, stage.stageHeight-y);				graphics.endFill();								// set scrollRect to frame size				scrollRect = new Rectangle(0, 0, stage.stageWidth, stage.stageHeight);			}		}				private function _enableControls(enable:Boolean):void		{			if (enable && !this.contains(_layout))			{				addChild(_layout);				addChild(_controls);			}			else if (!enable && this.contains(_layout))			{				removeChild(_layout);				removeChild(_controls);			}		}	// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function _onLibLoadComplete(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.LIBRARY_LOAD_COMPLETE, this._onLibLoadComplete);			_enableControls(true);		}	}}
package com.lassie.shepherd.editors.room.interfaces{	import flash.display.MovieClip;	import com.lassie.shepherd.data.room.LayerData;	import com.lassie.shepherd.data.room.PhaseData;	import com.lassie.shepherd.data.InteractionData;		public interface ILayer	{		// METHODS				function select():void;		function deselect():void;		function addPhase():void;		function clonePhase():void;		function deletePhase():void;				// image display properties		function get imageFrameLabels():Array;		function get imageFrame():int;				// LAYER				// layer type [read-only]		function get data():LayerData;		function get activePhaseData():PhaseData;				// layer type [read-only]		function get type():String;				// selected status [read-only]		function get selected():Boolean;				// layer Id		function get id():String;		function set id(val:String):void;				// lock layer Id		function get lockId():Boolean;		function set lockId(val:Boolean):void;				// phase ordering		function get numPhases():int;		function get phaseNum():int;		function set phaseNum(val:int):void;				// hover title		function get asset():String;		function set asset(val:String):void;				// image x-position		function get depth():int;		function set depth(val:int):void;		// common layer actions		function get layerActions():Array;		function set layerActions(val:Array):void;				// position lock		function get locked():Boolean;		function set locked(val:Boolean):void;		// permanent id / position lock [read-only]		function get permanentLockId():Boolean;		function get permanentLockArt():Boolean;		function get permanentLockPos():Boolean;				// allow the layer to have phase interactions [read-only]		function get allowInteractions():Boolean;				// allow the layer to be set as an NPC [read-only]		function get allowNPC():Boolean;				// include layer as an NPC option		function get npc():Boolean;		function set npc(val:Boolean):void;				// show layer		function get vis():Boolean;		function set vis(val:Boolean):void;				// PHASE				// list of phases [read-only]		function get phaseList():Array;				// active phase display		function get activePhase():int;		function set activePhase(val:int):void;				// current phase		function get phase():String;		function set phase(val:String):void;				// loack phase Id		function get lockPhaseId():Boolean;		function set lockPhaseId(val:Boolean):void;				// hover title		function get title():String;		function set title(val:String):void;				// hover cursor graphic		function get cursor():String;		function set cursor(val:String):void;				// parallax setting		function get parallax():String;		function set parallax(val:String):void;				// FILTERS				// scale filter		function get scale():String;		function set scale(val:String):void;				// color filter		function get color():String;		function set color(val:String):void;				// speed filter		function get speed():String;		function set speed(val:String):void;				// focus filter		function get focus():String;		function set focus(val:String):void;				function get previewScale():Boolean;		function set previewScale(val:Boolean):void;				function get previewColor():Boolean;		function set previewColor(val:Boolean):void;				function get previewFocus():Boolean;		function set previewFocus(val:Boolean):void;				// NUMBERS				// x-position		function get x():Number;		function set x(val:Number):void;				// y-position		function get y():Number;		function set y(val:Number):void;				// image alpha/opacity		function get opacity():Number;		function set opacity(val:Number):void;				// IMAGE CONTROLS				// enable image asset		function get image():Boolean;		function set image(val:Boolean):void;				// image frame		function get frame():int;		function set frame(val:int):void;				// image blend mode		function get blend():String;		function set blend(val:String):void;				// image x-position		function get imgX():int;		function set imgX(val:int):void;				// image y-position		function get imgY():int;		function set imgY(val:int):void;				// image scaleX		function get imgW():Number;		function set imgW(val:Number):void;				// image scaleY		function get imgH():Number;		function set imgH(val:Number):void;				// gets the actual image width and height dimensions.		function get imgWidth():Number;		function get imgHeight():Number;				// HIT CONTROLS				// enable hit area		function get hit():Boolean;		function set hit(val:Boolean):void;				// hit area shape		function get hitShape():String;		function set hitShape(val:String):void;				// hit x-position		function get hitX():int;		function set hitX(val:int):void;				// hit y-position		function get hitY():int;		function set hitY(val:int):void;				// hit area width		function get hitW():int;		function set hitW(val:int):void;				// hit area height		function get hitH():int;		function set hitH(val:int):void;				// floor x-position		function get bind():String;		function set bind(val:String):void;				// floor x-position		function get floorX():int;		function set floorX(val:int):void;				// floor y-position		function get floorY():int;		function set floorY(val:int):void;				// rate of movement		function get rate():int;		function set rate(val:int):void;				// onclick action		function get onclick():int;		function set onclick(val:int):void;				// view angle		function get angle():int;		function set angle(val:int):void;				// layer rotation		function get rotate():int;		function set rotate(val:int):void;				// dialogue color		function get diaColor():uint;		function set diaColor(val:uint):void;				// BOOLEANS				// enable layer floating		function get float():Boolean;		function set float(val:Boolean):void;				// enable mouse response		function get mouse():Boolean;		function set mouse(val:Boolean):void;				// enable bitmap caching		function get cache():Boolean;		function set cache(val:Boolean):void;				// BACKGROUND SCROLLING				// x-scroll rate		function get scrollMarginL():Number;		function set scrollMarginL(val:Number):void;				// y-scroll rate		function get scrollMarginR():Number;		function set scrollMarginR(val:Number):void;				// x-scroll margin		function get scrollMarginT():int;		function set scrollMarginT(val:int):void;				// y-scroll margin		function get scrollMarginB():int;		function set scrollMarginB(val:int):void;				// layer interaction data				function get actions():Array;		function set actions(val:Array):void;				function get actionsIndex():int;		function set actionsIndex(val:int):void;		// item interaction data				function get items():Array;		function set items(val:Array):void;				function get itemsIndex():int;		function set itemsIndex(val:int):void;	}}
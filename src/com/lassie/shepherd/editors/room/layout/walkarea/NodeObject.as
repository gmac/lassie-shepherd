package com.lassie.shepherd.editors.room.layout.walkarea{	import flash.display.Sprite;	import flash.events.MouseEvent;	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.data.room.NodeData;	import com.lassie.shepherd.editors.room.RoomController;		internal final class NodeObject extends LSSprite	{		private static const NODE_RADIUS:Number = 4;		private static const COLOR_NORMAL:uint = 0xFF3300;		private static const COLOR_NAMED:uint = 0xB722DD;		private static const COLOR_SELECTED:uint = 0xFFFFFF;			// --------------------------------------------------	//  Private members	// --------------------------------------------------				private var _data:NodeData;		private var _selected:Boolean = false;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function NodeObject(dat:NodeData):void		{			super();						// store reference to node's source data			_data = dat;						// redraw the node			redraw();		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				protected override function init():void		{			// test if node is plotted offscreen			// this will indicate if the node is a new addition			if (_data.x < 0 && _data.y < 0)			{				// if new addition, plot at the center of the viewable area				x = _data.x = RoomController.layoutCenterX;				y = _data.y = RoomController.layoutCenterY;			}			else			{				// otherwise, plot at the node data's coordinates				x = _data.x;				y = _data.y;			}		}			// --------------------------------------------------	//  Property getters / setters	// --------------------------------------------------				public function get data():NodeData		{			return _data;		}				public function get id():String		{			return _data.id;		}				// Neighbors list				public function get neighbors():Array		{			return _data.neighbors;		}				public function set neighbors(ary:Array):void		{			_data.neighbors = ary;		}				// Selected status				public function get selected():Boolean		{			return _selected;		}				public function set selected(val:Boolean):void		{			_selected = val;			redraw();		}			// --------------------------------------------------	//  Appearance	// --------------------------------------------------				public function redraw():void		{			var $fill:uint = _data.name == "" ? COLOR_NORMAL : COLOR_NAMED;			var color:uint = _selected ? COLOR_SELECTED : $fill;			graphics.clear();						// draw enlarged transparent hit area (show hit area if trapping is enabled).			if (_data.trap) graphics.lineStyle(1, 0x000000, 1);			graphics.beginFill(0xFFFFFF, _data.trap ? 0.85 : 0);			graphics.drawCircle(0, 0, NODE_RADIUS+2);						// draw node display			graphics.lineStyle(1, 0x000000, 1);			graphics.beginFill(color, 1);			graphics.drawCircle(0, 0, NODE_RADIUS);			graphics.endFill();		}				public override function stopDrag():void		{			super.stopDrag();			_data.x = x;			_data.y = y;		}	}}
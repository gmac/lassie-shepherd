package com.lassie.shepherd.editors.room.layout.layering{	import com.lassie.shepherd.data.room.LayerData;	import com.lassie.shepherd.data.room.LayerTypes;	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.data.game.CastRecord;	import com.lassie.shepherd.data.KeyValues;		public final class LayerFactory	{		private static var _spawnHotspot:int=0;		private static var _spawnPlane:int=0;				public static function create(type:String, dat:LayerData=null):LayerObject		{			var layer:LayerObject;						switch(type)			{				case LayerTypes.HOTSPOT:										// create new hotspot					layer = new HotspotLayer(dat);										// if hotspot has no initial data					if (dat == null)					{						// assign default layer id						layer.id = "puppet" + _spawnHotspot++;					}										return layer;									case LayerTypes.PLANE:									// create new plane					layer = new PlaneLayer(dat);										// if plane has no initial data					if (dat == null)					{						// assign default layer id						layer.id = LayerTypes.PLANE + _spawnPlane++;					}										return layer;								case LayerTypes.CHARACTER:					layer = new CharacterLayer(dat);					layer.id = KeyValues.AVATAR_LAYER;										if (GameData.instance.actors.length > 0)					{						var defaultCast:CastRecord = GameData.instance.actors[0] as CastRecord;						layer.title = defaultCast.id;						layer.asset = defaultCast.asset;						layer.imgX = -defaultCast.regX;						layer.imgY = -defaultCast.regY;					}					return layer;									case LayerTypes.BACKGROUND:									layer = new BackgroundLayer(dat);					layer.id = KeyValues.BACKGROUND_LAYER;					layer.locked = true;					return layer;									default:									return null;			}		}	}}
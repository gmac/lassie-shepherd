package com.lassie.shepherd.editors.room.layout.layering{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import com.lassie.shepherd.editors.room.interfaces.ITarget;	import com.lassie.shepherd.editors.room.interfaces.ITargetControl;	import com.lassie.shepherd.editors.room.layout.layering.TargetObject;	import com.lassie.shepherd.ui.RolloverLabel;		public final class TargetControl extends Sprite implements ITargetControl	{		private const OVERHEAD:int = 8;				private var _label:RolloverLabel;		private var _dragTarget:TargetObject;				public function TargetControl():void		{			super();						// disable mouse on main container			mouseEnabled = false;						// create new rollover label for displaying target data			_label = new RolloverLabel();						// listen for rollover events within the layout			addEventListener(MouseEvent.MOUSE_DOWN, this.handleTargetPress);			addEventListener(MouseEvent.MOUSE_OVER, this.handleTargetRollOver);			addEventListener(MouseEvent.MOUSE_OUT, this.handleTargetRollOut);		}			// --------------------------------------------------	//  IControlSystem interface	// --------------------------------------------------			public function get active():Boolean {			return visible;		}				public function activate():void {			visible = true;		}				public function deactivate():void {			visible = false;		}				public function updateDisplay():void {			// nothing		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------			public function addTarget():ITarget {			return addChild(new TargetObject()) as ITarget;		}			// --------------------------------------------------	//  Private methods	// --------------------------------------------------			private function showTargetLabel(target:TargetObject):void		{			_label.label = target.layerId;			_label.x = target.x;			_label.y = target.y-OVERHEAD;			addChild(_label);		}				private function setDragLabel():void		{			if (!_dragTarget) return;						if (!_dragTarget.turning) {				_label.label = "x:"+ _dragTarget.x +", y:"+ _dragTarget.y;			} else if (_dragTarget.hasBinding) {				_label.label = "grid binding";			} else {				_dragTarget.updateTurn();				_label.label = "view: "+ _dragTarget.turnView;			}						_label.x = _dragTarget.x;			_label.y = _dragTarget.y-OVERHEAD;		}				private function clearTargetLabel():void		{			if (this.contains(_label)) {				removeChild(_label);			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleTargetPress(evt:MouseEvent):void		{			_dragTarget = TargetObject(evt.target);			addEventListener(Event.ENTER_FRAME, this.handlePopDragCoords);			stage.addEventListener(MouseEvent.MOUSE_UP, this.handleTargetRelease);			setDragLabel();		}				private function handleTargetRelease(evt:MouseEvent):void		{			removeEventListener(Event.ENTER_FRAME, this.handlePopDragCoords);			stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleTargetRelease);						_dragTarget = null;						if (evt.target is TargetObject) {				showTargetLabel(TargetObject(evt.target));			} else {				clearTargetLabel();			}		}				private function handlePopDragCoords(evt:Event):void {			setDragLabel();		}				private function handleTargetRollOver(evt:MouseEvent):void		{			if (!_dragTarget) {				showTargetLabel(TargetObject(evt.target));			}		}				private function handleTargetRollOut(evt:MouseEvent):void		{			if (!_dragTarget) {				clearTargetLabel();			}		}	}}
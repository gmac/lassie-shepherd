package com.lassie.shepherd.editors.room.layout.layering{	import com.lassie.shepherd.data.KeyValues;	import com.lassie.shepherd.data.room.PhaseData;	import com.lassie.shepherd.data.room.LayerTypes;	import com.lassie.shepherd.data.InteractionFactory;	import com.lassie.shepherd.editors.room.RoomController;		internal final class PhaseFactory	{		public static function create(layerType:String, num:int=0):PhaseData		{			var phase:PhaseData = new PhaseData();						// set default phase ID			phase.id = (num == 0) ? KeyValues.BASE_STATE_ID : KeyValues.NEW_STATE_ID + num;			switch(layerType)			{				case LayerTypes.HOTSPOT:										phase.hitW = 100;					phase.hitH = 100;					phase.x = RoomController.layoutCenterX - 50;					phase.y = RoomController.layoutCenterY - 50;					phase.floorX = RoomController.layoutCenterX;					phase.floorY = RoomController.layoutCenterY;					phase.actions = InteractionFactory.createList();					phase.actionsIndex = 0;					phase.mouse = true;					return phase;									case LayerTypes.PLANE:									phase.x = RoomController.layoutCenterX;					phase.y = RoomController.layoutCenterY;					phase.hit = false;					return phase;									case LayerTypes.CHARACTER:										phase.x = RoomController.layoutCenterX;					phase.y = RoomController.layoutCenterY;					phase.hit = false;					return phase;									case LayerTypes.BACKGROUND:									phase.x = 0;					phase.y = 0;					phase.mouse = true;					phase.hitW = RoomController.layoutWidth;					phase.hitH = RoomController.layoutHeight;					return phase;									default:									return phase;			}						return phase;		}	}}
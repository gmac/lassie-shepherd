package com.lassie.shepherd.editors.room.data{	import com.lassie.utils.ObjectUtil;	import flash.events.Event;	import flash.events.EventDispatcher;	import com.lassie.shepherd.data.room.FilterData;	import com.lassie.shepherd.data.room.FilterTypes;	import com.lassie.shepherd.data.room.FilterAxis;	import com.lassie.shepherd.data.room.RoomDataParser;	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;		public final class FilterDataService extends EventDispatcher	{	// --------------------------------------------------	//  Private members	// --------------------------------------------------			private var _data:Array;		private var _currentRecord:int;				/**		* cache last returned matrix filter for look-up efficiency		*/		private var _filterCache:FilterData;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function FilterDataService(dat:Array):void		{			super();						// set source data			_data = dat;						// if no load data was provided			if (_data.length < 1)			{				// add default filter				addFilter("_main");			}			else			{				// otherwise, load saved data				updateLayout();			}		}					// --------------------------------------------------	//  Get source data	// --------------------------------------------------					public function get data():Array {			return _data;		}				public function clear():void {			_data = new Array();		}			// --------------------------------------------------	//  Control methods	// --------------------------------------------------				public function addFilter(id:String=""):void		{			_data.push(new FilterData(id));			_currentRecord = _data.length-1;						// redraw layout with changes			updateLayout();		}				public function cloneFilter():void		{			var rec:FilterData = RoomDataParser.toFilterData(ObjectUtil.clone(getCurrentData()));			rec.id += "Copy";						_data.push(rec);			_currentRecord = _data.length-1;						// redraw layout with changes			updateLayout();		}				public function removeFilter():Boolean		{			if (_data.length <= 1)			{				return false;			}			else			{				//var removedFilter:String = filterId;				_data.splice(_currentRecord, 1);				_currentRecord = 0;				_filterCache = null;				//dispatchEvent(new Event(removedFilter));				dispatchEvent(new Event(Event.REMOVED));			}						// redraw layout with changes			updateLayout();						// successfully removed			return true;		}			// --------------------------------------------------	//  Active filter data	// --------------------------------------------------				public function get activeFilter():int		{			return _currentRecord;		}				public function set activeFilter(index:int):void		{			// if index is within data range and is not alread active			if (index < _data.length && index != _currentRecord)			{				// set new selected index				_currentRecord = index;								// redraw layout with changes				updateLayout();			}		}				private function getCurrentData():FilterData		{			return FilterData(_data[_currentRecord]);		}			// --------------------------------------------------	//  Update methods	// --------------------------------------------------			public function updateFilterPreview():void		{			dispatchEvent(new Event(filterId));		}				public function updateLayout():void		{			// notify layout to redraw			dispatchEvent(new RoomEditorEvent(RoomEditorEvent.UPDATE_FILTER_LAYOUT));		}			// --------------------------------------------------	//  Active filter properties	// --------------------------------------------------				/**		* Read-write :		* Filter ID		*/		public function get filterId():String		{			return getCurrentData().id;		}				public function set filterId(id:String):void		{			getCurrentData().id = id;		}				/**		* Read-write :		* Lock filter ID		*/		public function get lockFilterId():Boolean		{			return getCurrentData().lockId;		}				public function set lockFilterId(val:Boolean):void		{			getCurrentData().lockId = val;		}				/**		* Read-write :		* Filter axis		*/		public function get filterAxis():String		{			return getCurrentData().axis;		}				public function set filterAxis(axis:String):void		{			// get current filter data			var filter:FilterData = getCurrentData();						// if axis has changed			if (filter.axis != axis)			{				// set new filter axis				filter.axis = axis;								// snap X and Y asix to common skew				if (axis == FilterAxis.Y)				{					filter.x1 = filter.x0;					filter.y1 = filter.y0 + 100;				}				else if (axis == FilterAxis.X)				{					filter.x1 = filter.x0 + 100;					filter.y1 = filter.y0;				}				// redraw layout and previews				updateLayout();				updateFilterPreview();			}		}				/**		* Read-write :		* Filter enabled		*/		public function get filterEnabled():Boolean		{			return getCurrentData().enabled;		}				public function set filterEnabled(enable:Boolean):void		{			getCurrentData().enabled = enable;		}				/**		* Read-write filter properties		*/				// SCALE		public function get scale0():Number {			return getCurrentData().scale0;		}		public function set scale0(val:Number):void {			getCurrentData().scale0 = val;			updateFilterPreview();		}				public function get scale1():Number {			return getCurrentData().scale1;		}		public function set scale1(val:Number):void {			getCurrentData().scale1 = val;			updateFilterPreview();		}				// SPEED		public function get speed0():Number {			return getCurrentData().speed0;		}		public function set speed0(val:Number):void {			getCurrentData().speed0 = val;			updateFilterPreview();		}				public function get speed1():Number {			return getCurrentData().speed1;		}		public function set speed1(val:Number):void {			getCurrentData().speed1 = val;			updateFilterPreview();		}				// BLUR		public function get blur0():Number {			return getCurrentData().blur0;		}		public function set blur0(val:Number):void {			getCurrentData().blur0 = val;			updateFilterPreview();		}				public function get blur1():Number {			return getCurrentData().blur1;		}		public function set blur1(val:Number):void {			getCurrentData().blur1 = val;			updateFilterPreview();		}				// TINT		public function get tint0():Number {			return getCurrentData().tint0;		}		public function set tint0(val:Number):void {			getCurrentData().tint0 = val;			updateFilterPreview();		}				public function get tint1():Number {			return getCurrentData().tint1;		}		public function set tint1(val:Number):void {			getCurrentData().tint1 = val;			updateFilterPreview();		}				// COLOR		public function get color0():Number {			return getCurrentData().color0;		}		public function set color0(val:Number):void {			getCurrentData().color0 = val;			updateFilterPreview();		}				public function get color1():Number {			return getCurrentData().color1;		}		public function set color1(val:Number):void {			getCurrentData().color1 = val;			updateFilterPreview();		}				/**		* Read-only :		* List of filters		*/		public function get filterList():Array		{			// create new list			var list:Array = new Array();						// collect all data ID's within list			for (var j:int = 0; j < _data.length; j++)			{				list.push(_data[j].id);			}						// return list of filters IDs			return list;		}				/**		* Read-only :		* Current filter data		*/		public function get activeFilterData():FilterData {			return getCurrentData();		}			// --------------------------------------------------	//  Preview Methods	// --------------------------------------------------			/**		* Get filter data for filter matrix previews:		*/		public function getFilterById(id:String):FilterData		{			if (_filterCache != null && _filterCache.id == id)			{				return _filterCache;			}			else			{				for (var j:int = 0; j < data.length; j++)				{					var filter:FilterData = data[j] as FilterData;					if (filter.id == id)					{						return _filterCache = filter;					}				}								return _filterCache = null;			}		}	}}
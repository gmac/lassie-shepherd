package com.lassie.shepherd.editors.room.controls.puppet{	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import com.lassie.shepherd.editors.room.controls.ui.RoomEditorWindow;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.interfaces.ILayer;	import com.lassie.shepherd.editors.actions.Editor;	import com.lassie.shepherd.ui.SimpleNavButton;	import com.lassie.shepherd.ui.LabeledToggleButton;	import com.lassie.shepherd.ui.NavButtonIcons;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		public final class PuppetWindow extends RoomEditorWindow	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------		public var modeState:LabeledToggleButton;		public var modeItems:LabeledToggleButton;		//public var modeLayer:LabeledToggleButton;		public var viewDialogue:SimpleNavButton;		public var viewScript:SimpleNavButton;		public var controller:PuppetActions;		public var messageText:TextField;			// --------------------------------------------------	//  Private members	// --------------------------------------------------		//private var _mode:String = "";		private var _view:String = "";		private var _activeEditor:Editor;		private var _dialogue:PuppetDialogue;		private var _script:PuppetScript;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function PuppetWindow():void		{			super();						// clear message display by default.			message = "";						// listen changing of the layer selection.			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYER_SELECTION, this._onSelectLayer);			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYER_CONTROLS, this._onSelectLayer);						// configure window setup.			resizable = true;			closable = true;			dragable = true;			sidebar = 140;			// create editor panels			_dialogue = new PuppetDialogue();			_script = new PuppetScript();			_dialogue.x = _script.x = 155;			_dialogue.y = _script.y = 51;			controller.dialogue = _dialogue;			controller.script = _script;						// configure view icons			viewDialogue.icon = NavButtonIcons.PUPPET_DIALOGUE;			viewScript.icon = NavButtonIcons.PUPPET_SCRIPT;						// configure ui buttons			_initModeButtons();			_initViewButtons();			setToMinSize(600, 300);		}				private function _initModeButtons():void		{			// state actions			modeState.label = "Interactions";			modeState.value = EditorModes.MODE_STATE;			modeState.toggle = false;			modeState.addEventListener(MouseEvent.CLICK, this._onSelectMode);						// state items			modeItems.label = "Item Reactions";			modeItems.value = EditorModes.MODE_ITEMS;			modeItems.toggle = false;			modeItems.addEventListener(MouseEvent.CLICK, this._onSelectMode);						/*			// layer actions			modeLayer.label = "Layer Actions";			modeLayer.value = EditorModes.MODE_LAYER;			modeLayer.toggle = false;			modeLayer.addEventListener(MouseEvent.CLICK, this._onSelectMode);			*/						// alignment			modeItems.x = Math.round(modeState.x + modeState.width + 5);			//modeLayer.x = Math.round(modeItems.x + modeItems.width + 5);		}				private function _initViewButtons():void		{			// configure view buttons			viewDialogue.value = EditorModes.VIEW_DIALOGUE;			viewDialogue.addEventListener(MouseEvent.CLICK, this._onSelectView);			viewScript.value = EditorModes.VIEW_SCRIPT;			viewScript.addEventListener(MouseEvent.CLICK, this._onSelectView);		}				protected override function launch():void		{			// set starting display			_setMode(controller.mode);			_setView(EditorModes.VIEW_DIALOGUE);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------			public function get message():String		{			return messageText.text;		}				public function set message(val:String):void		{			if (val != "" && !this.contains(messageText))			{				// show message				addChild(messageText);			}			else if (val == "" && this.contains(messageText))			{				// hide message				removeChild(messageText);			}			// set message			messageText.text = val;		}				public function populate():void		{			var enable:Boolean = false;						if (RoomController.selectedLayer != null && RoomController.selectedLayer.allowInteractions)			{				message = "";				//controller.mode = _mode;				controller.populate();				enable = true;			}			else			{				message = "The selected layer is not a puppet layer.";			}						// show / hide UI controls			controller.visible = enable;			viewDialogue.visible = enable;			viewScript.visible = enable;			_dialogue.visible = enable;			_script.visible = enable;		}				public override function close():void		{			parent.removeChild(this);		}			// --------------------------------------------------	//  Window mechanics	// --------------------------------------------------				protected override function resizeContent(w:int, h:int):void		{						_dialogue.width = (w - _dialogue.x - 10);			_dialogue.height = (h - _dialogue.y - 10);			_script.width = (w - _script.x - 10);			_script.height = (h - _script.y - 10);			super.resizeContent(w, h);		}				private function _setMode(mode:String):void		{			if (mode != controller.mode)			{				controller.mode = mode;				modeState.selected = modeItems.selected = false; //modeLayer.selected =								switch(mode)				{					case EditorModes.MODE_STATE: modeState.selected = true; break;					case EditorModes.MODE_ITEMS: modeItems.selected = true; break;					//case EditorModes.MODE_LAYER: modeLayer.selected = true; break;				}				populate();			}		}				private function _setView(view:String):void		{			if (view != _view)			{				// configure view nav buttons.				_view = view;				viewDialogue.selected = viewScript.selected = false;								// clear existing editor panel				if (_activeEditor != null)				{					removeChild(_activeEditor);					_activeEditor = null;				}								switch(view)				{					case EditorModes.VIEW_DIALOGUE: 						_activeEditor = _dialogue;						viewDialogue.selected = true;						break;											case EditorModes.VIEW_SCRIPT:						_activeEditor = _script;						viewScript.selected = true;						break;				}								// add new editor to display.				if (_activeEditor != null)				{					addChild(_activeEditor);					//_activeEditor.populate();				}			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function _onSelectLayer(evt:Event):void		{			populate();		}				private function _onSelectMode(evt:Event):void		{			var bttn:LabeledToggleButton = LabeledToggleButton(evt.currentTarget);			_setMode(bttn.value);		}				private function _onSelectView(evt:Event):void		{			var bttn:SimpleNavButton = SimpleNavButton(evt.currentTarget);			_setView(bttn.value);		}	}}
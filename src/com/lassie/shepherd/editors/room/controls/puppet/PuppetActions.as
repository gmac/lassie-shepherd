package com.lassie.shepherd.editors.room.controls.puppet{	import com.lassie.shepherd.editors.actions.*;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.data.game.GameData;	import com.lassie.shepherd.display.TextRestrictions;	import com.lassie.shepherd.events.UIEvent;	import fl.controls.TextInput;	import fl.controls.ComboBox;	import flash.events.Event;		public final class PuppetActions extends BaseActionEditor	{				public var mode:String = "";		public var manageActions:AddDeleteClone;		public var textTitle:TextInput;		public var selectItem:ComboBox;				private var _enabled:Boolean = false;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function PuppetActions():void		{			super();						mode = EditorModes.MODE_STATE;						// set interaction controls			manageActions.addEventListener(UIEvent.ADD, this.handleAddInteraction);			manageActions.addEventListener(UIEvent.COPY, this.handleCopyInteraction);			manageActions.addEventListener(UIEvent.DELETE, this.handleDeleteInteraction);						// set title input controls			textTitle.restrict = TextRestrictions.CAPTION+"#";			textTitle.addEventListener(Event.CHANGE, this.captureTitle);			selectItem.addEventListener(Event.CHANGE, this.captureItemTitle);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				//private var _state:Array = new Array();		//private var _items:Array = new Array();		//private var _layer:Array = new Array();				public override function get data():Array		{			switch (mode)			{				case EditorModes.MODE_STATE: return RoomController.selectedLayer.actions; break;				case EditorModes.MODE_ITEMS: return RoomController.selectedLayer.items; break;				//case EditorModes.MODE_LAYER: return RoomController.selectedLayer.layerActions; break;			}			return null;		}				public function get enabled():Boolean		{			return _enabled;		}				public function set enabled(val:Boolean):void		{			_enabled = val;			textTitle.enabled = val;			selectItem.enabled = val;			interactionSelect.enabled = val;						if (!val)			{				interactionSelect.removeAll();				selectItem.removeAll();				textTitle.text = "";			}		}				public function get dialogue():BaseDialogueEditor		{			return dialogueEditor;		}				public function set dialogue(editor:BaseDialogueEditor):void		{			dialogueEditor = editor;		}				public function get script():BaseScriptEditor		{			return commandEditor;		}				public function set script(editor:BaseScriptEditor):void		{			commandEditor = editor;		}				public override function populate():void		{			super.populate();						// configure title field display.			//textTitle.visible = (mode != EditorModes.MODE_ITEMS);			selectItem.visible = (mode == EditorModes.MODE_ITEMS);			textTitle.y = selectItem.y + (mode == EditorModes.MODE_ITEMS ? 25 : 0);						if (data.length < 1)			{				// No selected records. Disable fields.								manageActions.cloneButton.enabled = false;				manageActions.deleteButton.enabled = false;				enabled = false;			}			else			{				// Populate selected fields								textTitle.text = actionData.title;				manageActions.cloneButton.enabled = true;				manageActions.deleteButton.enabled = true;				enabled = true;								if (mode == EditorModes.MODE_ITEMS) {					_popInventoryItems(actionData.title);					textTitle.text = actionData.context;				}			}		}				private function _popInventoryItems(sel:String):void		{			var items:Array = GameData.instance.itemList;			var index:int = items.length-1;			selectItem.removeAll();						for (var j:int = 0; j < items.length; j++)			{				selectItem.addItem({label:items[j], data:items[j]});				if (sel == items[j]) index = j;			}			selectItem.selectedItem = index;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function captureTitle(evt:Event):void		{			if (mode == EditorModes.MODE_ITEMS) actionData.context = textTitle.text;			else actionData.title = textTitle.text;			popInteractionsList();		}				private function captureItemTitle(evt:Event):void		{			actionData.title = selectItem.selectedLabel;			popInteractionsList();		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleAddInteraction(evt:UIEvent):void		{			addInteraction("NewAction");		}				private function handleCopyInteraction(evt:UIEvent):void		{			copyInteraction(interactionSelect.selectedIndex);		}				private function handleDeleteInteraction(evt:UIEvent):void		{			removeInteraction(interactionSelect.selectedIndex);		}	}}
package com.lassie.shepherd.editors.room.controls.room{	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.ui.UIComponents;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.services.lib.LibClassContent;	import flash.events.Event;	import fl.controls.TextInput;	import fl.controls.Button;		public final class PropertyControls extends Panel	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------				public var headerBar:PanelHeader;		public var textMusic:TextInput;		public var setMusic:Button;		public var textSound:TextInput;		public var setSound:Button;		public var musicHelp:HelpLabel;		public var soundHelp:HelpLabel;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function PropertyControls():void		{			super();						headerBar.title = "Room Properties";			UIComponents.initButton(setMusic, this._onSetMusic);			textMusic.enabled = false;						UIComponents.initButton(setSound, this._onSetSound);			textSound.enabled = false;		}		protected override function launch():void {			musicHelp.key = "room_music";			soundHelp.key = "room_sound";		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------				public override function populate():void		{			// populate walkarea ID			textMusic.text = lsRoomData.music;			textSound.text = lsRoomData.sound;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function _onSetMusic(evt:Event):void {			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onMusicClose);			lsServices.addEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onMusicSelect);			lsServices.browseLibs(textMusic.text, LibClassContent.SOUND_CONTENT);		}				private function _onSetSound(evt:Event):void {			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this._onSoundClose);			lsServices.addEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSoundSelect);			lsServices.browseLibs(textSound.text, LibClassContent.SOUND_CONTENT);		}				// music browse handlers		private function _onMusicSelect(evt:ServiceEvent):void {			lsRoomData.music = evt.libraryAsset;			textMusic.text = evt.libraryAsset;		}		private function _onMusicClose(evt:Event):void {			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onMusicClose);			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onMusicSelect);		}				// sound browse handlers		private function _onSoundSelect(evt:ServiceEvent):void {			lsRoomData.sound = evt.libraryAsset;			textSound.text = evt.libraryAsset;		}		private function _onSoundClose(evt:Event):void {			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this._onSoundClose);			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this._onSoundSelect);		}	}}
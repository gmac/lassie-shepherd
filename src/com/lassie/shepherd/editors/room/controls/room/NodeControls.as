package com.lassie.shepherd.editors.room.controls.room{	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.display.TextRestrictions;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.data.room.NodeData;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import flash.events.Event;	import fl.events.ColorPickerEvent;	import fl.controls.TextInput;	import fl.controls.CheckBox;	import fl.controls.ColorPicker;	import fl.controls.NumericStepper;	import fl.controls.Slider;			public final class NodeControls extends Panel	{		private const PADDING_X:int = 10;		private const PADDING_Y:int = 10;				public var textRefId:TextInput;		public var lockRefId:ToggleButton;		public var colorPicker:ColorPicker;		public var colorRatio:Slider;		public var numScale:NumericStepper;		public var numSpeed:NumericStepper;		public var numBlur:NumericStepper;		public var numTurn:NumericStepper;		public var textScript:TextInput;		public var checkScaleEnabled:CheckBox;		public var checkSpeedEnabled:CheckBox;		public var checkBlurEnabled:CheckBox;		public var checkColorEnabled:CheckBox;		public var checkTrap:CheckBox;				public var idHelp:HelpLabel;		public var turnHelp:HelpLabel;		public var scaleHelp:HelpLabel;		public var speedHelp:HelpLabel;		public var blurHelp:HelpLabel;		public var colorHelp:HelpLabel;		public var scriptHelp:HelpLabel;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function NodeControls():void		{			super();			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_NODE_SELECTION, this.handleSelectNode);		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------			protected override function launch():void		{			textRefId.tabIndex = 1;			textRefId.restrict = TextRestrictions.ID;			textRefId.addEventListener(Event.CHANGE, this.captureId);			lockRefId.addEventListener(Event.CHANGE, this.captureLockId);			colorPicker.addEventListener(ColorPickerEvent.CHANGE, this.onSetColor);			colorRatio.addEventListener(Event.CHANGE, this.onSetColorRatio);			numScale.addEventListener(Event.CHANGE, this.onSetScale);			numSpeed.addEventListener(Event.CHANGE, this.onSetSpeed);			numBlur.addEventListener(Event.CHANGE, this.onSetBlur);			numTurn.addEventListener(Event.CHANGE, this.onSetTurn);			textScript.addEventListener(Event.CHANGE, this.onSetScript);			checkScaleEnabled.addEventListener(Event.CHANGE, this.onSetScaleEnabled);			checkSpeedEnabled.addEventListener(Event.CHANGE, this.onSetSpeedEnabled);			checkBlurEnabled.addEventListener(Event.CHANGE, this.onSetBlurEnabled);			checkColorEnabled.addEventListener(Event.CHANGE, this.onSetColorEnabled);			checkTrap.addEventListener(Event.CHANGE, this.onSetTrapping);						idHelp.key = "grid_node_id";			turnHelp.key = "grid_node_turn";			scaleHelp.key = "grid_node_scale";			speedHelp.key = "grid_node_speed";			blurHelp.key = "grid_node_blur";			colorHelp.key = "grid_node_color";			scriptHelp.key = "grid_node_script";		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				public override function populate():void		{			var enable:Boolean = false;						if (RoomController.selectedNode != null)			{				var node:NodeData = RoomController.selectedNode;				textRefId.text = node.name;				textRefId.enabled = !node.lockName;				lockRefId.selected = node.lockName;				colorPicker.selectedColor = node.color;				colorRatio.value = node.colorRatio;				numScale.value = Math.round(node.scale * 100);				numSpeed.value = Math.round(node.speed * 100);				numBlur.value = node.blur;				numTurn.value = node.turn;				textScript.text = unescape(node.commands);				checkTrap.selected = node.trap;				checkScaleEnabled.selected = node.scaleEnabled;				checkSpeedEnabled.selected = node.speedEnabled;				checkBlurEnabled.selected = node.blurEnabled;				checkColorEnabled.selected = node.colorEnabled;				enable = true;			}			else			{				textRefId.enabled = false;				textRefId.text = "[no node selected]";				lockRefId.selected = false;				colorPicker.selectedColor = 0x000000;				colorRatio.value = 0;				numScale.value = 100;				numSpeed.value = 100;				numBlur.value = 0;				numTurn.value = 4;				textScript.text = "";				checkTrap.selected = false;				checkScaleEnabled.selected = false;				checkSpeedEnabled.selected = false;				checkBlurEnabled.selected = false;				checkColorEnabled.selected = false;				enable = false;			}						// hide color picker because component's "enabled" property acts retarded						lockRefId.enabled = enable;			numTurn.enabled = checkTrap.enabled = enable;			numScale.enabled = checkScaleEnabled.selected;			numSpeed.enabled = checkSpeedEnabled.selected;			numBlur.enabled = checkBlurEnabled.selected;			colorPicker.visible = checkColorEnabled.selected;			colorRatio.enabled = checkColorEnabled.selected;			checkScaleEnabled.enabled = checkSpeedEnabled.enabled = enable;			checkBlurEnabled.enabled = checkColorEnabled.enabled = enable;			textScript.enabled = enable;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleSelectNode(evt:RoomEditorEvent):void {			populate();		}				private function onSetTurn(evt:Event):void {			RoomController.selectedNode.turn = numTurn.value;		}		private function onSetColorRatio(evt:Event):void {			RoomController.selectedNode.colorRatio = colorRatio.value;		}				private function onSetScale(evt:Event):void {			RoomController.selectedNode.scale = numScale.value / 100;		}				private function onSetSpeed(evt:Event):void {			RoomController.selectedNode.speed = numSpeed.value / 100;		}				private function onSetBlur(evt:Event):void {			RoomController.selectedNode.blur = numBlur.value;		}				private function onSetColor(evt:ColorPickerEvent):void {			RoomController.selectedNode.color = evt.color;		}				private function onSetScript(evt:Event):void {			RoomController.selectedNode.commands = escape(textScript.text);		}				private function onSetScaleEnabled(evt:Event):void {			RoomController.selectedNode.scaleEnabled = checkScaleEnabled.selected;			numScale.enabled = checkScaleEnabled.selected;		}				private function onSetSpeedEnabled(evt:Event):void {			RoomController.selectedNode.speedEnabled = checkSpeedEnabled.selected;			numSpeed.enabled = checkSpeedEnabled.selected;		}				private function onSetBlurEnabled(evt:Event):void {			RoomController.selectedNode.blurEnabled = checkBlurEnabled.selected;			numBlur.enabled = checkBlurEnabled.selected;		}				private function onSetColorEnabled(evt:Event):void {			RoomController.selectedNode.colorEnabled = checkColorEnabled.selected;			colorPicker.visible = checkColorEnabled.selected;			colorRatio.enabled = checkColorEnabled.selected;		}				private function onSetTrapping(evt:Event):void {			RoomController.selectedNode.trap = checkTrap.selected;			RoomController.nodes.updateSelection();		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------			private function captureId(evt:Event):void {			RoomController.selectedNode.name = textRefId.text;		}				private function captureLockId(evt:Event):void {			RoomController.selectedNode.lockName = lockRefId.selected;			populate();		}	}}
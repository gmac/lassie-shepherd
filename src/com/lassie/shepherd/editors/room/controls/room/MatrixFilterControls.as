package com.lassie.shepherd.editors.room.controls.room{	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.ui.buttons.ActionButtonIcons;	import com.lassie.shepherd.ui.buttons.LabeledActionButton;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.data.room.*;	import com.lassie.shepherd.editors.room.display.AlertMessages;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.UIComponents;	import com.lassie.shepherd.events.UIEvent;	import com.lassie.shepherd.display.TextRestrictions;	import flash.events.*;	import fl.controls.TextInput;	import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.controls.NumericStepper;	import fl.controls.ColorPicker;	import fl.controls.Slider;		public final class MatrixFilterControls extends Panel	{		private const FILTER_CONTROLS_Y:int = 164;			// --------------------------------------------------	//  Stage instances	// --------------------------------------------------				public var headerBar:PanelHeader;		public var filterActions:AddDeleteClone;		public var selectFilter:ComboBox;		public var textFilterId:TextInput;		public var lockFilterId:ToggleButton;		public var selectFilterAxis:ComboBox;		public var checkFilterEnabled:CheckBox;		public var lockFilter:ToggleButton;		public var showFilter:ToggleButton;		public var numScale0:NumericStepper;		public var numScale1:NumericStepper;		public var numSpeed0:NumericStepper;		public var numSpeed1:NumericStepper;		public var numBlur0:NumericStepper;		public var numBlur1:NumericStepper;		public var color0:ColorPicker;		public var color1:ColorPicker;		public var colorTint0:Slider;		public var colorTint1:Slider;				public var selectHelp:HelpLabel;		public var idHelp:HelpLabel;		public var axisHelp:HelpLabel;			// --------------------------------------------------	//  Private members	// --------------------------------------------------				private var _lockFilters:Boolean = false;		private var _showFilters:Boolean = true;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function MatrixFilterControls():void		{			super();			headerBar.title = "Matrix Filters";		}			// --------------------------------------------------	//  Launch	// --------------------------------------------------				protected override function launch():void		{			var tab:int = 1;			selectFilter.addEventListener(Event.CHANGE, this.handleSelectFilter);			textFilterId.tabIndex = tab++;			textFilterId.restrict = TextRestrictions.ID;			textFilterId.addEventListener(Event.CHANGE, this.captureFilterId);			textFilterId.addEventListener(FocusEvent.FOCUS_OUT, this.handleUpdateFilters);						lockFilterId.addEventListener(Event.CHANGE, this.captureFilterIdLock);			selectFilterAxis.addEventListener(Event.CHANGE, this.captureFilterAxis);			checkFilterEnabled.addEventListener(Event.CHANGE, this.captureFilterEnabled);						filterActions.addEventListener(UIEvent.ADD, this.handleAddFilter);			filterActions.addEventListener(UIEvent.DELETE, this.handleDeleteFilter);			filterActions.addEventListener(UIEvent.COPY, this.handleCloneFilter);						lockFilter.addEventListener(MouseEvent.CLICK, this._onToggleFilterLock);			showFilter.addEventListener(MouseEvent.CLICK, this._onToggleFilterVisible);			lockFilter.icon = ToggleButton.ICON_LOCK;			showFilter.icon = ToggleButton.ICON_VISIBLE;						numScale0.addEventListener(Event.CHANGE, this._onCaptureScale0);			numScale1.addEventListener(Event.CHANGE, this._onCaptureScale1);			numSpeed0.addEventListener(Event.CHANGE, this._onCaptureSpeed0);			numSpeed1.addEventListener(Event.CHANGE, this._onCaptureSpeed1);			numBlur0.addEventListener(Event.CHANGE, this._onCaptureBlur0);			numBlur1.addEventListener(Event.CHANGE, this._onCaptureBlur1);			UIComponents.initColorPicker(color0, this._onCaptureColor0);			UIComponents.initColorPicker(color1, this._onCaptureColor1);			UIComponents.initSlider(colorTint0, this._onCaptureTint0);			UIComponents.initSlider(colorTint1, this._onCaptureTint1);						selectHelp.key = "filter_select";			idHelp.key = "filter_id";			axisHelp.key = "filter_axis";		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------				public override function populate():void		{			// populate filter ID			textFilterId.text = RoomController.filterData.filterId;						// populate walkarea ID lock			lockFilterId.selected = RoomController.filterData.lockFilterId;			textFilterId.enabled = !lockFilterId.selected;						// update list of filters			populateFiltersList();						// get and set index of filter axis			selectFilterAxis.selectedIndex = FilterAxis.LIST.indexOf(RoomController.filterData.filterAxis);						// set enable checkbox			checkFilterEnabled.selected = RoomController.filterData.filterEnabled;						numScale0.value = Math.round(RoomController.filterData.scale0 * 100);			numScale1.value = Math.round(RoomController.filterData.scale1 * 100);			numSpeed0.value = Math.round(RoomController.filterData.speed0 * 100);			numSpeed1.value = Math.round(RoomController.filterData.speed1 * 100);			numBlur0.value = RoomController.filterData.blur0;			numBlur1.value = RoomController.filterData.blur1;			color0.selectedColor = RoomController.filterData.color0;			color1.selectedColor = RoomController.filterData.color1;			colorTint0.value = RoomController.filterData.tint0;			colorTint1.value = RoomController.filterData.tint1;						// lock / show			lockFilter.selected = _lockFilters;			showFilter.selected = _showFilters;			RoomController.filters.setLock(_lockFilters);			RoomController.filters.setVisible(_showFilters);		}				private function populateFiltersList():void		{			// get list of filters			var filterList:Array = RoomController.filterData.filterList;			// clear all items from the walkarea selector			selectFilter.removeAll();						// loop through walkarea list and add menu items			for (var j:int = 0; j < filterList.length; j++)			{				selectFilter.addItem({label:filterList[j], data:""});			}						// select active walkarea			selectFilter.selectedIndex = RoomController.filterData.activeFilter;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function captureFilterId(evt:Event):void		{			RoomController.filterData.filterId = textFilterId.text;			//populateFiltersList();		}				private function captureFilterIdLock(evt:Event):void		{			RoomController.filterData.lockFilterId = lockFilterId.selected;			textFilterId.enabled = !RoomController.filterData.lockFilterId;			populateFiltersList();		}				private function captureFilterAxis(evt:Event):void		{			RoomController.filterData.filterAxis = selectFilterAxis.value;		}				private function captureFilterEnabled(evt:Event):void		{			RoomController.filterData.filterEnabled = checkFilterEnabled.selected;		}				private function _onCaptureScale0(evt:Event):void {			RoomController.filterData.scale0 = numScale0.value / 100;		}		private function _onCaptureScale1(evt:Event):void {			RoomController.filterData.scale1 = numScale1.value / 100;		}				private function _onCaptureSpeed0(evt:Event):void {			RoomController.filterData.speed0 = numSpeed0.value / 100;		}		private function _onCaptureSpeed1(evt:Event):void {			RoomController.filterData.speed1 = numSpeed1.value / 100;		}				private function _onCaptureBlur0(evt:Event):void {			RoomController.filterData.blur0 = numBlur0.value;		}		private function _onCaptureBlur1(evt:Event):void {			RoomController.filterData.blur1 = numBlur1.value;		}				private function _onCaptureTint0(evt:Event):void {			RoomController.filterData.tint0 = colorTint0.value;		}		private function _onCaptureTint1(evt:Event):void {			RoomController.filterData.tint1 = colorTint1.value;		}				private function _onCaptureColor0(evt:Event):void {			RoomController.filterData.color0 = color0.selectedColor;		}		private function _onCaptureColor1(evt:Event):void {			RoomController.filterData.color1 = color1.selectedColor;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------		private function handleAddFilter(evt:Event):void		{			RoomController.filterData.addFilter();			populate();		}				private function handleCloneFilter(evt:Event):void		{			RoomController.filterData.cloneFilter();			populate();		}				private function handleDeleteFilter(evt:Event):void		{			var allow:Boolean = RoomController.filterData.removeFilter();						// if removal was not allowed			if (!allow)			{				lsServices.alert(AlertMessages.CANNOT_DELETE_ONLY_FILTER);			}			else			{				populate();			}		}				private function handleSelectFilter(evt:Event):void		{			RoomController.filterData.activeFilter = selectFilter.selectedIndex;			_showFilters = true;			populate();		}				private function handleUpdateFilters(evt:Event):void		{			populateFiltersList();		}				private function _onToggleFilterLock(evt:Event):void		{			_lockFilters = lockFilter.selected;			RoomController.filters.setLock(_lockFilters);		}				private function _onToggleFilterVisible(evt:Event):void		{			_showFilters = showFilter.selected;			RoomController.filters.setVisible(_showFilters);		}	}}
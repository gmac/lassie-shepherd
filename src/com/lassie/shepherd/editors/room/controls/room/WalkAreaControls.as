package com.lassie.shepherd.editors.room.controls.room{	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.data.WalkDataService;	import com.lassie.shepherd.ui.buttons.*;	import com.lassie.shepherd.ui.*;	import com.lassie.shepherd.events.UIEvent;	import com.lassie.shepherd.display.TextRestrictions;	import com.lassie.shepherd.editors.room.display.AlertMessages;	import flash.events.*;	import flash.ui.Keyboard;	import fl.controls.TextInput;	import fl.controls.ComboBox;	import fl.controls.CheckBox;		public final class WalkAreaControls extends Panel	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------				public var headerBar:PanelHeader;		public var walkActions:AddDeleteClone;		public var selectWalkarea:ComboBox;		public var textWalkId:TextInput;		public var lockWalkId:ToggleButton;		public var bttnAddNode:LabeledActionButton;		public var bttnRemoveNode:LabeledActionButton;		public var bttnJoin:LabeledActionButton;		public var bttnBreak:LabeledActionButton;		public var bttnAddBox:LabeledActionButton;		public var bttnRemoveBox:LabeledActionButton;		public var showGrid:ToggleButton;		public var lockGrid:ToggleButton;		public var checkActive:CheckBox;		public var selectHelp:HelpLabel;		public var idHelp:HelpLabel;		public var boxesHelp:HelpLabel;		public var nodesHelp:HelpLabel;		public var beamsHelp:HelpLabel;				private var _showGrid:Boolean = true;		private var _lockGrid:Boolean = false;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function WalkAreaControls():void		{			super();						headerBar.title = "Walkable Areas";			var tab:int = 1;						bttnAddNode.icon = ActionButtonIcons.ADD;			bttnAddNode.label = "Add";			bttnAddNode.addEventListener(MouseEvent.CLICK, this.handleAddNode);						bttnRemoveNode.icon = ActionButtonIcons.DELETE;			bttnRemoveNode.label = "Remove";			bttnRemoveNode.addEventListener(MouseEvent.CLICK, this.handleRemoveNode);						bttnJoin.icon = ActionButtonIcons.JOIN;			bttnJoin.label = "Join";			bttnJoin.addEventListener(MouseEvent.CLICK, this.handleJoinNodes);						bttnBreak.icon = ActionButtonIcons.BREAK;			bttnBreak.label = "Break";			bttnBreak.addEventListener(MouseEvent.CLICK, this.handleBreakNodes);						bttnAddBox.icon = ActionButtonIcons.ADD;			bttnAddBox.label = "Add";			bttnAddBox.addEventListener(MouseEvent.CLICK, this.handleAddBox);						bttnRemoveBox.icon = ActionButtonIcons.DELETE;			bttnRemoveBox.label = "Remove";			bttnRemoveBox.addEventListener(MouseEvent.CLICK, this.handleRemoveBox);						walkActions.addEventListener(UIEvent.ADD, this.handleAddWalkarea);			walkActions.addEventListener(UIEvent.DELETE, this.handleDeleteWalkarea);			walkActions.addEventListener(UIEvent.COPY, this.handleCloneWalkarea);						selectWalkarea.addEventListener(Event.CHANGE, this.handleSelectWalkarea);			lockWalkId.addEventListener(Event.CHANGE, this.captureWalkIdLock);						showGrid.addEventListener(Event.CHANGE, this.captureShowGrid);			lockGrid.addEventListener(Event.CHANGE, this.captureLockGrid);			showGrid.icon = ToggleButton.ICON_VISIBLE;			lockGrid.icon = ToggleButton.ICON_LOCK;						textWalkId.tabIndex = tab++			textWalkId.restrict = TextRestrictions.ID;			textWalkId.addEventListener(Event.CHANGE, this.captureWalkId);			textWalkId.addEventListener(FocusEvent.FOCUS_OUT, this.handleUpdateWalkareas);			checkActive.addEventListener(Event.CHANGE, this.captureActive);		}		protected override function launch():void		{			selectHelp.key = "grid_select";			idHelp.key = "grid_id";			boxesHelp.key = "grid_boxes";			nodesHelp.key = "grid_nodes";			beamsHelp.key = "grid_beams";		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------				public override function populate():void		{			// populate walkarea ID			textWalkId.text = RoomController.walkareaData.walkareaId;						// populate walkarea ID lock			lockWalkId.selected = RoomController.walkareaData.lockWalkareaId;			textWalkId.enabled = !lockWalkId.selected;			checkActive.selected = RoomController.walkareaData.active;						// show/lock nodes (use intermediary visiblity toggle to allow app to control show/hide).			showGrid.selected = _showGrid;			lockGrid.selected = _lockGrid;			RoomController.boxes.setVisible(_showGrid);			RoomController.nodes.setVisible(_showGrid);			RoomController.boxes.setLock(_lockGrid);			RoomController.nodes.setLock(_lockGrid);						// get list of walkareas			var gridList:Array = RoomController.walkareaData.walkareaList;			// clear all items from the walkarea selector			selectWalkarea.removeAll();						// loop through walkarea list and add menu items			for (var j:int = 0; j < gridList.length; j++)			{				selectWalkarea.addItem({label:gridList[j], data:""});			}						// select active walkarea			selectWalkarea.selectedIndex = RoomController.walkareaData.activeWalkarea;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function captureWalkId(evt:Event):void		{			RoomController.walkareaData.walkareaId = textWalkId.text;		}				private function captureWalkIdLock(evt:Event):void		{			RoomController.walkareaData.lockWalkareaId = lockWalkId.selected;			textWalkId.enabled = !lockWalkId.selected;		}				private function captureActive(evt:Event):void		{			RoomController.walkareaData.active = checkActive.selected;		}				private function captureShowGrid(evt:Event):void		{			_showGrid = showGrid.selected;			RoomController.boxes.setVisible(_showGrid);			RoomController.nodes.setVisible(_showGrid);		}				private function captureLockGrid(evt:Event):void		{			_lockGrid = lockGrid.selected;			RoomController.boxes.setLock(_lockGrid);			RoomController.nodes.setLock(_lockGrid);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleUpdateWalkareas(evt:Event):void		{			populate();		}				private function handleAddWalkarea(evt:Event):void		{			RoomController.walkareaData.addWalkarea();			populate();		}				private function handleCloneWalkarea(evt:Event):void		{			RoomController.walkareaData.cloneWalkarea();			populate();		}				private function handleDeleteWalkarea(evt:Event):void		{			var allow:Boolean = RoomController.walkareaData.removeWalkarea();			// if removal was not allowed			if (!allow)			{				lsServices.alert(AlertMessages.CANNOT_DELETE_ONLY_WALKAREA);			}			else			{				populate();			}		}				private function handleSelectWalkarea(evt:Event):void		{			// select walkarea and forcibly reveal all its assets.			RoomController.walkareaData.activeWalkarea = selectWalkarea.selectedIndex;			_showGrid = true;			populate();		}				private function handleAddNode(evt:MouseEvent):void		{			RoomController.nodes.addNode();		}				private function handleRemoveNode(evt:MouseEvent):void		{			RoomController.nodes.removeNodes();		}				private function handleJoinNodes(evt:MouseEvent):void		{			RoomController.nodes.joinNodes();		}				private function handleBreakNodes(evt:MouseEvent):void		{			RoomController.nodes.breakNodes();		}				private function handleAddBox(evt:MouseEvent):void		{			RoomController.boxes.addBox();		}				private function handleRemoveBox(evt:MouseEvent):void		{			RoomController.boxes.removeBox();		}	}}
package com.lassie.shepherd.editors.room.controls{	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.display.Sprite;	import fl.controls.Button;	import com.lassie.shepherd.ui.tabs.*;	import com.lassie.shepherd.core.LSSprite;	import com.lassie.shepherd.display.EditorDimensions;	import com.lassie.shepherd.editors.room.interfaces.ILayer;	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.RoomEditorOptions;	import com.lassie.shepherd.editors.room.controls.room.RoomPanel;	import com.lassie.shepherd.editors.room.controls.layering.LayersPanel;	import com.lassie.shepherd.editors.room.controls.object.ObjectPanel;	import com.lassie.shepherd.editors.room.controls.puppet.PuppetWindow;	import com.lassie.shepherd.editors.room.controls.viewport.ViewportWindow;	import com.lassie.shepherd.editors.room.controls.notes.NotesWindow;	import com.lassie.shepherd.events.UIEvent;	import com.lassie.shepherd.ui.scroll.ScrollArea;	import com.lassie.shepherd.ui.WindowHeaderBar;	import com.lassie.shepherd.ui.LabeledToggleButton;		public class RoomControls extends LSSprite	{	// --------------------------------------------------	//  Constants	// --------------------------------------------------		private const TAB_COLLECTION:String = "LayerProperties";		private const TAB_ROOM:String = "Room";		private const TAB_LAYERING:String = "Layering";		private const TAB_PROPERTIES:String = "Properties";			// --------------------------------------------------	//  Stage assets	// --------------------------------------------------				public var tabRoom:Tab;		public var tabLayering:Tab;		public var tabProperties:Tab;		public var viewportToggle:LabeledToggleButton;		public var notesToggle:LabeledToggleButton;		public var inspectorToggle:LabeledToggleButton;		public var editorOptions:RoomEditorOptions;				// display coordinates		private var _topY:int = 0;		private var _padT:int = 10;		private var _padB:int = 5;			// --------------------------------------------------	//  Private members	// --------------------------------------------------				private var _header:WindowHeaderBar;		private var _activePanel:Panel;		private var _layeringPanel:LayersPanel;		private var _propertiesPanel:ObjectPanel;		private var _roomPanel:RoomPanel;		private var _scroll:ScrollArea;				//		private var _puppetWindow:PuppetWindow;		private var _viewportWindow:ViewportWindow;		private var _notesWindow:NotesWindow;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function RoomControls():void		{			super();			x = y = 0;			_topY = tabRoom.y + tabRoom.height;						_roomPanel = new RoomPanel();			_layeringPanel = new LayersPanel();			_propertiesPanel = new ObjectPanel();			_roomPanel.y = _layeringPanel.y = _propertiesPanel.y = _topY + _padT;			_header = new WindowHeaderBar();			addChildAt(_header, 0);			viewportToggle.label = "viewport";			notesToggle.label = "notes";			inspectorToggle.label = "puppet actions";			notesToggle.x = Math.round(viewportToggle.x + viewportToggle.width + 5);			inspectorToggle.x = Math.round(notesToggle.x + notesToggle.width + 5);						_viewportWindow = new ViewportWindow();			_viewportWindow.configure(this, viewportToggle);			//addChild(_viewportWindow);						_notesWindow = new NotesWindow();			_notesWindow.configure(this, notesToggle);			//addChild(_notesWindow);			_puppetWindow = new PuppetWindow();			_puppetWindow.configure(this, inspectorToggle);			//addChild(_puppetWindow);						// Configure tab navigation			tabRoom.collection = tabLayering.collection = tabProperties.collection = TAB_COLLECTION;			tabRoom.option = TAB_ROOM;			tabLayering.option = TAB_LAYERING;			tabProperties.option = TAB_PROPERTIES;			addEventListener(TabEvent.SELECT, this.handleTabSelect);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				protected override function launch():void		{			// configure panel scroll area			var scrollT:Number = _topY + _padT;			var scrollH:Number = stage.stageHeight - scrollT - _padB;			_scroll = new ScrollArea(new Rectangle(0, scrollT, EditorDimensions.ROOM_EDITOR_SIDEBAR-8, scrollH));						// select starting tab			dispatchEvent(new TabEvent(TabEvent.SELECT, TAB_COLLECTION, TAB_LAYERING));			tabLayering.selected = true;		}				protected override function init():void		{			stage.addEventListener(Event.RESIZE, this.handleResize);			addEventListener(UIEvent.REFRESH_SCROLL, this.handleScrollRefresh);						// populate the active panel.			if (!!_activePanel) _activePanel.populate();						// draw controls background and set scrollbar			setDisplay();		}				protected override function uninit():void		{			stage.removeEventListener(Event.RESIZE, this.handleResize);			removeEventListener(UIEvent.REFRESH_SCROLL, this.handleScrollRefresh);		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------				private function setDisplay():void		{			// draw top header			_header.redraw(stage.stageWidth);			editorOptions.align(stage.stageWidth);			var topHeight:int = 50;						// tab background			graphics.clear();			graphics.beginFill(0x666666, 1);			graphics.drawRect(0, 0, EditorDimensions.ROOM_EDITOR_SIDEBAR, topHeight);						// main panel background			graphics.beginFill(0xCEE7FF, 1);			graphics.drawRect(0, topHeight, EditorDimensions.ROOM_EDITOR_SIDEBAR, stage.stageHeight-topHeight);			graphics.endFill();			// horizontal edge rule			graphics.lineStyle(1, 0x2E579B, 1);			graphics.moveTo(0, topHeight);			graphics.lineTo(EditorDimensions.ROOM_EDITOR_SIDEBAR, topHeight);						// vertical edge rule			graphics.lineStyle(1, 0x333333, 1);			graphics.moveTo(EditorDimensions.ROOM_EDITOR_SIDEBAR, 0);			graphics.lineTo(EditorDimensions.ROOM_EDITOR_SIDEBAR, stage.stageHeight);			// update panel scrolling			setScroll();		}				private function setScroll():void		{			// set scroll bar properties			var scrollH:Number = stage.stageHeight - _topY - _padT - _padB;						// set object scrolling			_scroll.setScrollHeight(scrollH);		}				private function setPanel(id:String):void		{			// clear existing active panel			if (_activePanel != null)			{				removeChild(_activePanel);				_activePanel = null;			}						// Set interface mode and reference new active panel			switch (id)			{				case TAB_ROOM: _activePanel = _roomPanel; break;				case TAB_LAYERING: _activePanel = _layeringPanel; break;				case TAB_PROPERTIES: _activePanel = _propertiesPanel; break;			}						if (_activePanel != null)			{				_activePanel.populate();				addChildAt(_activePanel, 0);				_scroll.setScrollTarget(_activePanel);			}		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------			private function handleResize(evt:Event):void		{			setDisplay();		}				private function handleTabSelect(evt:TabEvent):void		{			setPanel(evt.option);		}				private function handleScrollRefresh(evt:Event):void		{			evt.stopPropagation();			setScroll();		}	}}
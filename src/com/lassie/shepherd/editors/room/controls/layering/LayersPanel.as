package com.lassie.shepherd.editors.room.controls.layering{	import com.lassie.shepherd.data.room.LayerTypes;	import com.lassie.shepherd.editors.room.interfaces.ILayer;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import com.lassie.shepherd.events.UIEvent;	import flash.text.TextField;	import flash.geom.Rectangle;	import fl.controls.ComboBox;		public final class LayersPanel extends Panel	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------			public var panelTitle:PanelHeader;		public var layerActions:AddDeleteClone;		public var layerTypes:ComboBox;			// --------------------------------------------------	//  Private members	// --------------------------------------------------				private const TITLE:String = "Layering";		private const TOP_Y:Number = 80;		private const LEFT_X:Number = 9;		private var _list:LayersList;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function LayersPanel():void		{			super();						_list = new LayersList();			_list.x = LEFT_X;			_list.y = TOP_Y;			_list.addEventListener(LayersListEvent.SELECT, this.handleSelectListItem);			_list.addEventListener(LayersListEvent.SHIFT_INDEX, this.handleShiftListItem);			addChild(_list);		}			// --------------------------------------------------	//  Initializers	// --------------------------------------------------		protected override function init():void		{			// listen for changes in interface configuration			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYERS_LIST, this.handleUpdateList);			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYER_SELECTION, this.handleSelectLayer);						// add listeners for action options			layerActions.addEventListener(UIEvent.ADD, this.handleAdd);			layerActions.addEventListener(UIEvent.DELETE, this.handleDelete);			layerActions.addEventListener(UIEvent.COPY, this.handleClone);						// populate panel display			populate();		}				protected override function uninit():void		{			// stop listening for changes in interface configuration			RoomController.instance.removeEventListener(RoomEditorEvent.UPDATE_LAYERS_LIST, this.handleUpdateList);			RoomController.instance.removeEventListener(RoomEditorEvent.UPDATE_LAYER_SELECTION, this.handleSelectLayer);						// remove listeners for action options			layerActions.removeEventListener(UIEvent.ADD, this.handleAdd);			layerActions.removeEventListener(UIEvent.DELETE, this.handleDelete);			layerActions.removeEventListener(UIEvent.COPY, this.handleClone);		}			// --------------------------------------------------	//  Launch display	// --------------------------------------------------			protected override function launch():void		{			panelTitle.title = TITLE;			layerTypes.tabEnabled = false;			layerTypes.removeAll();			layerTypes.addItem({label:"puppet", data:LayerTypes.HOTSPOT});			layerTypes.addItem({label:"plane", data:LayerTypes.PLANE});			layerTypes.addItem({label:"avatar", data:LayerTypes.CHARACTER});		}			// --------------------------------------------------	//  Methods	// --------------------------------------------------		private function addLayer():void		{			RoomController.layers.addLayer(layerTypes.selectedItem.data);		}				private function cloneLayer():void		{			RoomController.layers.cloneLayer();		}				private function deleteLayer():void		{			RoomController.layers.removeLayer();		}		public override function populate():void		{			// extract layers list to display			var layers:Array = RoomController.layersList;						if (layers != null)			{				var listData:Array = new Array();								// collect layers as list data items				for (var j:int = 0; j < layers.length; j++)				{					var layer:ILayer = layers[j];					listData.push(new LayersListData(layer.id, layer.type));				}								// set list data				_list.listData = listData;								try				{					_list.selectedIndex = selectedLayer.depth;				}				catch(e)				{					_list.selectedIndex = 0;				}								// update controls scrolling				dispatchEvent(new UIEvent(UIEvent.REFRESH_SCROLL, true));			}		}			// --------------------------------------------------	//  Event Handlers	// --------------------------------------------------			private function handleAdd(evt:UIEvent):void		{			addLayer();		}				private function handleDelete(evt:UIEvent):void		{			deleteLayer();		}				private function handleClone(evt:UIEvent):void		{			cloneLayer();		}				private function handleUpdateList(evt:RoomEditorEvent):void		{			populate();		}				private function handleSelectLayer(evt:RoomEditorEvent):void		{			_list.selectedIndex = RoomController.selectedLayer.depth;		}				private function handleSelectListItem(evt:LayersListEvent):void		{			RoomController.layers.selectLayerAt(evt.index);		}				private function handleShiftListItem(evt:LayersListEvent):void		{			RoomController.layers.shiftLayerTo(evt.index);		}	}}
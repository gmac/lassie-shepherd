package com.lassie.shepherd.editors.room.controls.viewport{	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.events.Event;	import flash.events.MouseEvent;		public final class Viewport extends Sprite	{		private const RECT_COLOR:uint = 0x90C1EF;				private var _maxW:int;		private var _maxH:int;		private var _areaW:int;		private var _areaH:int;		private var _ratioX:Number;		private var _ratioY:Number;		private var _bounds:Rectangle;		private var _panArea:Sprite;		private var _pan:Sprite;				public function Viewport(maxW:int=120, maxH:int=100):void		{			super();						_maxW = maxW;			_maxH = maxH;						_panArea = new Sprite();			_panArea.addEventListener(MouseEvent.MOUSE_DOWN, this.handleSnapPan);			addChild(_panArea);						_pan = new Sprite();			_pan.addEventListener(MouseEvent.MOUSE_DOWN, this.handleStartPan);			_pan.buttonMode = true;			_pan.useHandCursor = true;			addChild(_pan);		}			// --------------------------------------------------	//  Public methods	// --------------------------------------------------				public function setViewPan(viewW:int, viewH:int, areaW:int, areaH:int, percX:Number=0, percY:Number=0):void		{			_areaW = Math.max(viewW, areaW);			_areaH = Math.max(viewH, areaH);			_ratioX = viewW / _areaW;			_ratioY = viewH / _areaH;						var scale:Number = (_areaW > _areaH) ? (_maxW / _areaW) : (_maxH / _areaH);			_areaW = _areaW * scale;			_areaH = _areaH * scale;			redraw();						_pan.x = _bounds.width * percX;			_pan.y = _bounds.height * percY;		}			// --------------------------------------------------	//  Private methods	// --------------------------------------------------				private function redraw():void		{			_panArea.graphics.clear();			_panArea.graphics.lineStyle(1, RECT_COLOR, 0.5);			_panArea.graphics.beginFill(RECT_COLOR, 0.15);			_panArea.graphics.drawRect(0, 0, _areaW, _areaH);			_panArea.graphics.endFill();						var w:int = _areaW * _ratioX;			var h:int = _areaH * _ratioY;						// pan area box			_pan.graphics.clear();			_pan.graphics.lineStyle(1, RECT_COLOR, 0.5);			_pan.graphics.beginFill(RECT_COLOR, 0.25);			_pan.graphics.drawRect(0, 0, w, h);			_pan.graphics.endFill();						// pan area strike marks			_pan.graphics.lineStyle(1, RECT_COLOR, 0.25);			_pan.graphics.moveTo(0, 0);			_pan.graphics.lineTo(w, h);			_pan.graphics.moveTo(w, 0);			_pan.graphics.lineTo(0, h);						_bounds = new Rectangle(0, 0, _areaW-w, _areaH-h);		}				private function updateScroll():void		{			var px:Number = _pan.x/_bounds.width;			var py:Number = _pan.y/_bounds.height;			dispatchEvent(new ViewportEvent(ViewportEvent.PAN_VIEWPORT, (isNaN(px) ? 0 : px), (isNaN(py) ? 0 : py)));		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleStartPan(evt:MouseEvent):void		{			_pan.startDrag(false, _bounds);			stage.addEventListener(MouseEvent.MOUSE_UP, this.handleStopPan);			addEventListener(Event.ENTER_FRAME, this.handlePan);		}				private function handleStopPan(evt:MouseEvent):void		{			_pan.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_UP, this.handleStopPan);			removeEventListener(Event.ENTER_FRAME, this.handlePan);		}				private function handlePan(evt:Event):void		{			updateScroll();		}				private function handleSnapPan(evt:MouseEvent):void		{			_pan.x = int(Math.max(0, Math.min(mouseX-(_pan.width/2), _bounds.width)));			_pan.y = int(Math.max(0, Math.min(mouseY-(_pan.height/2), _bounds.height)));			updateScroll();		}	}}
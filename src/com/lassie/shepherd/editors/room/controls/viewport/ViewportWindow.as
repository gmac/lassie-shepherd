package com.lassie.shepherd.editors.room.controls.viewport{	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import com.lassie.shepherd.editors.room.controls.ui.RoomEditorWindow;	import flash.display.Sprite;		public final class ViewportWindow extends RoomEditorWindow	{		private static const TAB_VIEWPORT:String = "Viewport";			// --------------------------------------------------	//  Constants	// --------------------------------------------------		private const PADDING_X:int = 6;		private const PADDING_Y:int = 6;		private const MAX_WIDTH:int = 150;		private const MAX_HEIGHT:int = 100;			// --------------------------------------------------	//  Private members	// --------------------------------------------------		private var _viewport:Viewport;	// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function ViewportWindow():void		{			super();						closable = true;			dragable = true;			resizable = false;			title = "Viewport";						// add viewport			_viewport = new Viewport(MAX_WIDTH, MAX_HEIGHT);			_viewport.x = PADDING_X;			_viewport.y = Math.round(25 + PADDING_Y);			addChild(_viewport);						// listen for updates to the layout size			RoomController.instance.addEventListener(RoomEditorEvent.CHANGE_LAYOUT_SIZE, this.handleUpdate);		}			// --------------------------------------------------	//  Init / uninit	// --------------------------------------------------				protected override function launch():void		{			//_openedX = RoomController.roomData.viewWinX;			//_openedY = RoomController.roomData.viewWinY;		}				protected override function init():void		{			redraw();			_viewport.addEventListener(ViewportEvent.PAN_VIEWPORT, this.handlePanViewport);			super.init();		}				protected override function uninit():void		{			_viewport.removeEventListener(ViewportEvent.PAN_VIEWPORT, this.handlePanViewport);			super.uninit();		}				/*protected override function logWindowCoords():void		{			RoomController.roomData.viewWinX = x;			RoomController.roomData.viewWinY = y;		}*/			// --------------------------------------------------	//  Methods	// --------------------------------------------------				public override function redraw():void		{			var vw:int = RoomController.viewportWidth;			var vh:int = RoomController.viewportHeight;			var lw:int = RoomController.layoutWidth;			var lh:int = RoomController.layoutHeight;			var px:Number = RoomController.layoutScrollPercentX;			var py:Number = RoomController.layoutScrollPercentY;			_viewport.setViewPan(vw, vh, lw, lh, px, py);						var w:int = _viewport.width + (PADDING_X * 2);			var h:int = Math.round(_viewport.y + _viewport.height + PADDING_Y);			resizeWindow(w, h);		}				public override function close():void		{			parent.removeChild(this);		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handlePanViewport(evt:ViewportEvent):void		{			RoomController.setLayoutScroll(evt.percentX, evt.percentY);		}				private function handleUpdate(evt:RoomEditorEvent):void		{			// redraw if visible on stage			if (parent != null) redraw();		}	}}
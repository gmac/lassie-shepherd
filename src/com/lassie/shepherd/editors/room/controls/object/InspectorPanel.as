package com.lassie.shepherd.editors.room.controls.object{	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.ui.buttons.AddDeleteClone;	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.data.room.LayerHitShapes;	import com.lassie.shepherd.data.room.BlendModes;	import com.lassie.shepherd.data.room.FilterTypes;	import com.lassie.shepherd.display.TextRestrictions;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.UIComponents;	import com.lassie.shepherd.events.UIEvent;	import flash.display.FrameLabel;	import flash.text.TextField;	import flash.events.Event;	import flash.events.FocusEvent;	import fl.controls.ComboBox;	import fl.controls.CheckBox;	import fl.controls.TextInput;	import fl.controls.NumericStepper;	import fl.controls.ColorPicker;	import fl.events.ColorPickerEvent;	internal class InspectorPanel extends Panel	{	// --------------------------------------------------	//  Possible stage instances	// --------------------------------------------------		public var headerBar:PanelHeader;		public var phaseActions:AddDeleteClone;		public var selectPhase:ComboBox;		public var textPhaseId:TextInput;		public var lockPhaseId:ToggleButton;		public var numPhase:NumericStepper;		public var checkDefaultPhase:CheckBox;		public var textVars:TextInput;				public var textTitle:TextInput;		public var textCursor:TextInput;		public var numPosX:NumericStepper;		public var numPosY:NumericStepper;		public var numAlpha:NumericStepper;		public var numRate:NumericStepper;		public var numClick:NumericStepper;		public var numAngle:NumericStepper;		public var numRotate:NumericStepper;		public var checkFloat:CheckBox;		public var checkMouse:CheckBox;		public var checkCache:CheckBox;		public var colorDia:ColorPicker;				public var checkHit:CheckBox;		public var selectShape:ComboBox;		public var numHitX:NumericStepper;		public var numHitY:NumericStepper;		public var numHitW:NumericStepper;		public var numHitH:NumericStepper;				public var checkImage:CheckBox;		public var selectFrame:ComboBox;		public var selectBlend:ComboBox;		public var numImgX:NumericStepper;		public var numImgY:NumericStepper;		public var numImgW:NumericStepper;		public var numImgH:NumericStepper;				public var selectScale:ComboBox;		public var selectColor:ComboBox;		public var selectSpeed:ComboBox;		public var selectFocus:ComboBox;		public var previewScale:ToggleButton;		public var previewColor:ToggleButton;		public var previewFocus:ToggleButton;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function InspectorPanel():void		{			super();		}				protected override function init():void		{			roomInterface.addEventListener(RoomEditorEvent.UPDATE_LAYER_CONTROLS, this.handleUpdateControls);			roomInterface.addEventListener(RoomEditorEvent.UPDATE_POSITION_CONTROLS, this.handlePositionControls);			roomInterface.addEventListener(RoomEditorEvent.UPDATE_HITAREA_CONTROLS, this.handleHitControls);			roomInterface.addEventListener(RoomEditorEvent.UPDATE_IMAGE_CONTROLS, this.handleImageControls);		}				protected override function uninit():void		{			roomInterface.removeEventListener(RoomEditorEvent.UPDATE_LAYER_CONTROLS, this.handleUpdateControls);			roomInterface.removeEventListener(RoomEditorEvent.UPDATE_POSITION_CONTROLS, this.handlePositionControls);			roomInterface.removeEventListener(RoomEditorEvent.UPDATE_HITAREA_CONTROLS, this.handleHitControls);			roomInterface.removeEventListener(RoomEditorEvent.UPDATE_IMAGE_CONTROLS, this.handleImageControls);			//selectPhase.close();			//selectFrame.close();		}			// --------------------------------------------------	//  Initializers	// --------------------------------------------------				protected function launchPhaseControls(tab:int):int		{			UIComponents.initSelector(selectPhase, this.handleSelectPhase);			textPhaseId.tabIndex = tab++;			textPhaseId.restrict = TextRestrictions.ID;			textPhaseId.addEventListener(Event.CHANGE, this.capturePhaseId);			textPhaseId.addEventListener(FocusEvent.FOCUS_OUT, this.handleUpdatePhases);			UIComponents.initToggle(lockPhaseId, this.capturePhaseIdLock);						// repopulate phase selector on focus-out of phase name field			phaseActions.addEventListener(UIEvent.ADD, this.handleAddPhase);			phaseActions.addEventListener(UIEvent.DELETE, this.handleDeletePhase);			phaseActions.addEventListener(UIEvent.COPY, this.handleClonePhase);						return tab;		}				protected function launchHitControls(tab:int):int		{			UIComponents.initCheckBox(checkHit, this.captureEnableHit);						if (selectShape != null)			{				// init hit area shape selector (if present)				selectShape.removeAll();				selectShape.dataProvider.concat(LayerHitShapes.menu);				UIComponents.initSelector(selectShape, this.handleSelectShape);			}						if (numHitX != null)			{				// init hit area size controls (if present)				UIComponents.initNumerator(numHitX, tab++, this.captureHitX);				UIComponents.initNumerator(numHitY, tab++, this.captureHitY);			}						if (numHitW != null)			{				// init hit area position controls (if present)				UIComponents.initNumerator(numHitW, tab++, this.captureHitW);				UIComponents.initNumerator(numHitH, tab++, this.captureHitH);			}						return tab;		}				protected function launchImageControls(tab:int):int		{			if (checkImage != null)			{				UIComponents.initCheckBox(checkImage, this.captureEnableImage);				UIComponents.initSelector(selectFrame, this.handleSelectFrame);			}						if (selectBlend != null)			{				UIComponents.initSelector(selectBlend, this.handleSelectBlend);			}						if (numImgX != null)			{				UIComponents.initNumerator(numImgX, tab++, this.captureImgX);				UIComponents.initNumerator(numImgY, tab++, this.captureImgY);			}						if (numImgW != null)			{				UIComponents.initNumerator(numImgW, tab++, this.captureImgW);				UIComponents.initNumerator(numImgH, tab++, this.captureImgH);			}						if (numAlpha != null)			{				UIComponents.initNumerator(numAlpha, tab++, this.captureAlpha);			}						return tab;		}				protected function launchFilterControls():void		{			UIComponents.initSelector(selectScale, this.handleSelectScale);			UIComponents.initSelector(selectColor, this.handleSelectColor);			UIComponents.initSelector(selectSpeed, this.handleSelectSpeed);			UIComponents.initSelector(selectFocus, this.handleSelectFocus);			previewScale.addEventListener(Event.CHANGE, this.handleSetScalePreview);			previewColor.addEventListener(Event.CHANGE, this.handleSetColorPreview);			previewFocus.addEventListener(Event.CHANGE, this.handleSetFocusPreview);			previewScale.icon = ToggleButton.ICON_VISIBLE;			previewColor.icon = ToggleButton.ICON_VISIBLE;			previewFocus.icon = ToggleButton.ICON_VISIBLE;		}			// --------------------------------------------------	//  Population methods	// --------------------------------------------------				protected function popPhaseControls():void		{			textPhaseId.text = selectedLayer.phase;			lockPhaseId.selected = selectedLayer.lockPhaseId;			textPhaseId.enabled = !selectedLayer.lockPhaseId;			popPhaseSelect();		}				protected function popPhaseSelect():void		{			// get list of phases			var phases:Array = selectedLayer.phaseList;			var $defaultIndex:int = -1;						// remove all items from phase selector			selectPhase.removeAll();						// add each phase name to selector			for (var j:int = 0; j < phases.length; j++)			{				// record index of default phase.				if (selectedLayer.data.defaultPhase == phases[j]) $defaultIndex = j;				selectPhase.addItem({label:phases[j], data:j});			}						// if no default phase was found (missing), set first phase as default.			if ($defaultIndex < 0) {				$defaultIndex = 0;				selectedLayer.data.defaultPhase = phases[0];			}						// note default phase with an asterisk			var $defaultLabel:Object = selectPhase.getItemAt($defaultIndex);			$defaultLabel.label += "*";			selectPhase.replaceItemAt($defaultLabel, $defaultIndex);						// set active phase within selector			selectPhase.selectedIndex = selectedLayer.activePhase;		}				protected function popHitControls(all:Boolean=true):void		{			checkHit.selected = selectedLayer.hit;						if (selectShape != null && all)			{				selectShape.selectedIndex = LayerHitShapes.list.indexOf(selectedLayer.hitShape);			}						if (numHitX != null)			{				numHitX.value = selectedLayer.hitX;				numHitY.value = selectedLayer.hitY;			}						if (numHitW != null)			{				numHitW.value = selectedLayer.hitW;				numHitH.value = selectedLayer.hitH;			}		}				// PUBLIC so that image selector can update with new assets		public function popImageControls(all:Boolean=true):void		{			checkImage.selected = selectedLayer.image;			numAlpha.value = selectedLayer.opacity;						if (all)			{				popFrameSelect();			}						if (selectBlend != null)			{				popBlendSelect();			}						if (numImgX != null)			{				numImgX.value = selectedLayer.imgX;				numImgY.value = selectedLayer.imgY;			}						if (numImgW != null)			{				numImgW.value = selectedLayer.imgW * 100;				numImgH.value = selectedLayer.imgH * 100;			}		}				protected function popFrameSelect():void		{			// get list of frame labels and current label			var list:Array = selectedLayer.imageFrameLabels;			var current:int = selectedLayer.imageFrame;			var select:int = 0;						// remove all selector items			selectFrame.removeAll();			if (current < 0)			{				// add each frame label to the selector				selectFrame.addItem({label:"[no image]", data:1});				selectFrame.enabled = false;			}			else			{				// if there are no frame labels				// or if the first label is not applied to frame-1				if (list.length < 1 || FrameLabel(list[0]).frame != 1)				{					// add universal option for first frame					selectFrame.addItem({label:"frame-1", data:1});				}								// add custom labeled options				for (var j:int=0; j < list.length; j++)				{					// pull frameLabel item retrieved from clip					var item:FrameLabel = FrameLabel(list[j]);										// add each frame label to the selector					selectFrame.addItem({label:item.name, data:item.frame});										// if element matches current label					if (item.frame == current)					{						// mark index for selection						select = j					}				}								// enable content selector				selectFrame.enabled = true;			}						// select target index			selectFrame.selectedIndex = select;		}				protected function popBlendSelect():void		{			// get current image frame			var img:int = selectedLayer.imageFrame;			var select:int = 0;						// remove all selector items			selectBlend.removeAll();			// if image display is not set			if (img < 0)			{				selectBlend.addItem({label:"[no image]", data:1});				selectBlend.enabled = false;			}			else			{				// populate blend mode selector				var modes:Array = BlendModes.list;				for (var j:int = 0; j < modes.length; j++)				{					selectBlend.addItem({label:modes[j], data:modes[j]});										// if element matches current blend mode					if (selectedLayer.blend == modes[j])					{						// mark index for selection						select = j					}				}								// enable content selector				selectBlend.enabled = true;			}						// select target index			selectBlend.selectedIndex = select;		}				protected function popFilterControls():void		{			var none:Object = {label:"[none]", data:""};			var grid:Object = {label:"[grid]", data:"_grid"};			var list:Array = new Array("", "_grid");			var menu:Array = new Array(none, grid);						var dat:Array = RoomController.filterData.data;						// reference data set of each defined filter			for (var j:int = 0; j < dat.length; j++)			{				list.push(dat[j].id);				menu.push({label:dat[j].id, data:dat[j].id});			}						// clear all selectors			selectScale.removeAll();			selectColor.removeAll();			selectSpeed.removeAll();			selectFocus.removeAll();						// push all new data into selectors			selectScale.dataProvider.concat(menu);			selectColor.dataProvider.concat(menu);			selectSpeed.dataProvider.concat(menu);			selectFocus.dataProvider.concat(menu);						// get selected indicies of all filters			var selScale:int = list.indexOf(selectedLayer.scale);			var selColor:int = list.indexOf(selectedLayer.color);			var selSpeed:int = list.indexOf(selectedLayer.speed);			var selFocus:int = list.indexOf(selectedLayer.focus);						// clear selections if filter has been removed			if (selScale < 0)			{				selScale = 0;				selectedLayer.scale = "";			}			if (selColor < 0)			{				selColor = 0;				selectedLayer.color = "";			}			if (selSpeed < 0)			{				selSpeed = 0;				selectedLayer.speed = "";			}			if (selFocus < 0)			{				selFocus = 0;				selectedLayer.focus = "";			}						// set filter selections			selectScale.selectedIndex = selScale;			selectColor.selectedIndex = selColor;			selectSpeed.selectedIndex = selSpeed;			selectFocus.selectedIndex = selFocus;						// set preview toggles			previewScale.selected = selectedLayer.previewScale;			previewColor.selected = selectedLayer.previewColor;			previewFocus.selected = selectedLayer.previewFocus;		}				protected function popPhaseOrder():void		{			numPhase.stepSize = -1;			numPhase.minimum = 0;			numPhase.maximum = selectedLayer.numPhases-1;			numPhase.value = selectedLayer.phaseNum;			checkDefaultPhase.selected = (selectedLayer.phase == selectedLayer.data.defaultPhase);			checkDefaultPhase.enabled = !checkDefaultPhase.selected;		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				// STRINGS		protected function capturePhaseId(evt:Event):void		{			selectedLayer.phase = textPhaseId.text;		}				protected function capturePhaseIdLock(evt:Event):void		{			selectedLayer.lockPhaseId = lockPhaseId.selected;			textPhaseId.enabled = !lockPhaseId.selected;		}				protected function capturePhaseNum(evt:Event):void		{			selectedLayer.phaseNum = numPhase.value;			//numPhase.value = selectedLayer.phaseNum;		}				protected function captureDefaultPhase(evt:Event):void		{			selectedLayer.data.defaultPhase = selectedLayer.phase;			checkDefaultPhase.enabled = !checkDefaultPhase.selected;			popPhaseSelect();		}				protected function captureTitle(evt:Event):void		{			selectedLayer.title = textTitle.text;		}				protected function captureVars(evt:Event):void		{			selectedLayer.activePhaseData.vars = textVars.text;		}				protected function captureCursor(evt:Event):void		{			selectedLayer.cursor = textCursor.text;		}				// NUMBERS				protected function capturePosX(evt:Event):void		{			selectedLayer.x = numPosX.value;		}				protected function capturePosY(evt:Event):void		{			selectedLayer.y = numPosY.value;		}				protected function captureAlpha(evt:Event):void		{			selectedLayer.opacity = numAlpha.value;		}				protected function captureRate(evt:Event):void		{			selectedLayer.rate = numRate.value;		}				protected function captureClick(evt:Event):void		{			selectedLayer.onclick = numClick.value;		}				protected function captureAngle(evt:Event):void		{			selectedLayer.angle = numAngle.value;		}				protected function captureRotate(evt:Event):void		{			selectedLayer.rotate = numRotate.value;		}				// CHECK BOXES				protected function captureFloat(evt:Event):void		{			selectedLayer.float = checkFloat.selected;		}				protected function captureMouse(evt:Event):void		{			selectedLayer.mouse = checkMouse.selected;		}				protected function captureCache(evt:Event):void		{			selectedLayer.cache = checkCache.selected;		}				protected function captureDiaColor(evt:ColorPickerEvent):void		{			selectedLayer.diaColor = colorDia.selectedColor;		}				// HIT CONTROLS				protected function captureEnableHit(evt:Event):void		{			selectedLayer.hit = checkHit.selected;		}				protected function captureHitX(evt:Event):void		{			selectedLayer.hitX = numHitX.value;		}				protected function captureHitY(evt:Event):void		{			selectedLayer.hitY = numHitY.value;		}				protected function captureHitW(evt:Event):void		{			selectedLayer.hitW = numHitW.value;		}				protected function captureHitH(evt:Event):void		{			selectedLayer.hitH = numHitH.value;		}				// IMAGE CONTROLS				protected function captureEnableImage(evt:Event):void		{			selectedLayer.image = checkImage.selected;		}				protected function captureImgX(evt:Event):void		{			selectedLayer.imgX = numImgX.value;		}				protected function captureImgY(evt:Event):void		{			selectedLayer.imgY = numImgY.value;		}				protected function captureImgW(evt:Event):void		{			selectedLayer.imgW = numImgW.value / 100;		}				protected function captureImgH(evt:Event):void		{			selectedLayer.imgH = numImgH.value / 100;		}			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleAddPhase(evt:UIEvent):void		{			selectedLayer.addPhase();		}				private function handleDeletePhase(evt:UIEvent):void		{			selectedLayer.deletePhase();		}				private function handleClonePhase(evt:UIEvent):void		{			selectedLayer.clonePhase();		}				private function handleSelectPhase(evt:Event):void		{			selectedLayer.activePhase = selectPhase.selectedIndex;		}				private function handleSelectShape(evt:Event):void		{			selectedLayer.hitShape = selectShape.selectedItem.data;		}				private function handleSelectFrame(evt:Event):void		{			selectedLayer.frame = selectFrame.selectedItem.data;		}				private function handleSelectBlend(evt:Event):void		{			selectedLayer.blend = selectBlend.selectedItem.data;		}				private function handleUpdatePhases(evt:Event):void		{			popPhaseSelect();		}		private function handleSelectScale(evt:Event):void		{			selectedLayer.scale = selectScale.selectedItem.data;		}				private function handleSelectColor(evt:Event):void		{			selectedLayer.color = selectColor.selectedItem.data;		}				private function handleSelectSpeed(evt:Event):void		{			selectedLayer.speed = selectSpeed.selectedItem.data;		}				private function handleSelectFocus(evt:Event):void		{			selectedLayer.focus = selectFocus.selectedItem.data;		}				private function handleSetScalePreview(evt:Event):void		{			selectedLayer.previewScale = previewScale.selected;		}				private function handleSetColorPreview(evt:Event):void		{			selectedLayer.previewColor = previewColor.selected;		}				private function handleSetFocusPreview(evt:Event):void		{			selectedLayer.previewFocus = previewFocus.selected;		}	// --------------------------------------------------	//  Event handlers : update controls	// --------------------------------------------------				private function handleUpdateControls(evt:Event):void		{			populate();		}				private function handlePositionControls(evt:Event):void		{			// update position fields			numPosX.value = selectedLayer.x;			numPosY.value = selectedLayer.y;		}				private function handleHitControls(evt:Event):void		{			// update selected set of hitarea properties			popHitControls(false);		}				private function handleImageControls(evt:Event):void		{			// update selected set of image properties			popImageControls(false);		}	}}
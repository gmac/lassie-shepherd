package com.lassie.shepherd.editors.room.controls.object{	import com.lassie.shepherd.editors.room.controls.object.InspectorPanel;	import com.lassie.shepherd.editors.room.display.HelpKeys;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.ui.UIComponents;	import fl.controls.NumericStepper;	import fl.controls.Button;	import flash.events.Event;	import flash.events.MouseEvent;		public final class BackgroundInspector extends InspectorPanel	{	// --------------------------------------------------	//  Stage instances	// --------------------------------------------------			public var numMarginL:NumericStepper;		public var numMarginR:NumericStepper;		public var numMarginT:NumericStepper;		public var numMarginB:NumericStepper;		public var hitToImage:Button;				public var stateSelectHelp:HelpLabel;		public var stateIdHelp:HelpLabel;		public var stateNumHelp:HelpLabel;		public var varsHelp:HelpLabel;		public var hitWHelp:HelpLabel;		public var hitHHelp:HelpLabel;		public var frameHelp:HelpLabel;		public var imgWHelp:HelpLabel;		public var imgHHelp:HelpLabel;		public var alphaHelp:HelpLabel;				public var marginLHelp:HelpLabel;		public var marginRHelp:HelpLabel;		public var marginTHelp:HelpLabel;		public var marginBHelp:HelpLabel;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------			public function BackgroundInspector():void		{			super();			headerBar.title = "Background Layer";		}			// --------------------------------------------------	//  Launch	// --------------------------------------------------			protected override function launch():void		{			var tab:int = 1;						tab = launchPhaseControls(tab);			tab = launchHitControls(tab);			tab = launchImageControls(tab);						textVars.addEventListener(Event.CHANGE, this.captureVars);			hitToImage.addEventListener(MouseEvent.CLICK, this._onSizeHitToImage);						UIComponents.initCheckBox(checkMouse, this.captureMouse);			UIComponents.initCheckBox(checkDefaultPhase, this.captureDefaultPhase);			UIComponents.initNumerator(numPhase, tab++, this.capturePhaseNum);			UIComponents.initNumerator(numMarginL, tab++, this.captureMarginL);			UIComponents.initNumerator(numMarginR, tab++, this.captureMarginR);			UIComponents.initNumerator(numMarginT, tab++, this.captureMarginT);			UIComponents.initNumerator(numMarginB, tab++, this.captureMarginB);						stateSelectHelp.key = HelpKeys.STATE_SELECT;			stateIdHelp.key = HelpKeys.STATE_ID;			stateNumHelp.key = HelpKeys.STATE_NUM;			varsHelp.key = HelpKeys.STATE_VARS;			hitWHelp.key = HelpKeys.HIT_W;			hitHHelp.key = HelpKeys.HIT_H;			frameHelp.key = HelpKeys.IMG_FRAME;			imgWHelp.key = HelpKeys.IMG_W;			imgHHelp.key = HelpKeys.IMG_H;			alphaHelp.key = HelpKeys.IMG_ALPHA;					marginLHelp.key = "layer_bg_marginL";			marginRHelp.key = "layer_bg_marginR";			marginTHelp.key = "layer_bg_marginT";			marginBHelp.key = "layer_bg_marginB";		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------			public override function populate():void		{			popPhaseControls();			popHitControls();			popImageControls();			popPhaseOrder();			checkMouse.selected = selectedLayer.mouse;			textVars.text = selectedLayer.activePhaseData.vars;			numMarginL.value = selectedLayer.scrollMarginL;			numMarginR.value = selectedLayer.scrollMarginR;			numMarginT.value = selectedLayer.scrollMarginT;			numMarginB.value = selectedLayer.scrollMarginB;		}			// --------------------------------------------------	//  Capture	// --------------------------------------------------			private function captureMarginL(evt:Event):void		{			selectedLayer.scrollMarginL = numMarginL.value;		}				private function captureMarginR(evt:Event):void		{			selectedLayer.scrollMarginR = numMarginR.value;		}				private function captureMarginT(evt:Event):void		{			selectedLayer.scrollMarginT = numMarginT.value;		}				private function captureMarginB(evt:Event):void		{			selectedLayer.scrollMarginB = numMarginB.value;		}				private function _onSizeHitToImage(evt:Event):void		{			selectedLayer.hitW = selectedLayer.imgWidth;			selectedLayer.hitH = selectedLayer.imgHeight;			populate();		}	}}
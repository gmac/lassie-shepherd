package com.lassie.shepherd.editors.room.controls.object{	import com.lassie.shepherd.display.TextRestrictions;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.display.HelpKeys;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.ui.UIComponents;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.SimpleButton;	import fl.controls.TextInput;		public final class HotspotInspector extends InspectorPanel	{		public var stateSelectHelp:HelpLabel;		public var stateIdHelp:HelpLabel;		public var stateNumHelp:HelpLabel;		public var varsHelp:HelpLabel;		public var titleHelp:HelpLabel;		public var cursorHelp:HelpLabel;		public var bindHelp:HelpLabel;		public var posXHelp:HelpLabel;		public var posYHelp:HelpLabel;		public var rateHelp:HelpLabel;		public var onclickHelp:HelpLabel;		public var angleHelp:HelpLabel;		public var rotateHelp:HelpLabel;		public var subtitleHelp:HelpLabel;		public var shapeHelp:HelpLabel;		public var hitXHelp:HelpLabel;		public var hitYHelp:HelpLabel;		public var hitWHelp:HelpLabel;		public var hitHHelp:HelpLabel;		public var frameHelp:HelpLabel;		public var blendHelp:HelpLabel;		public var prefixHelp:HelpLabel;		public var imgXHelp:HelpLabel;		public var imgYHelp:HelpLabel;		public var imgWHelp:HelpLabel;		public var imgHHelp:HelpLabel;		public var alphaHelp:HelpLabel;		public var scaleHelp:HelpLabel;		public var colorHelp:HelpLabel;		public var focusHelp:HelpLabel;		public var speedHelp:HelpLabel;		public var textPrefix:TextInput;		public var textBind:TextInput;		public var bttnBindNode:SimpleButton;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function HotspotInspector():void		{			super();			headerBar.title = "Puppet Layer";		}			// --------------------------------------------------	//  Launch	// --------------------------------------------------				protected override function launch():void		{			RoomController.filterData.addEventListener(Event.REMOVED, this.handleRemoveFilter);						var tab:int = 1;			tab = launchPhaseControls(tab);						textTitle.tabIndex = tab++;			textTitle.restrict = TextRestrictions.CAPTION;			textTitle.addEventListener(Event.CHANGE, this.captureTitle);						textVars.tabIndex = tab++;			textVars.addEventListener(Event.CHANGE, this.captureVars);						textCursor.tabIndex = tab++;			textCursor.restrict = TextRestrictions.ID;			textCursor.addEventListener(Event.CHANGE, this.captureCursor);						textBind.restrict = TextRestrictions.ID;			textBind.addEventListener(Event.CHANGE, this.captureBinding);			bttnBindNode.addEventListener(MouseEvent.CLICK, this._onBindNodeId);						textPrefix.restrict = TextRestrictions.ID;			textPrefix.addEventListener(Event.CHANGE, this.capturePrefix);						UIComponents.initCheckBox(checkDefaultPhase, this.captureDefaultPhase);			UIComponents.initNumerator(numPhase, tab++, this.capturePhaseNum);			UIComponents.initNumerator(numPosX, tab++, this.capturePosX);			UIComponents.initNumerator(numPosY, tab++, this.capturePosY);			UIComponents.initNumerator(numRate, tab++, this.captureRate);			UIComponents.initNumerator(numClick, tab++, this.captureClick);			UIComponents.initNumerator(numAngle, tab++, this.captureAngle);			UIComponents.initNumerator(numRotate, tab++, this.captureRotate);			UIComponents.initCheckBox(checkFloat, this.captureFloat);			UIComponents.initCheckBox(checkMouse, this.captureMouse);			UIComponents.initCheckBox(checkCache, this.captureCache);			UIComponents.initColorPicker(colorDia, this.captureDiaColor);			tab = launchHitControls(tab);			tab = launchImageControls(tab);			launchFilterControls();						selectScale.drawNow();			selectColor.drawNow();			selectSpeed.drawNow();			selectFocus.drawNow();						// help keys			stateSelectHelp.key = HelpKeys.STATE_SELECT;			stateIdHelp.key = HelpKeys.STATE_ID;			stateNumHelp.key = HelpKeys.STATE_NUM;			varsHelp.key = HelpKeys.STATE_VARS;			titleHelp.key = HelpKeys.TITLE;			cursorHelp.key = HelpKeys.CURSOR;			bindHelp.key = HelpKeys.BIND;			rateHelp.key = HelpKeys.RATE;			angleHelp.key = HelpKeys.ANGLE;			onclickHelp.key = HelpKeys.ON_CLICK;			rotateHelp.key = HelpKeys.ROTATE;			subtitleHelp.key = HelpKeys.SUB_TITLE;			posXHelp.key = HelpKeys.PLOT_X;			posYHelp.key = HelpKeys.PLOT_Y;			shapeHelp.key = HelpKeys.HIT_SHAPE;			hitXHelp.key = HelpKeys.HIT_X;			hitYHelp.key = HelpKeys.HIT_Y;			hitWHelp.key = HelpKeys.HIT_W;			hitHHelp.key = HelpKeys.HIT_H;			frameHelp.key = HelpKeys.IMG_FRAME;			blendHelp.key = HelpKeys.IMG_BLEND;			prefixHelp.key = HelpKeys.IMG_PREFIX;			imgXHelp.key = HelpKeys.IMG_X;			imgYHelp.key = HelpKeys.IMG_Y;			imgWHelp.key = HelpKeys.IMG_W;			imgHHelp.key = HelpKeys.IMG_H;			alphaHelp.key = HelpKeys.IMG_ALPHA;			scaleHelp.key = HelpKeys.SCALE_FILTER;			colorHelp.key = HelpKeys.COLOR_FILTER;			focusHelp.key = HelpKeys.BLUR_FILTER;			speedHelp.key = HelpKeys.SPEED_FILTER;		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------			public override function populate():void		{			popPhaseControls();			textTitle.text = selectedLayer.title;			textCursor.text = selectedLayer.cursor;			textBind.text = selectedLayer.bind;			textPrefix.text = selectedLayer.activePhaseData.prefix;			numPosX.value = selectedLayer.activePhaseData.x;			numPosY.value = selectedLayer.activePhaseData.y;			numRate.value = selectedLayer.rate;			numClick.value = selectedLayer.onclick;			numAngle.value = selectedLayer.angle;			numRotate.value = selectedLayer.rotate;			checkFloat.selected = selectedLayer.float;			checkMouse.selected = selectedLayer.mouse;			checkCache.selected = selectedLayer.cache;			colorDia.selectedColor = selectedLayer.diaColor;			textVars.text = selectedLayer.activePhaseData.vars;			popHitControls();			popImageControls();			popFilterControls();			popPhaseOrder();		}				private function handleRemoveFilter(evt:Event):void {			popFilterControls();		}				private function captureBinding(evt:Event):void {			selectedLayer.bind = textBind.text;		}				private function capturePrefix(evt:Event):void {			selectedLayer.activePhaseData.prefix = textPrefix.text;		}				private function _onBindNodeId(evt:Event):void {			var $id:String = (RoomController.selectedNode != null) ? RoomController.selectedNode.name : "";			selectedLayer.bind = $id;			textBind.text = $id;		}	}}
package com.lassie.shepherd.editors.room.controls.object{	import com.lassie.shepherd.editors.room.events.RoomEditorEvent;	import com.lassie.shepherd.editors.room.RoomController;	import com.lassie.shepherd.editors.room.controls.ui.Panel;	import com.lassie.shepherd.editors.room.controls.ui.PanelHeader;	import com.lassie.shepherd.editors.room.controls.object.*;	import com.lassie.shepherd.data.room.LayerTypes;	import com.lassie.shepherd.events.ServiceEvent;	import com.lassie.shepherd.events.UIEvent;	import com.lassie.shepherd.ui.UIComponents;	import com.lassie.shepherd.ui.ToggleButton;	import com.lassie.shepherd.ui.HelpLabel;	import com.lassie.shepherd.display.TextRestrictions;	import flash.events.Event;	import flash.events.MouseEvent;	import fl.controls.TextInput;	import fl.controls.Button;	import fl.controls.CheckBox;		public final class ObjectPanel extends Panel	{		private static const TITLE:String = "Layer Attributes";		private static const INSPECTOR_Y:int = 120;			// --------------------------------------------------	//  Display objects	// --------------------------------------------------				public var showLayer:ToggleButton;		public var lockLayer:ToggleButton;		public var panelTitle:PanelHeader;		public var lockLayerId:ToggleButton;		public var textLayerId:TextInput;		public var textLibAsset:TextInput;		public var setLibAsset:Button;		public var checkVisible:CheckBox;		//public var checkNPC:CheckBox;				public var idHelp:HelpLabel;		public var assetHelp:HelpLabel;			// --------------------------------------------------	//  Private members	// --------------------------------------------------				private var _active:InspectorPanel;		private var _hotspot:HotspotInspector;		private var _plane:PlaneInspector;		private var _bkground:BackgroundInspector;		private var _character:CharacterInspector;			// --------------------------------------------------	//  Constructor	// --------------------------------------------------				public function ObjectPanel():void		{			super();			_hotspot = new HotspotInspector();			_plane = new PlaneInspector();			_bkground = new BackgroundInspector();			_character = new CharacterInspector();		}			// --------------------------------------------------	//  Launch	// --------------------------------------------------				protected override function launch():void		{			var tab:int = 1;			panelTitle.title = TITLE;			textLayerId.tabIndex = tab++;			textLayerId.restrict = TextRestrictions.ID			textLayerId.addEventListener(Event.CHANGE, this.captureLayerId);			UIComponents.initToggle(lockLayerId, this.captureLayerIdLock);			textLibAsset.enabled = false;			UIComponents.initButton(setLibAsset, this.handleSetLibAsset);			UIComponents.initCheckBox(checkVisible, this.captureGameVisible);			//UIComponents.initCheckBox(checkNPC, this.captureNPC);						showLayer.icon = ToggleButton.ICON_VISIBLE;			lockLayer.icon = ToggleButton.ICON_LOCK;			showLayer.addEventListener(MouseEvent.CLICK, this.captureVisible);			lockLayer.addEventListener(MouseEvent.CLICK, this.captureLock);						idHelp.key = "layer_id";			assetHelp.key = "layer_asset";						// listen for interface updates			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYER_SELECTION, this.handleLayerUpdate);			RoomController.instance.addEventListener(RoomEditorEvent.UPDATE_LAYER_CONTROLS, this.handleLayerUpdate);		}				protected override function init():void		{			populate();		}				public override function dispose():void		{			RoomController.instance.removeEventListener(RoomEditorEvent.UPDATE_LAYER_SELECTION, this.handleLayerUpdate);			RoomController.instance.removeEventListener(RoomEditorEvent.UPDATE_LAYER_CONTROLS, this.handleLayerUpdate);		}			// --------------------------------------------------	//  Populate	// --------------------------------------------------				public override function populate():void		{			if (selectedLayer != null)			{				textLayerId.text = selectedLayer.id;				lockLayerId.selected = (selectedLayer.lockId || selectedLayer.permanentLockPos);				textLayerId.enabled = selectedLayer.permanentLockId ? false : !selectedLayer.lockId;				lockLayerId.enabled = !selectedLayer.permanentLockId;				textLibAsset.text = selectedLayer.asset;				setLibAsset.enabled = !selectedLayer.permanentLockArt;				checkVisible.selected = selectedLayer.data.gameVis;				showLayer.selected = selectedLayer.vis;				lockLayer.selected = selectedLayer.locked;				//checkNPC.selected = selectedLayer.npc;								// disable options depending on layer type				lockLayer.enabled = !selectedLayer.permanentLockPos;				//checkNPC.visible = selectedLayer.allowNPC;								// set inspector display				setInsepctor(selectedLayer.type);				_active.populate();			}			else			{				setInsepctor("none");				_active.populate();			}		}	// --------------------------------------------------	//  Set inspector display	// --------------------------------------------------			private function setInsepctor(id:String):void		{			if (_active != null)			{				removeChild(_active);				_active = null;			}						switch(id)			{				case LayerTypes.HOTSPOT:									_active = _hotspot;					break;									case LayerTypes.CHARACTER:									_active = _character;					break;									case LayerTypes.PLANE:									_active = _plane;					break;									case LayerTypes.BACKGROUND:									_active = _bkground;					break;			}			if (_active != null)			{				_active.y = INSPECTOR_Y;				addChild(_active);			}						// update controls scrolling			dispatchEvent(new UIEvent(UIEvent.REFRESH_SCROLL, true));		}			// --------------------------------------------------	//  Capture methods	// --------------------------------------------------				private function captureLayerId(evt:Event):void		{			selectedLayer.id = textLayerId.text;		}				private function captureLayerIdLock(evt:Event):void		{			selectedLayer.lockId = lockLayerId.selected;			textLayerId.enabled = !lockLayerId.selected;		}				private function captureVisible(evt:Event):void		{			selectedLayer.vis = showLayer.selected;		}				private function captureGameVisible(evt:Event):void		{			selectedLayer.data.gameVis = checkVisible.selected;		}				private function captureLock(evt:Event):void		{			selectedLayer.locked = lockLayer.selected;		}				/*private function captureNPC(evt:Event):void		{			selectedLayer.npc = checkNPC.selected;		}*/			// --------------------------------------------------	//  Event handlers	// --------------------------------------------------				private function handleLayerUpdate(evt:RoomEditorEvent):void		{			// populate panel display			populate();		}				private function handleSetLibAsset(evt:Event):void		{			lsServices.addEventListener(ServiceEvent.CLOSE_SERVICE, this.handleLibraryClose);			lsServices.addEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this.handleLibrarySelect);			lsServices.browseLibs(textLibAsset.text);		}				private function handleLibrarySelect(evt:ServiceEvent):void		{			selectedLayer.asset = evt.libraryAsset;			textLibAsset.text = evt.libraryAsset;			// re-populate active panel's image controls			_active.popImageControls();		}				private function handleLibraryClose(evt:Event):void		{			lsServices.removeEventListener(ServiceEvent.CLOSE_SERVICE, this.handleLibraryClose);			lsServices.removeEventListener(ServiceEvent.SELECT_LIBRARY_ASSET, this.handleLibrarySelect);		}	}}
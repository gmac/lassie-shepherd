package com.lassie.shepherd.localizer{	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import fl.controls.Button;	import com.lassie.shepherd.data.*;		final public class Localizer extends Sprite	{		public var globalExport:Button;		public var globalImport:Button;		public var roomExport:Button;		public var roomImport:Button;		public var outputText:TextField;				public function Localizer():void		{			super();						LocalizerSetup.projectPath = (loaderInfo.url.indexOf('file:') == 0) ? 'http://localhost:8888/projects/stitch_german/' : '';			FileService.FILE_SERVICE = LocalizerSetup.projectPath+'data/';						globalExport.addEventListener(MouseEvent.CLICK, this._onGlobalExport, false, 0, true);			globalImport.addEventListener(MouseEvent.CLICK, this._onGlobalImport, false, 0, true);			roomExport.addEventListener(MouseEvent.CLICK, this._onRoomExport, false, 0, true);			roomImport.addEventListener(MouseEvent.CLICK, this._onRoomImport, false, 0, true);			outputText.autoSize = TextFieldAutoSize.LEFT;		}				private function _setControlsEnabled($enabled:Boolean):void {			globalExport.enabled = globalImport.enabled = roomExport.enabled = roomImport.enabled = $enabled;		}				// Global Export		private function _onGlobalExport($event:Event):void {			var $export:GameExport = new GameExport();			$export.addEventListener(Event.COMPLETE, this._onGlobalExportComplete);			$export.start(this);			_setControlsEnabled(false);		}			private function _onGlobalExportComplete($event:Event):void {				$event.target.addEventListener(Event.COMPLETE, this._onGlobalExportComplete);				_setControlsEnabled(true);			}				// Global Import		private function _onGlobalImport($event:Event):void {			var $import:GameImport = new GameImport();			$import.addEventListener(Event.COMPLETE, this._onGlobalImportComplete);			$import.start(this);			_setControlsEnabled(false);		}			private function _onGlobalImportComplete($event:Event):void {				$event.target.addEventListener(Event.COMPLETE, this._onGlobalImportComplete);				_setControlsEnabled(true);			}				// Room Export		private function _onRoomExport($event:Event):void {			var $export:RoomExport = new RoomExport();			$export.addEventListener(Event.COMPLETE, this._onRoomExportComplete);			$export.start(this);			_setControlsEnabled(false);		}			private function _onRoomExportComplete($event:Event):void {				$event.target.addEventListener(Event.COMPLETE, this._onRoomExportComplete);				_setControlsEnabled(true);			}					// Room Import		private function _onRoomImport($event:Event):void {			var $import:RoomImport = new RoomImport();			$import.addEventListener(Event.COMPLETE, this._onRoomImportComplete);			$import.start(this);			_setControlsEnabled(false);		}			private function _onRoomImportComplete($event:Event):void {				$event.target.addEventListener(Event.COMPLETE, this._onRoomImportComplete);				_setControlsEnabled(true);			}					// message logging.		public function log($message:String, $replace:Boolean=false):void {			outputText.text = $replace ? outputText.text : outputText.text + $message + '\n';			outputText.y = 20 + ((outputText.height > 560) ? 560 - outputText.height : 0);		}	}}
package com.lassie.shepherd.localizer{	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.adobe.serialization.json.JSON;	import com.lassie.shepherd.data.game.*;	import com.lassie.shepherd.data.*;		final public class GameImport extends GameLocalizer	{		public function GameImport():void {			super();		}				override protected function _start():void {			addEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onImportGameDataLoad, false, 0, true);			getGameData();		}				/*		* --------------------------------------------------------------------------------------------------		* --------------------------------------------------------------------------------- Export		* --------------------------------------------------------------------------------------------------		*/					/**			* Called upon loading the room to export.			*/			private function _onImportGameDataLoad($event:Event):void {				removeEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onImportGameDataLoad);				var $io:URLLoader = new URLLoader();				$io.addEventListener(Event.COMPLETE, this._onImportGameXMLLoad);				$io.load(new URLRequest(LocalizerSetup.projectPath + LocalizerSetup.LOCALIZATION_FOLDER +'/'+ _filename +'.xml'));			}						/**			* Called upon loading the room to export.			*/			private function _onImportGameXMLLoad($event:Event):void {				$event.target.removeEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onImportGameXMLLoad);				_importGame( new XML(URLLoader($event.target).data) );								var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onImportGameSave);				$io.save(FileService.FILE_SERVICE, "./", _filename + "." + FileService.EXT_GAME, JSON.encode(GameData.instance));			}						/**			* Called upon saving the room to export.			*/			private function _onImportGameSave($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onImportGameSave);								GameData.instance.compactData = true;								var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onImportGamePublish);				$io.save(FileService.FILE_SERVICE, "../xml", _filename + ".xml", GameXMLCompiler.parse(GameData.instance));			}						/**			* Called upon saving the published global file.			*/			private function _onImportGamePublish($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onImportGamePublish);				_console = null;				dispatchEvent(new Event(Event.COMPLETE));			}				/**		* Imports external text into game data structure.		*/		private function _importGame( $xml:XML ):void 		{			XML.ignoreWhitespace = true;			XML.prettyPrinting = false;			XML.prettyIndent = 0;						var $merge:XML;			var $node:String;			var $action:InteractionData;			var $dia:DialogueData;						$merge = XML($xml[LocalizerSetup.NODE_FIELD][LocalizerSetup.FIELD_VERB]);			GameData.instance.verbDialect = _printXML($merge);						$merge = XML($xml[LocalizerSetup.NODE_FIELD][LocalizerSetup.FIELD_ITEM]);			GameData.instance.itemDialect = _printXML($merge);						// Import ACTORS			/*for each (var $actor:CastRecord in GameData.instance.actors) {				if ($actor.linkage != "") {					$merge = XML($xml[LocalizerSetup.NODE_NOUN][LocalizerSetup.NODE_NOUN + $actor.linkage]);					$actor.title = _printXML($merge);				}			}*/						// Import RESPONSES			for each (var $response:ResponseRecord in GameData.instance.responses)			{				// loop through response actions				for each ($action in $response.actions)				{					$merge = XML($xml[LocalizerSetup.NODE_VERB][LocalizerSetup.NODE_VERB + $action.linkage]);					if (!!$merge) $action.title = _printXML($merge);										// loop through dialogue					for each ($dia in $action.dialogue) {						$merge = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);						if (!!$merge) $dia.caption = _printXML($merge);					}				}			}						// Import ITEMS			for each (var $item:ItemRecord in GameData.instance.items)			{				$merge = XML($xml[LocalizerSetup.NODE_NOUN][LocalizerSetup.NODE_NOUN + $item.linkage]);				if (!!$merge) $item.title = _printXML($merge);								// loop through item actions				for each ($action in $item.actions)				{					$merge = XML($xml[LocalizerSetup.NODE_VERB][LocalizerSetup.NODE_VERB + $action.linkage]);					if (!!$merge) $action.title = _printXML($merge);										// loop through dialogue					for each ($dia in $action.dialogue) {						$merge = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);						if (!!$merge) $dia.caption = _printXML($merge);					}				}			}						// Import COMBOS			for each (var $combo:ComboRecord in GameData.instance.combos) {				$merge = XML($xml[LocalizerSetup.NODE_VERB][LocalizerSetup.NODE_VERB + $combo.action.linkage]);				if (!!$merge) $combo.action.title = _printXML($merge);				// loop through dialogue				for each ($dia in $combo.action.dialogue) {					$merge = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);					if (!!$merge) $dia.caption = _printXML($merge);				}			}		}	}}
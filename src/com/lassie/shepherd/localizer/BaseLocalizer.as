package com.lassie.shepherd.localizer{	import flash.events.Event;	import flash.events.EventDispatcher;	import com.lassie.shepherd.data.*;		internal class BaseLocalizer extends EventDispatcher	{		protected var _filename:String='';		protected var _language:String = 'en';		protected var _languages:Array = new Array('de', 'fr', 'it', 'ru', 'es');		protected var _titleLinkage:int = 0;		protected var _actionLinkage:int = 0;		protected var _dialogueLinkage:int = 0;		protected var _console:Localizer;				public function BaseLocalizer():void {			super();		}				final public function start($console:Localizer):void {			_console = $console;			_start();		}			protected function _start():void {				// override in subclass.			}				/**		* ---------------------------------------------------------------------------		* Export		* ---------------------------------------------------------------------------		*/				/**		* Compiles an actor title/name.		*/		protected function _exportNoun($noun:String, $linkage:String):String		{			var $xml:String = '<'+ LocalizerSetup.NODE_NOUN + $linkage +'>';						if ($noun.indexOf('<') == 0) {				$xml += $noun;			} else {				$xml += '<'+ _language +'><![CDATA['+ $noun +']]></'+ _language +'>';								for each (var $key:String in _languages) {					$xml += '<'+ $key +'><![CDATA[]]></'+ $key +'>';				}			}						$xml += '</'+ LocalizerSetup.NODE_NOUN + $linkage +'>';			return $xml;		}				/**		* Compiles a line of export interaction XML.		*/		protected function _exportAction($action:InteractionData, $ref:String):String		{			if ($action.linkage == "") $action.linkage = (_actionLinkage++).toString();			var $xml:String = '<'+ LocalizerSetup.NODE_VERB + $action.linkage +' noun="'+ _getSafeTitle( $ref ) +'">';						if ($action.title.indexOf('<') == 0) {				$xml += $action.title;			} else {				$xml += '<'+ _language +'><![CDATA['+ $action.title +']]></'+ _language +'>';								for each (var $key:String in _languages) {					$xml += '<'+ $key +'><![CDATA[]]></'+ $key +'>';				}			}						$xml += '</'+ LocalizerSetup.NODE_VERB + $action.linkage +'>';			return $xml;		}						/**		* Compiles a line of export dialogue XML.		*/		protected function _exportContext($action:InteractionData, $ref:String):String		{			if ($action.linkage == "") $action.linkage = (_actionLinkage++).toString();			var $xml:String = '<'+ LocalizerSetup.NODE_CONTEXT + $action.linkage +' noun="'+ _getSafeTitle( $ref ) +'" item="'+ $action.title +'">';						if ($action.context.indexOf('<') == 0) {				$xml += $action.context;			} else {				$xml += '<'+ _language +'><![CDATA['+ $action.context +']]></'+ _language +'>';								for each (var $key:String in _languages) {					$xml += '<'+ $key +'><![CDATA[]]></'+ $key +'>';				}			}						$xml += '</'+ LocalizerSetup.NODE_CONTEXT + $action.linkage +'>';			return $xml;		}					/**			* Creates an XML-safe title.			*/			protected function _getSafeTitle($title:String):String {				if ($title.indexOf('<') == 0) {					var $xml:XML = new XML('<title>'+ $title +'</title>');					return $xml[ _language ].toString();				}				return $title;			}					/**		* Compiles a line of export dialogue XML.		*/		protected function _exportDialogue($dia:DialogueData, $puppets:Array=null):String		{			if ($dia.linkage == "") $dia.linkage = (_dialogueLinkage++).toString();						var $sound:String = $dia.sound;			var $puppet:String = !!$puppets ? $puppets[ parseInt($dia.puppet) ] : $dia.puppet;						while ($sound.length < 4) $sound = "0"+$sound;			var $xml:String = '<'+ LocalizerSetup.NODE_DIALOGUE + $dia.linkage +' puppet="'+ $puppet +'" sound="'+ _filename + $sound +'.mp3">';									if ($dia.caption.indexOf('<') == 0) {				$xml += $dia.caption;			} else {				$xml += '<'+ _language +'><![CDATA['+ $dia.caption +']]></'+ _language +'>';								for each (var $key:String in _languages) {					$xml += '<'+ $key +'><![CDATA[]]></'+ $key +'>';				}			}						$xml += '</'+ LocalizerSetup.NODE_DIALOGUE + $dia.linkage +'>';			return $xml;		}				/**		* Compiles a line of export dialogue XML.		*/		protected function _exportField($field:String, $text:String):String		{			var $xml:String = '<'+ $field +'>';						if ($text.indexOf('<') == 0) {				$xml += $text;			} else {				$xml += '<'+ _language +'><![CDATA['+ $text +']]></'+ _language +'>';								for each (var $key:String in _languages) {					$xml += '<'+ $key +'><![CDATA[]]></'+ $key +'>';				}			}						$xml += '</'+ $field +'>';			return $xml;		}				/**		* Compiles a block of export XML.		*/		protected function _exportXML($titles:String, $actions:String, $contexts:String, $dialogue:String, $fields:String=''):String		{			var $xml:String = '<?xml version="1.0" encoding="UTF-8"?><localize>';			$xml += '<NOUNS><![CDATA[\n\t\tNouns state the title of an object that the player can mouse-over and interact with.\n\t\tThese are generally singular nouns.\n\t\tNouns may be blank.\n]]></NOUNS>';			$xml += '<'+ LocalizerSetup.NODE_NOUN +'>'+ $titles +'</'+ LocalizerSetup.NODE_NOUN +'>';			$xml += '<VERBS><![CDATA[\n\t\tA verb summary describes an interaction that the player can perform on an object.\n\t\tFormatting of the verb/noun wording is controlled globally through the verb dialect field.\n\t\tGlobal verb dialect allows you to specify a "#verb# #noun#" formatting string that will govern how all verbs and nouns are joined together.\n]]></VERBS>';			$xml += '<'+ LocalizerSetup.NODE_VERB +'>'+ $actions + '</'+ LocalizerSetup.NODE_VERB +'>';			$xml += '<CONTEXTS><![CDATA[\n\t\tA contextual summary describes an item\'s interaction with an object.\n\t\tThis summary includes placeholder tokens (#noun# and #item#) for dynamic elements in the sentence.\n\t\tWhen translating, you may change the order and/or position of the placeholder tokens within the sentence.\n\t\tHowever, **DO NOT** translate the placeholder token text. They MUST be left as #noun# and #item#.\n]]></CONTEXTS>';			$xml += '<'+ LocalizerSetup.NODE_CONTEXT +'>'+ $contexts + '</'+ LocalizerSetup.NODE_CONTEXT +'>';			$xml += '<DIALOGUE><![CDATA[\n\t\tDialogue subtitles deliver game narrative and player discussion.\n\t\t Each dialogue subtitle includes an associated sound file that should be recorded and grouped by language.\n]]></DIALOGUE>';			$xml += '<'+ LocalizerSetup.NODE_DIALOGUE +'>'+ $dialogue + '</'+ LocalizerSetup.NODE_DIALOGUE +'>';			if ($fields != '') {				$xml += '<FIELDS><![CDATA[\n\t\tOther custom fields to translate.\n]]></FIELDS>';				$xml += '<'+ LocalizerSetup.NODE_FIELD +'>'+ $fields + '</'+ LocalizerSetup.NODE_FIELD +'>';			}			$xml += '</localize>';			return $xml;		}				/**		* ---------------------------------------------------------------------------		* Import		* ---------------------------------------------------------------------------		*/				/**		* Prints XMLList as a single string with no breaks (why isn't "prettyPrinting=false" doing this?!?)		*/		protected function _printXML($xml:XML):String {			var $print:String = $xml.children().toXMLString();			return $print.split("\n").join("");		}	}}
package com.lassie.shepherd.localizer{	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.adobe.serialization.json.JSON;	import com.lassie.shepherd.data.game.*;	import com.lassie.shepherd.data.*;		final public class GameExport extends GameLocalizer	{		public function GameExport():void {			super();		}				override protected function _start():void {			addEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onExportGameLoad, false, 0, true);			getGameData();		}				/*		* --------------------------------------------------------------------------------------------------		* --------------------------------------------------------------------------------- Export		* --------------------------------------------------------------------------------------------------		*/					/**			* Called upon loading the room to export.			*/			private function _onExportGameLoad($event:Event):void {				removeEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onExportGameLoad);				_titleLinkage = GameData.instance.titleLinkage = 0;				_actionLinkage = GameData.instance.actLinkage = 0;				_dialogueLinkage = GameData.instance.diaLinkage = 0;				var $xml:String = _getGameExport();								GameData.instance.titleLinkage = _titleLinkage;				GameData.instance.actLinkage = _actionLinkage;				GameData.instance.diaLinkage = _dialogueLinkage;								var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onExportXMLSave);				$io.save(FileService.FILE_SERVICE, "../"+LocalizerSetup.LOCALIZATION_FOLDER, _filename + ".xml", $xml);			}						/**			* Called upon saving the XML export data.			*/			private function _onExportXMLSave($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onExportXMLSave);								var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onExportGameSave);				$io.save(FileService.FILE_SERVICE, "./", _filename + "." + FileService.EXT_GAME, JSON.encode(GameData.instance));			}						/**			* Called upon saving the room to export.			*/			private function _onExportGameSave($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onExportGameSave);				_console = null;				dispatchEvent(new Event(Event.COMPLETE));			}				/**		* Compiles the export XML.		*/		private function _getGameExport():String		{			XML.ignoreWhitespace = true;			XML.prettyPrinting = true;			XML.prettyIndent = 1;						var $fields:String = '';			var $titles:String = '';			var $actions:String = '';			var $contexts:String = '';			var $dialogue:String = '';			var $dia:DialogueData;			var $action:InteractionData;						// Export FIELDS			$fields += _exportField(LocalizerSetup.FIELD_VERB, GameData.instance.verbDialect);			$fields += _exportField(LocalizerSetup.FIELD_ITEM, GameData.instance.itemDialect);						// Export ACTORS			/*for each (var $actor:CastRecord in GameData.instance.actors) {				if ($actor.linkage == "") $actor.linkage = (_titleLinkage++).toString();				$titles += _exportNoun($actor.title, $actor.linkage);			}*/						// Export RESPONSES			for each (var $response:ResponseRecord in GameData.instance.responses)			{				for each ($action in $response.actions) {					$actions += _exportAction( $action, 'default dialogue: '+ $response.id );											// loop through dialogue					for each ($dia in $action.dialogue) {						$dialogue += _exportDialogue( $dia );					}				}			}						// Export ITEMS			for each (var $item:ItemRecord in GameData.instance.items)			{				if ($item.linkage == "") $item.linkage = (_titleLinkage++).toString();				$titles += _exportNoun($item.title, $item.linkage);								for each ($action in $item.actions) {					$actions += _exportAction( $action, _getSafeTitle($item.title) );											// loop through dialogue					for each ($dia in $action.dialogue) {						$dialogue += _exportDialogue( $dia );					}				}			}						// Export COMBOS			for each (var $combo:ComboRecord in GameData.instance.combos) {				$actions += _exportAction( $combo.action, $combo.id );								// loop through dialogue				for each ($dia in $combo.action.dialogue) {					$dialogue += _exportDialogue( $dia );				}			}			var $xml:String = _exportXML($titles, $actions, $contexts, $dialogue, $fields);			return new XML($xml).toXMLString();		}	}}
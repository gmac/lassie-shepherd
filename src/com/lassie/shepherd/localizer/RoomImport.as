package com.lassie.shepherd.localizer{	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLLoader;	import com.lassie.shepherd.data.game.*;	import com.lassie.shepherd.data.room.*;	import com.lassie.shepherd.data.*;	final public class RoomImport extends RoomLocalizer	{		private var _io:URLLoader;		public function RoomImport():void {			super();		}		override protected function _start():void {			importAllRooms();		}		/**		* Called upon clicking the "import all" button.		*/		protected function importAllRooms($event:Event=null):void {			addEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onImportListLoad, false, 0, true);			getRoomsList();		}			private function _onImportListLoad($event:Event):void {				removeEventListener(LocalizerSetup.SETUP_LOAD_COMPLETE, this._onImportListLoad);				addEventListener(LocalizerSetup.ITEM_IMPORT_COMPLETE, this.importNextRoom);				addEventListener(LocalizerSetup.IMPORT_COMPLETE, this._onImportListComplete);				importNextRoom();			}			private function _onImportListComplete($event:Event):void {				removeEventListener(LocalizerSetup.ITEM_IMPORT_COMPLETE, this.importNextRoom);				removeEventListener(LocalizerSetup.IMPORT_COMPLETE, this._onImportListComplete);				_console = null;				dispatchEvent(new Event(Event.COMPLETE));			}		/*		* --------------------------------------------------------------------------------------------------		* --------------------------------------------------------------------------------- Import		* --------------------------------------------------------------------------------------------------		*/		protected function importNextRoom($event:Event=null):void {			trace(_rooms);			if (_rooms.length > 0) {				importRoom( _rooms.shift() );				_console.log('imported: '+ _filename);			} else {				_console.log("import complete.", true);				dispatchEvent(new Event(LocalizerSetup.IMPORT_COMPLETE));			}		}		/**		* Opens a room data file and an export sheet, then merges the two.		*/		function importRoom( $id:String ):void {			_filename = $id;			_io = new URLLoader();			_io.addEventListener(Event.COMPLETE, this._onImportRoomLoad, false, 0, true);			_io.load(new URLRequest(FileService.FILE_SERVICE + 'rooms/'+ _filename +"."+ FileService.EXT_ROOM));		}			/**			* Called upon loading the room to import.			*/			private function _onImportRoomLoad($event:Event):void {				_io.removeEventListener(Event.COMPLETE, this._onImportRoomLoad);				RoomDataParser.parse(RoomData.instance, JSON.parse( _io.data ));				_io = new URLLoader();				_io.addEventListener(Event.COMPLETE, this._onImportDataLoad, false, 0, true);				_io.load(new URLRequest(LocalizerSetup.projectPath + LocalizerSetup.LOCALIZATION_FOLDER +'/'+ _filename +'.xml'));			}			/**			* Called upon loading the room data to import.			*/			private function _onImportDataLoad($event:Event):void {				_io.removeEventListener(Event.COMPLETE, this._onImportDataLoad);				_importRoom(new XML( _io.data ));				_io = null;				var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onImportRoomSave);				$io.save(FileService.FILE_SERVICE, "rooms", _filename + "." + FileService.EXT_ROOM, JSON.stringify(RoomData.instance));			}			/**			* Called upon saving the room to export.			*/			private function _onImportRoomSave($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onImportRoomSave);				GameData.instance.compactData = true;				var $io:FileIO = new FileIO();				$io.addEventListener(Event.COMPLETE, this._onImportRoomPublish);				$io.save(FileService.FILE_SERVICE, "../xml", _filename + ".xml", RoomXMLCompiler.parse(RoomData.instance));			}			/**			* Called upon saving the room to export.			*/			private function _onImportRoomPublish($event:Event):void {				$event.target.removeEventListener(Event.COMPLETE, this._onImportRoomPublish);				dispatchEvent(new Event(LocalizerSetup.ITEM_IMPORT_COMPLETE));			}		/**		* Imports external text into a room data structure.		*/		private function _importRoom( $xml:XML ):void		{			XML.ignoreWhitespace = true;			XML.prettyPrinting = false;			XML.prettyIndent = 0;			var $merge:XML;			var $node:String;			var $dia:DialogueData;			// loop through layers			for each (var $layer:LayerData in RoomData.instance.layers)			{				// loop through states				for each (var $state:PhaseData in $layer.phases)				{					$merge = XML($xml[LocalizerSetup.NODE_NOUN][LocalizerSetup.NODE_NOUN + $state.linkage]);					if (!!$merge) $state.title = _printXML($merge);					// loop through state base actions					for each (var $action:InteractionData in $state.actions)					{						$merge = XML($xml[LocalizerSetup.NODE_VERB][LocalizerSetup.NODE_VERB + $action.linkage]);						if (!!$merge) $action.title = _printXML($merge);						// loop through dialogue						for each ($dia in $action.dialogue) {							$merge = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);							if (!!$merge) $dia.caption = _printXML($merge);						}					}					// loop through state item actions					for each (var $item:InteractionData in $state.items)					{						$merge = XML($xml[LocalizerSetup.NODE_CONTEXT][LocalizerSetup.NODE_CONTEXT + $item.linkage]);						if (!!$merge) $item.context = _printXML($merge);						// loop through dialogue						for each ($dia in $item.dialogue) {							$merge = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);							if (!!$merge) $dia.caption = _printXML($merge);						}					}				}			}			// loop through trees			for each (var $tree:TreeRecord in RoomData.instance.diaTrees) {				_importRoomTier( $tree.root, $xml );			}		}		/**		* Compiles a tier of dialogue within a tree structure.		*/		private function _importRoomTier($tier:TierData, $xml:XML):void		{			for each (var $topic:TopicData in $tier.topics)			{				for each (var $dia:DialogueData in $topic.action.dialogue)				{					var $merge:XML = XML($xml[LocalizerSetup.NODE_DIALOGUE][LocalizerSetup.NODE_DIALOGUE + $dia.linkage]);					if (!!$merge) $dia.caption = _printXML($merge);				}				_importRoomTier( $topic.tier, $xml );			}		}	}}
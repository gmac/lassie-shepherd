/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.external{	import flash.events.IEventDispatcher;	import flash.display.DisplayObject;		/**	* Lassie Player External Interface.	* References to a Lassie Player node are obtained through a Lassie display socket.	*/	public interface ILassiePlayer extends IEventDispatcher	{		/**		* Processes an XML script.		* @param xml  The XML script to process.		* @param branch  Specifies if the XML should be run as a branch process.		* When false, the script runs as the trunk process which will overwrite any existing queue of trunk actions.		* When true, the script runs as a branch independent of the trunk.		*/		function processXML($xml:XML, $processAsBranch:Boolean=false):void;				/**		* Gets an array of all saved game names.		*/		function get savedGames():Array;				/**		* Specifies the index of the currently active game.		*/		function get activeGameIndex():int;				/**		* Specifies if a previous game session exists that can be continued.		*/		function get hasContinueGame():Boolean;				/**		* Continues the last auto-saved game session.		*/		function continueGame():void;				/**		* Starts a new game within the player.		*/		function newGame():void;				/**		* Loads a saved game.		* @param index  The save slot index from which to load a saved game.		*/		function loadGame($index:uint):void;				/**		* Saves the currently active game.		* @param index  The save slot index in which to save the current game data.		* @param name  The name to assign to the game data.		*/		function saveGame($index:uint, $name:String):void;				/**		* Clears data from a saved game slot.		* @param index  The save slot index to purge data from.		*/		function clearGame($index:uint):void;				/**		* Exports all current data within the game cache.		*/		function exportGame():Object;				/**		* Loads a new game using raw data imported from a foreign source.		* @param data  The data to import. This data should originally have been acquired through export.		* @param index  The save slot index in which to load the game.		* @param name  The name to assign to the newly loaded game's save index.		*/		function importGame($data:Object, $index:uint=0, $name:String=""):void;				/**		* Tests if a field exists within the game cache.		* @param field  The name of the field (variable) to test for.		* @return Returns true if the field exists.		*/		function hasCacheVar($field:String):Boolean;				/**		* Gets the value of a field within the game cache.		* @param field  The name of the field to pull data from.		* @return Returns the named field value as a string, or null if the field does not exist.		*/		function getCacheVar($field:String):String;				/**		* Sets a value field within the cache, or clears a field when set to empty.		* @param field  Name of the field to write data to.		* @param value  The value to write into the field. Write an empty string ("") to clear a field from the cache.		*/		function setCacheVar($field:String, $value:String):void;				/**		* Evaluates an expression using the Logic API and returns a true/false outcome.		* @param expression  The expression string to evaluate.		* @return Returns the outcome of the evaluated expression.		*/		function logicEval($expression:String):Boolean;				/**		* Parses an expression using the Logic API and returns the rendered textual result.		* @param expression  The expression string to parse.		* @return Returns the parsed text with all variables and methods evaluated.		*/		function logicParse($expression:String):String;				/**		* Sends an XML dialogue description to the engine for playback.		* @param xml  The XML dialogue description to play.		*/		function playDialogue($xml:XML):void;				/**		* Gets an object with properties detailing the object currently targeted by the action selector.		* If no object is currently targeted within the action selector, then a blank object is returned.		* While an object is being targeted by the action selector, the information object contains the following:		* - "type" property: specifies the type of object being targeted. This value will be either "puppet" or "item".		* - "target" porperty: specifies the ID name of the target puppet or item.		* - informational object will also contain a list of properties specified by the layer's vars.		*/		function getActionTargetInfo():Object;				/**		* Gets an inventory slot DisplayObject which can have an inventory item loaded into it.		* Use this method to create additional inventory item displays throughout game media.		* Upon getting a new inventory slot display object, you can load an item into the slot through it's API.		* Cast the return of this method as a DisplayObject to add the object to a display list.		* @return Returns an inventory slot DisplayObject, cast as the ILPInventorySlot interface.		*/		function getInventorySlot():ILPInventorySlot;					/**		* Specifies if the game has launched yet by loading a room layout.		*/		function get gameHasLaunched():Boolean;				/**		* Specifies the title of the game.		*/		function get gameTitle():String;				/**		* Specifies the game author's name.		*/		function get authorName():String;				/**		* Specifies if the game has a valid license key.		*/		function get hasLicenseKey():Boolean;				/**		* Provides a reference to the game's window frame display.		* This reference can be used to localize window coordinates.		*/		function get window():DisplayObject;				/**		* Specifies the width of the viewable window area.		*/		function get windowWidth():int;				/**		* Specifies the height of the viewable window area.		*/		function get windowHeight():int;				/**		* Specifies if the game is in an environment that supports quitting.		*/		function get quitEnabled():Boolean;				/**		* Quits the Lassie Player application.		*/		function quit():void;				/**		* Provides a block of legal text that the user must agree to before their first game session.		*/		function get legalText():String;				/**		* Specifies the user's acceptance status of the provided legal text.		*/		function get hasAcceptedLegal():Boolean;		function set hasAcceptedLegal($accept:Boolean):void;				/**		* Specifies if the game is in an environment that supports fullscreen playback.		*/		function get fullScreenEnabled():Boolean;				/**		* Specifies the full-screen display mode of the Lassie Player.		* This value may be set with any LPFullScreenMode constant.		*/		function get fullScreenMode():String;		function set fullScreenMode($mode:String):void;				/**		* Specifies the stage graphics quality.		* This value may be set with any flash.display.StageQuality constant.		*/		function get graphicsQuality():String;		function set graphicsQuality($quality:String):void;				/**		* Specifies the game's current language setting.		*/		function get languageOptions():Array;		function get language():String;		function set language($key:String):void;				/**		* Specifies if voice is enabled within the game.		*/		function get voiceEnabled():Boolean;		function set voiceEnabled($enable:Boolean):void;				/**		* Specifies if subtitles are enabled within the game.		*/		function get subtitleEnabled():Boolean;		function set subtitleEnabled($enable:Boolean):void;				/**		* Specifies the speed of subtitle playback.		*/		function get subtitleSpeed():Number;		function set subtitleSpeed($percent:Number):void;				/**		* Specifies the percentage of the game's voice volume, expressed as a number between 0 and 1.		*/		function get voiceVolume():Number;		function set voiceVolume($percent:Number):void;				/**		* Specifies the percentage of the game's sound FX volume, expressed as a number between 0 and 1.		*/		function get soundfxVolume():Number;		function set soundfxVolume($percent:Number):void;				/**		* Specifies the percentage of the game's soundtrack volume, expressed as a number between 0 and 1.		*/		function get soundtrackVolume():Number;		function set soundtrackVolume($percent:Number):void;				/**		* Specifies the enabled status of game keyboard input.		*/		function get keyboardEnabled():Boolean;		function set keyboardEnabled($enable:Boolean):void;	}}
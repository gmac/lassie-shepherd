/*** Lassie Engine* @author Greg MacWilliam.*/package com.lassie.external{	import com.lassie.events.LassieEvent;	import flash.display.DisplayObject;	import flash.geom.Rectangle;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;		/**	* XML Structure:	<?xml version="1.0" encoding="UTF-8"?><cutscene>	<cue id="refId">		<dia puppet="" frame="" sound="" color="0xFFFFFF">			<en>Hello World</en>		</dia>	</cue></cutscene>	*/	public class LPCutscene extends LPMovieClip	{		private var _xml:XML;		private var _xmlById:Object;				public function LPCutscene():void {			super();			stop();						_xmlById = new Object();		}				/**		* Unloads the MovieClip to optimize for garbage collection.		*/		override public function unload():void {			super.unload();			_xmlById = null;			_xml = null;		}				/**		* Stops the cutscene timeline and loads in XML data.		*/		public function load($xmlPath:String):void		{			stop();			var $loader:URLLoader = new URLLoader();			$loader.addEventListener(Event.COMPLETE, this._onXMLLoadComplete);			$loader.load( new URLRequest($xmlPath) );		}					/** @private called upon completion of XML data loading in */			private function _onXMLLoadComplete($event:Event):void			{				// clean up load and store reference to the full XML data set.				$event.target.removeEventListener(Event.COMPLETE, this._onXMLLoadComplete);				_xml = new XML( URLLoader($event.target).data );								// loop through all <cue> nodes and store a reference to each by ID.				for each (var $cue:XML in _xml.cue) {					if ($cue.@id != "") _xmlById[ $cue.@id ] = $cue;				}								play();			}				/**		* Gets a cue node by Id name.		*/		public function getCueId($id:String):XML {			if (_xmlById.hasOwnProperty($id)) return _xmlById[ $id ] as XML;			return null;		}				/**		* Gets a dialogue node by numeric index.		*/		public function getCueAt($index:int):XML {			if (_xml.cue[ $index ] != undefined) return _xml.cue[ $index ];			return null;		}				/**		* Calls for dialogue cue playback. Subtitle is plotted relative to a DisplayObject on screen, or at specified target point.		*/		public function playCue($xmlId:String, $plotAt:Object=null):void		{			stop();			var $cue:XML = getCueId($xmlId);						if (!!stage && !!lassiePlayer && !!$cue)			{				if (!!$plotAt)				{					var $plot:String = "";										if ($plotAt is DisplayObject)					{						// DisplayObject placement reference specified.						var $rect:Rectangle = DisplayObject($plotAt).getRect( lassiePlayer.window );						$plot = ($rect.x + ($rect.width / 2)) +","+ ($rect.y - 10);					}					else if ($plotAt.hasOwnProperty("x") && $plotAt.hasOwnProperty("y"))					{						// Point placement reference specified.						$plot = $plotAt.x +","+ $plotAt.y;					}										for each (var $dia:XML in $cue.dia) {						$dia.@plot = $plot;					}				}								stage.addEventListener(LassieEvent.DIALOGUE_COMPLETE, this._onContinuePlayback, false, 0, true);				lassiePlayer.playDialogue($cue);			}		}					/** @private called upon receiving notification of dialogue playback completion */			private function _onContinuePlayback($event:Event):void {				stage.removeEventListener(LassieEvent.DIALOGUE_COMPLETE, this._onContinuePlayback);				play();			}					/**		* Calls for the cutscene to stop and for the Lassie Player to transition to a new room.		*/		public function exitToRoom($roomRef:String):void {			stop();			if (!!lassiePlayer) lassiePlayer.processXML( new XML('<game room="'+ $roomRef +'"/>') );		}	}}